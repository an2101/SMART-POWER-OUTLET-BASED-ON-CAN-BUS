
rtos_stm32_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047fc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800490c  0800490c  0000590c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b4  080049b4  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080049b4  080049b4  00006060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080049b4  080049b4  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b4  080049b4  000059b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049b8  080049b8  000059b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080049bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001220  20000060  08004a1c  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001280  08004a1c  00006280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014eeb  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303c  00000000  00000000  0001af74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0001dfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e68  00000000  00000000  0001f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019674  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140c3  00000000  00000000  00039714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093292  00000000  00000000  0004d7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0a69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005070  00000000  00000000  000e0aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e5b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080048f4 	.word	0x080048f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080048f4 	.word	0x080048f4

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	@ 0x58
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fbd7 	bl	8000938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f869 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f90d 	bl	80003ac <MX_GPIO_Init>
  MX_CAN_Init();
 8000192:	f000 f8ab 	bl	80002ec <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000196:	f000 f8df 	bl	8000358 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800019a:	2201      	movs	r2, #1
 800019c:	2108      	movs	r1, #8
 800019e:	4827      	ldr	r0, [pc, #156]	@ (800023c <main+0xbc>)
 80001a0:	f001 fab8 	bl	8001714 <HAL_GPIO_WritePin>
  uartQueue = xQueueCreate(10, sizeof(uint8_t));
 80001a4:	2200      	movs	r2, #0
 80001a6:	2101      	movs	r1, #1
 80001a8:	200a      	movs	r0, #10
 80001aa:	f002 fced 	bl	8002b88 <xQueueGenericCreate>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a23      	ldr	r2, [pc, #140]	@ (8000240 <main+0xc0>)
 80001b2:	6013      	str	r3, [r2, #0]
        canQueue = xQueueCreate(10, sizeof(uint8_t));
 80001b4:	2200      	movs	r2, #0
 80001b6:	2101      	movs	r1, #1
 80001b8:	200a      	movs	r0, #10
 80001ba:	f002 fce5 	bl	8002b88 <xQueueGenericCreate>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a20      	ldr	r2, [pc, #128]	@ (8000244 <main+0xc4>)
 80001c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uartTask */
  osThreadDef(uartTask, Task_UART_Receive, osPriorityNormal, 0, 128);
 80001c4:	4b20      	ldr	r3, [pc, #128]	@ (8000248 <main+0xc8>)
 80001c6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80001ca:	461d      	mov	r5, r3
 80001cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 80001d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f002 fb6c 	bl	80028bc <osThreadCreate>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4a19      	ldr	r2, [pc, #100]	@ (800024c <main+0xcc>)
 80001e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of canTask */
  osThreadDef(canTask, Task_CAN_Send, osPriorityNormal, 0, 128);
 80001ea:	4b19      	ldr	r3, [pc, #100]	@ (8000250 <main+0xd0>)
 80001ec:	f107 0420 	add.w	r4, r7, #32
 80001f0:	461d      	mov	r5, r3
 80001f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canTaskHandle = osThreadCreate(osThread(canTask), NULL);
 80001fe:	f107 0320 	add.w	r3, r7, #32
 8000202:	2100      	movs	r1, #0
 8000204:	4618      	mov	r0, r3
 8000206:	f002 fb59 	bl	80028bc <osThreadCreate>
 800020a:	4603      	mov	r3, r0
 800020c:	4a11      	ldr	r2, [pc, #68]	@ (8000254 <main+0xd4>)
 800020e:	6013      	str	r3, [r2, #0]

  /* definition and creation of relay1Task */
  osThreadDef(relay1Task, Task_Relay1_Control, osPriorityNormal, 0, 128);
 8000210:	4b11      	ldr	r3, [pc, #68]	@ (8000258 <main+0xd8>)
 8000212:	1d3c      	adds	r4, r7, #4
 8000214:	461d      	mov	r5, r3
 8000216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800021a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800021e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  relay1TaskHandle = osThreadCreate(osThread(relay1Task), NULL);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f002 fb48 	bl	80028bc <osThreadCreate>
 800022c:	4603      	mov	r3, r0
 800022e:	4a0b      	ldr	r2, [pc, #44]	@ (800025c <main+0xdc>)
 8000230:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000232:	f002 fb3c 	bl	80028ae <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000236:	bf00      	nop
 8000238:	e7fd      	b.n	8000236 <main+0xb6>
 800023a:	bf00      	nop
 800023c:	40010c00 	.word	0x40010c00
 8000240:	20000398 	.word	0x20000398
 8000244:	2000039c 	.word	0x2000039c
 8000248:	08004918 	.word	0x08004918
 800024c:	2000038c 	.word	0x2000038c
 8000250:	0800493c 	.word	0x0800493c
 8000254:	20000390 	.word	0x20000390
 8000258:	08004964 	.word	0x08004964
 800025c:	20000394 	.word	0x20000394

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b090      	sub	sp, #64	@ 0x40
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	f107 0318 	add.w	r3, r7, #24
 800026a:	2228      	movs	r2, #40	@ 0x28
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f004 fa52 	bl	8004718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]
 8000280:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000282:	2301      	movs	r3, #1
 8000284:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000286:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800028a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	2301      	movs	r3, #1
 8000292:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	2302      	movs	r3, #2
 8000296:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000298:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800029c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800029e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0318 	add.w	r3, r7, #24
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 fa4b 	bl	8001744 <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002b4:	f000 f976 	bl	80005a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	230f      	movs	r3, #15
 80002ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002bc:	2302      	movs	r3, #2
 80002be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2102      	movs	r1, #2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 fcb8 	bl	8001c48 <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002de:	f000 f961 	bl	80005a4 <Error_Handler>
  }
}
 80002e2:	bf00      	nop
 80002e4:	3740      	adds	r7, #64	@ 0x40
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002f0:	4b17      	ldr	r3, [pc, #92]	@ (8000350 <MX_CAN_Init+0x64>)
 80002f2:	4a18      	ldr	r2, [pc, #96]	@ (8000354 <MX_CAN_Init+0x68>)
 80002f4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 72;
 80002f6:	4b16      	ldr	r3, [pc, #88]	@ (8000350 <MX_CAN_Init+0x64>)
 80002f8:	2248      	movs	r2, #72	@ 0x48
 80002fa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002fc:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <MX_CAN_Init+0x64>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000302:	4b13      	ldr	r3, [pc, #76]	@ (8000350 <MX_CAN_Init+0x64>)
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000308:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <MX_CAN_Init+0x64>)
 800030a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800030e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000310:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <MX_CAN_Init+0x64>)
 8000312:	2200      	movs	r2, #0
 8000314:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000316:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <MX_CAN_Init+0x64>)
 8000318:	2200      	movs	r2, #0
 800031a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800031c:	4b0c      	ldr	r3, [pc, #48]	@ (8000350 <MX_CAN_Init+0x64>)
 800031e:	2200      	movs	r2, #0
 8000320:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000322:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <MX_CAN_Init+0x64>)
 8000324:	2200      	movs	r2, #0
 8000326:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000328:	4b09      	ldr	r3, [pc, #36]	@ (8000350 <MX_CAN_Init+0x64>)
 800032a:	2200      	movs	r2, #0
 800032c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800032e:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <MX_CAN_Init+0x64>)
 8000330:	2200      	movs	r2, #0
 8000332:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000334:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <MX_CAN_Init+0x64>)
 8000336:	2200      	movs	r2, #0
 8000338:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800033a:	4805      	ldr	r0, [pc, #20]	@ (8000350 <MX_CAN_Init+0x64>)
 800033c:	f000 fb2e 	bl	800099c <HAL_CAN_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000346:	f000 f92d 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	2000031c 	.word	0x2000031c
 8000354:	40006400 	.word	0x40006400

08000358 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800035c:	4b11      	ldr	r3, [pc, #68]	@ (80003a4 <MX_USART1_UART_Init+0x4c>)
 800035e:	4a12      	ldr	r2, [pc, #72]	@ (80003a8 <MX_USART1_UART_Init+0x50>)
 8000360:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000362:	4b10      	ldr	r3, [pc, #64]	@ (80003a4 <MX_USART1_UART_Init+0x4c>)
 8000364:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000368:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800036a:	4b0e      	ldr	r3, [pc, #56]	@ (80003a4 <MX_USART1_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000370:	4b0c      	ldr	r3, [pc, #48]	@ (80003a4 <MX_USART1_UART_Init+0x4c>)
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000376:	4b0b      	ldr	r3, [pc, #44]	@ (80003a4 <MX_USART1_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800037c:	4b09      	ldr	r3, [pc, #36]	@ (80003a4 <MX_USART1_UART_Init+0x4c>)
 800037e:	220c      	movs	r2, #12
 8000380:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000382:	4b08      	ldr	r3, [pc, #32]	@ (80003a4 <MX_USART1_UART_Init+0x4c>)
 8000384:	2200      	movs	r2, #0
 8000386:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000388:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <MX_USART1_UART_Init+0x4c>)
 800038a:	2200      	movs	r2, #0
 800038c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800038e:	4805      	ldr	r0, [pc, #20]	@ (80003a4 <MX_USART1_UART_Init+0x4c>)
 8000390:	f002 f846 	bl	8002420 <HAL_UART_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800039a:	f000 f903 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000344 	.word	0x20000344
 80003a8:	40013800 	.word	0x40013800

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000438 <MX_GPIO_Init+0x8c>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000438 <MX_GPIO_Init+0x8c>)
 80003c6:	f043 0320 	orr.w	r3, r3, #32
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000438 <MX_GPIO_Init+0x8c>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0320 	and.w	r3, r3, #32
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d8:	4b17      	ldr	r3, [pc, #92]	@ (8000438 <MX_GPIO_Init+0x8c>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a16      	ldr	r2, [pc, #88]	@ (8000438 <MX_GPIO_Init+0x8c>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b14      	ldr	r3, [pc, #80]	@ (8000438 <MX_GPIO_Init+0x8c>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0304 	and.w	r3, r3, #4
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f0:	4b11      	ldr	r3, [pc, #68]	@ (8000438 <MX_GPIO_Init+0x8c>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a10      	ldr	r2, [pc, #64]	@ (8000438 <MX_GPIO_Init+0x8c>)
 80003f6:	f043 0308 	orr.w	r3, r3, #8
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000438 <MX_GPIO_Init+0x8c>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0308 	and.w	r3, r3, #8
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2108      	movs	r1, #8
 800040c:	480b      	ldr	r0, [pc, #44]	@ (800043c <MX_GPIO_Init+0x90>)
 800040e:	f001 f981 	bl	8001714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000412:	2308      	movs	r3, #8
 8000414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2302      	movs	r3, #2
 8000420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	4619      	mov	r1, r3
 8000428:	4804      	ldr	r0, [pc, #16]	@ (800043c <MX_GPIO_Init+0x90>)
 800042a:	f000 fff7 	bl	800141c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800042e:	bf00      	nop
 8000430:	3720      	adds	r7, #32
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000
 800043c:	40010c00 	.word	0x40010c00

08000440 <Task_UART_Receive>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_UART_Receive */
void Task_UART_Receive(void const * argument)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	uint8_t rxData;
		    while (1)
		    {
		        if (HAL_UART_Receive(&huart1, &rxData, 1, HAL_MAX_DELAY) == HAL_OK)
 8000448:	f107 010f 	add.w	r1, r7, #15
 800044c:	f04f 33ff 	mov.w	r3, #4294967295
 8000450:	2201      	movs	r2, #1
 8000452:	4808      	ldr	r0, [pc, #32]	@ (8000474 <Task_UART_Receive+0x34>)
 8000454:	f002 f834 	bl	80024c0 <HAL_UART_Receive>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d1f4      	bne.n	8000448 <Task_UART_Receive+0x8>
		        {
		            xQueueSend(uartQueue, &rxData, portMAX_DELAY);
 800045e:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <Task_UART_Receive+0x38>)
 8000460:	6818      	ldr	r0, [r3, #0]
 8000462:	f107 010f 	add.w	r1, r7, #15
 8000466:	2300      	movs	r3, #0
 8000468:	f04f 32ff 	mov.w	r2, #4294967295
 800046c:	f002 fbe6 	bl	8002c3c <xQueueGenericSend>
		        if (HAL_UART_Receive(&huart1, &rxData, 1, HAL_MAX_DELAY) == HAL_OK)
 8000470:	e7ea      	b.n	8000448 <Task_UART_Receive+0x8>
 8000472:	bf00      	nop
 8000474:	20000344 	.word	0x20000344
 8000478:	20000398 	.word	0x20000398

0800047c <Task_CAN_Send>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_CAN_Send */
void Task_CAN_Send(void const * argument)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08c      	sub	sp, #48	@ 0x30
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef TxHeader;
		    uint8_t TxData[8];
		    uint32_t TxMailbox;
		    uint8_t receivedData;

		    HAL_CAN_Start(&hcan);
 8000484:	4820      	ldr	r0, [pc, #128]	@ (8000508 <Task_CAN_Send+0x8c>)
 8000486:	f000 fb84 	bl	8000b92 <HAL_CAN_Start>
		    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800048a:	2102      	movs	r1, #2
 800048c:	481e      	ldr	r0, [pc, #120]	@ (8000508 <Task_CAN_Send+0x8c>)
 800048e:	f000 fc93 	bl	8000db8 <HAL_CAN_ActivateNotification>

		    TxHeader.StdId = 0x123;
 8000492:	f240 1323 	movw	r3, #291	@ 0x123
 8000496:	61bb      	str	r3, [r7, #24]
		    TxHeader.ExtId = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	61fb      	str	r3, [r7, #28]
		    TxHeader.RTR = CAN_RTR_DATA;
 800049c:	2300      	movs	r3, #0
 800049e:	627b      	str	r3, [r7, #36]	@ 0x24
		    TxHeader.IDE = CAN_ID_STD;
 80004a0:	2300      	movs	r3, #0
 80004a2:	623b      	str	r3, [r7, #32]
		    TxHeader.DLC = 8;
 80004a4:	2308      	movs	r3, #8
 80004a6:	62bb      	str	r3, [r7, #40]	@ 0x28
		    TxHeader.TransmitGlobalTime = DISABLE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

		    while (1)
		    {
		        if (xQueueReceive(canQueue, &receivedData, portMAX_DELAY))
 80004ae:	4b17      	ldr	r3, [pc, #92]	@ (800050c <Task_CAN_Send+0x90>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f107 010b 	add.w	r1, r7, #11
 80004b6:	f04f 32ff 	mov.w	r2, #4294967295
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 fcc0 	bl	8002e40 <xQueueReceive>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f3      	beq.n	80004ae <Task_CAN_Send+0x32>
		        {
		        	if(receivedData=='3'){
 80004c6:	7afb      	ldrb	r3, [r7, #11]
 80004c8:	2b33      	cmp	r3, #51	@ 0x33
 80004ca:	d109      	bne.n	80004e0 <Task_CAN_Send+0x64>
		            memset(TxData, 0, 8);
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	2208      	movs	r2, #8
 80004d2:	2100      	movs	r1, #0
 80004d4:	4618      	mov	r0, r3
 80004d6:	f004 f91f 	bl	8004718 <memset>
		            TxData[0] = '1';}
 80004da:	2331      	movs	r3, #49	@ 0x31
 80004dc:	743b      	strb	r3, [r7, #16]
 80004de:	e008      	b.n	80004f2 <Task_CAN_Send+0x76>
		        	else {memset(TxData, 0, 8);
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	2208      	movs	r2, #8
 80004e6:	2100      	movs	r1, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f004 f915 	bl	8004718 <memset>
		            TxData[0] = '2';}
 80004ee:	2332      	movs	r3, #50	@ 0x32
 80004f0:	743b      	strb	r3, [r7, #16]
		            HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	f107 0210 	add.w	r2, r7, #16
 80004fa:	f107 0118 	add.w	r1, r7, #24
 80004fe:	4802      	ldr	r0, [pc, #8]	@ (8000508 <Task_CAN_Send+0x8c>)
 8000500:	f000 fb8b 	bl	8000c1a <HAL_CAN_AddTxMessage>
		        if (xQueueReceive(canQueue, &receivedData, portMAX_DELAY))
 8000504:	e7d3      	b.n	80004ae <Task_CAN_Send+0x32>
 8000506:	bf00      	nop
 8000508:	2000031c 	.word	0x2000031c
 800050c:	2000039c 	.word	0x2000039c

08000510 <Task_Relay1_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Relay1_Control */
void Task_Relay1_Control(void const * argument)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	uint8_t receivedData;
		    while (1)
		    {
		        if (xQueueReceive(uartQueue, &receivedData, portMAX_DELAY))
 8000518:	4b16      	ldr	r3, [pc, #88]	@ (8000574 <Task_Relay1_Control+0x64>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f107 010f 	add.w	r1, r7, #15
 8000520:	f04f 32ff 	mov.w	r2, #4294967295
 8000524:	4618      	mov	r0, r3
 8000526:	f002 fc8b 	bl	8002e40 <xQueueReceive>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0f3      	beq.n	8000518 <Task_Relay1_Control+0x8>
		        {
		            if (receivedData == '1')
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	2b31      	cmp	r3, #49	@ 0x31
 8000534:	d105      	bne.n	8000542 <Task_Relay1_Control+0x32>
		                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2108      	movs	r1, #8
 800053a:	480f      	ldr	r0, [pc, #60]	@ (8000578 <Task_Relay1_Control+0x68>)
 800053c:	f001 f8ea 	bl	8001714 <HAL_GPIO_WritePin>
 8000540:	e7ea      	b.n	8000518 <Task_Relay1_Control+0x8>
		            else if (receivedData == '2')
 8000542:	7bfb      	ldrb	r3, [r7, #15]
 8000544:	2b32      	cmp	r3, #50	@ 0x32
 8000546:	d105      	bne.n	8000554 <Task_Relay1_Control+0x44>
		                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2108      	movs	r1, #8
 800054c:	480a      	ldr	r0, [pc, #40]	@ (8000578 <Task_Relay1_Control+0x68>)
 800054e:	f001 f8e1 	bl	8001714 <HAL_GPIO_WritePin>
 8000552:	e7e1      	b.n	8000518 <Task_Relay1_Control+0x8>
		            else if (receivedData == '3' || receivedData == '4')
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	2b33      	cmp	r3, #51	@ 0x33
 8000558:	d002      	beq.n	8000560 <Task_Relay1_Control+0x50>
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	2b34      	cmp	r3, #52	@ 0x34
 800055e:	d1db      	bne.n	8000518 <Task_Relay1_Control+0x8>
		                xQueueSend(canQueue, &receivedData, portMAX_DELAY);
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <Task_Relay1_Control+0x6c>)
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	f107 010f 	add.w	r1, r7, #15
 8000568:	2300      	movs	r3, #0
 800056a:	f04f 32ff 	mov.w	r2, #4294967295
 800056e:	f002 fb65 	bl	8002c3c <xQueueGenericSend>
		        if (xQueueReceive(uartQueue, &receivedData, portMAX_DELAY))
 8000572:	e7d1      	b.n	8000518 <Task_Relay1_Control+0x8>
 8000574:	20000398 	.word	0x20000398
 8000578:	40010c00 	.word	0x40010c00
 800057c:	2000039c 	.word	0x2000039c

08000580 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a04      	ldr	r2, [pc, #16]	@ (80005a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d101      	bne.n	8000596 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000592:	f000 f9e7 	bl	8000964 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40000400 	.word	0x40000400

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <Error_Handler+0x8>

080005b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b6:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <HAL_MspInit+0x68>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	4a17      	ldr	r2, [pc, #92]	@ (8000618 <HAL_MspInit+0x68>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6193      	str	r3, [r2, #24]
 80005c2:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <HAL_MspInit+0x68>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <HAL_MspInit+0x68>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a11      	ldr	r2, [pc, #68]	@ (8000618 <HAL_MspInit+0x68>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <HAL_MspInit+0x68>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	210f      	movs	r1, #15
 80005ea:	f06f 0001 	mvn.w	r0, #1
 80005ee:	f000 feea 	bl	80013c6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005f2:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <HAL_MspInit+0x6c>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	4a04      	ldr	r2, [pc, #16]	@ (800061c <HAL_MspInit+0x6c>)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000
 800061c:	40010000 	.word	0x40010000

08000620 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	@ 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a29      	ldr	r2, [pc, #164]	@ (80006e0 <HAL_CAN_MspInit+0xc0>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d14b      	bne.n	80006d8 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000640:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <HAL_CAN_MspInit+0xc4>)
 8000642:	69db      	ldr	r3, [r3, #28]
 8000644:	4a27      	ldr	r2, [pc, #156]	@ (80006e4 <HAL_CAN_MspInit+0xc4>)
 8000646:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800064a:	61d3      	str	r3, [r2, #28]
 800064c:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <HAL_CAN_MspInit+0xc4>)
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <HAL_CAN_MspInit+0xc4>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a21      	ldr	r2, [pc, #132]	@ (80006e4 <HAL_CAN_MspInit+0xc4>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <HAL_CAN_MspInit+0xc4>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0308 	and.w	r3, r3, #8
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000670:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	4818      	ldr	r0, [pc, #96]	@ (80006e8 <HAL_CAN_MspInit+0xc8>)
 8000686:	f000 fec9 	bl	800141c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800068a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800068e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000694:	2303      	movs	r3, #3
 8000696:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	4812      	ldr	r0, [pc, #72]	@ (80006e8 <HAL_CAN_MspInit+0xc8>)
 80006a0:	f000 febc 	bl	800141c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <HAL_CAN_MspInit+0xcc>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80006aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ac:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80006b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80006b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80006ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80006c2:	4a0a      	ldr	r2, [pc, #40]	@ (80006ec <HAL_CAN_MspInit+0xcc>)
 80006c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c6:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2105      	movs	r1, #5
 80006cc:	2015      	movs	r0, #21
 80006ce:	f000 fe7a 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006d2:	2015      	movs	r0, #21
 80006d4:	f000 fe93 	bl	80013fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	@ 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40006400 	.word	0x40006400
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010c00 	.word	0x40010c00
 80006ec:	40010000 	.word	0x40010000

080006f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a1c      	ldr	r2, [pc, #112]	@ (800077c <HAL_UART_MspInit+0x8c>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d131      	bne.n	8000774 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <HAL_UART_MspInit+0x90>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a1a      	ldr	r2, [pc, #104]	@ (8000780 <HAL_UART_MspInit+0x90>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <HAL_UART_MspInit+0x90>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <HAL_UART_MspInit+0x90>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a14      	ldr	r2, [pc, #80]	@ (8000780 <HAL_UART_MspInit+0x90>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <HAL_UART_MspInit+0x90>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000740:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	4619      	mov	r1, r3
 8000754:	480b      	ldr	r0, [pc, #44]	@ (8000784 <HAL_UART_MspInit+0x94>)
 8000756:	f000 fe61 	bl	800141c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800075a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800075e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <HAL_UART_MspInit+0x94>)
 8000770:	f000 fe54 	bl	800141c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40013800 	.word	0x40013800
 8000780:	40021000 	.word	0x40021000
 8000784:	40010800 	.word	0x40010800

08000788 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08e      	sub	sp, #56	@ 0x38
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000790:	2300      	movs	r3, #0
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000794:	2300      	movs	r3, #0
 8000796:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000798:	2300      	movs	r3, #0
 800079a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800079e:	4b34      	ldr	r3, [pc, #208]	@ (8000870 <HAL_InitTick+0xe8>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a33      	ldr	r2, [pc, #204]	@ (8000870 <HAL_InitTick+0xe8>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b31      	ldr	r3, [pc, #196]	@ (8000870 <HAL_InitTick+0xe8>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007b6:	f107 0210 	add.w	r2, r7, #16
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fbb1 	bl	8001f28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007c6:	6a3b      	ldr	r3, [r7, #32]
 80007c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d103      	bne.n	80007d8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007d0:	f001 fb82 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 80007d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80007d6:	e004      	b.n	80007e2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007d8:	f001 fb7e 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 80007dc:	4603      	mov	r3, r0
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007e4:	4a23      	ldr	r2, [pc, #140]	@ (8000874 <HAL_InitTick+0xec>)
 80007e6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ea:	0c9b      	lsrs	r3, r3, #18
 80007ec:	3b01      	subs	r3, #1
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80007f0:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <HAL_InitTick+0xf0>)
 80007f2:	4a22      	ldr	r2, [pc, #136]	@ (800087c <HAL_InitTick+0xf4>)
 80007f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80007f6:	4b20      	ldr	r3, [pc, #128]	@ (8000878 <HAL_InitTick+0xf0>)
 80007f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007fc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80007fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000878 <HAL_InitTick+0xf0>)
 8000800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000802:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000804:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <HAL_InitTick+0xf0>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <HAL_InitTick+0xf0>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <HAL_InitTick+0xf0>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000816:	4818      	ldr	r0, [pc, #96]	@ (8000878 <HAL_InitTick+0xf0>)
 8000818:	f001 fbd4 	bl	8001fc4 <HAL_TIM_Base_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000822:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000826:	2b00      	cmp	r3, #0
 8000828:	d11b      	bne.n	8000862 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800082a:	4813      	ldr	r0, [pc, #76]	@ (8000878 <HAL_InitTick+0xf0>)
 800082c:	f001 fc22 	bl	8002074 <HAL_TIM_Base_Start_IT>
 8000830:	4603      	mov	r3, r0
 8000832:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000836:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800083a:	2b00      	cmp	r3, #0
 800083c:	d111      	bne.n	8000862 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800083e:	201d      	movs	r0, #29
 8000840:	f000 fddd 	bl	80013fe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b0f      	cmp	r3, #15
 8000848:	d808      	bhi.n	800085c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800084a:	2200      	movs	r2, #0
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	201d      	movs	r0, #29
 8000850:	f000 fdb9 	bl	80013c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000854:	4a0a      	ldr	r2, [pc, #40]	@ (8000880 <HAL_InitTick+0xf8>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6013      	str	r3, [r2, #0]
 800085a:	e002      	b.n	8000862 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800085c:	2301      	movs	r3, #1
 800085e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000862:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000866:	4618      	mov	r0, r3
 8000868:	3738      	adds	r7, #56	@ 0x38
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	431bde83 	.word	0x431bde83
 8000878:	200003a0 	.word	0x200003a0
 800087c:	40000400 	.word	0x40000400
 8000880:	20000004 	.word	0x20000004

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <NMI_Handler+0x4>

0800088c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <MemManage_Handler+0x4>

0800089c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <UsageFault_Handler+0x4>

080008ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008bc:	4802      	ldr	r0, [pc, #8]	@ (80008c8 <CAN1_RX1_IRQHandler+0x10>)
 80008be:	f000 faa0 	bl	8000e02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000031c 	.word	0x2000031c

080008cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008d0:	4802      	ldr	r0, [pc, #8]	@ (80008dc <TIM3_IRQHandler+0x10>)
 80008d2:	f001 fc1b 	bl	800210c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200003a0 	.word	0x200003a0

080008e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008ec:	f7ff fff8 	bl	80008e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480b      	ldr	r0, [pc, #44]	@ (8000920 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008f2:	490c      	ldr	r1, [pc, #48]	@ (8000924 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000928 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a09      	ldr	r2, [pc, #36]	@ (800092c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000908:	4c09      	ldr	r4, [pc, #36]	@ (8000930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000916:	f003 ff65 	bl	80047e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091a:	f7ff fc31 	bl	8000180 <main>
  bx lr
 800091e:	4770      	bx	lr
  ldr r0, =_sdata
 8000920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000924:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000928:	080049bc 	.word	0x080049bc
  ldr r2, =_sbss
 800092c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000930:	20001280 	.word	0x20001280

08000934 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000934:	e7fe      	b.n	8000934 <ADC1_2_IRQHandler>
	...

08000938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <HAL_Init+0x28>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a07      	ldr	r2, [pc, #28]	@ (8000960 <HAL_Init+0x28>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 fd31 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094e:	200f      	movs	r0, #15
 8000950:	f7ff ff1a 	bl	8000788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000954:	f7ff fe2c 	bl	80005b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40022000 	.word	0x40022000

08000964 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <HAL_IncTick+0x1c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <HAL_IncTick+0x20>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4413      	add	r3, r2
 8000974:	4a03      	ldr	r2, [pc, #12]	@ (8000984 <HAL_IncTick+0x20>)
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	20000008 	.word	0x20000008
 8000984:	200003e8 	.word	0x200003e8

08000988 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b02      	ldr	r3, [pc, #8]	@ (8000998 <HAL_GetTick+0x10>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	200003e8 	.word	0x200003e8

0800099c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e0ed      	b.n	8000b8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d102      	bne.n	80009c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff fe30 	bl	8000620 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f042 0201 	orr.w	r2, r2, #1
 80009ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009d0:	f7ff ffda 	bl	8000988 <HAL_GetTick>
 80009d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009d6:	e012      	b.n	80009fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009d8:	f7ff ffd6 	bl	8000988 <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	2b0a      	cmp	r3, #10
 80009e4:	d90b      	bls.n	80009fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2205      	movs	r2, #5
 80009f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e0c5      	b.n	8000b8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0e5      	beq.n	80009d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 0202 	bic.w	r2, r2, #2
 8000a1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a1c:	f7ff ffb4 	bl	8000988 <HAL_GetTick>
 8000a20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a22:	e012      	b.n	8000a4a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a24:	f7ff ffb0 	bl	8000988 <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b0a      	cmp	r3, #10
 8000a30:	d90b      	bls.n	8000a4a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a36:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2205      	movs	r2, #5
 8000a42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e09f      	b.n	8000b8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f003 0302 	and.w	r3, r3, #2
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1e5      	bne.n	8000a24 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	7e1b      	ldrb	r3, [r3, #24]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d108      	bne.n	8000a72 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	e007      	b.n	8000a82 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	7e5b      	ldrb	r3, [r3, #25]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d108      	bne.n	8000a9c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	e007      	b.n	8000aac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000aaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7e9b      	ldrb	r3, [r3, #26]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d108      	bne.n	8000ac6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f042 0220 	orr.w	r2, r2, #32
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	e007      	b.n	8000ad6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f022 0220 	bic.w	r2, r2, #32
 8000ad4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7edb      	ldrb	r3, [r3, #27]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d108      	bne.n	8000af0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f022 0210 	bic.w	r2, r2, #16
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e007      	b.n	8000b00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f042 0210 	orr.w	r2, r2, #16
 8000afe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	7f1b      	ldrb	r3, [r3, #28]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d108      	bne.n	8000b1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f042 0208 	orr.w	r2, r2, #8
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	e007      	b.n	8000b2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f022 0208 	bic.w	r2, r2, #8
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7f5b      	ldrb	r3, [r3, #29]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d108      	bne.n	8000b44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f042 0204 	orr.w	r2, r2, #4
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	e007      	b.n	8000b54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f022 0204 	bic.w	r2, r2, #4
 8000b52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	691b      	ldr	r3, [r3, #16]
 8000b62:	431a      	orrs	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	ea42 0103 	orr.w	r1, r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	430a      	orrs	r2, r1
 8000b78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2201      	movs	r2, #1
 8000b84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d12e      	bne.n	8000c04 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2202      	movs	r2, #2
 8000baa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 0201 	bic.w	r2, r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000bbe:	f7ff fee3 	bl	8000988 <HAL_GetTick>
 8000bc2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000bc4:	e012      	b.n	8000bec <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bc6:	f7ff fedf 	bl	8000988 <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	2b0a      	cmp	r3, #10
 8000bd2:	d90b      	bls.n	8000bec <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bd8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2205      	movs	r2, #5
 8000be4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e012      	b.n	8000c12 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1e5      	bne.n	8000bc6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	e006      	b.n	8000c12 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c08:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
  }
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b089      	sub	sp, #36	@ 0x24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c38:	7ffb      	ldrb	r3, [r7, #31]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d003      	beq.n	8000c46 <HAL_CAN_AddTxMessage+0x2c>
 8000c3e:	7ffb      	ldrb	r3, [r7, #31]
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	f040 80ad 	bne.w	8000da0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d10a      	bne.n	8000c66 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d105      	bne.n	8000c66 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f000 8095 	beq.w	8000d90 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	0e1b      	lsrs	r3, r3, #24
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c70:	2201      	movs	r2, #1
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	409a      	lsls	r2, r3
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10d      	bne.n	8000c9e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c8c:	68f9      	ldr	r1, [r7, #12]
 8000c8e:	6809      	ldr	r1, [r1, #0]
 8000c90:	431a      	orrs	r2, r3
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3318      	adds	r3, #24
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	440b      	add	r3, r1
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	e00f      	b.n	8000cbe <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ca8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cae:	68f9      	ldr	r1, [r7, #12]
 8000cb0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000cb2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3318      	adds	r3, #24
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	440b      	add	r3, r1
 8000cbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	6819      	ldr	r1, [r3, #0]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	691a      	ldr	r2, [r3, #16]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3318      	adds	r3, #24
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	440b      	add	r3, r1
 8000cce:	3304      	adds	r3, #4
 8000cd0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	7d1b      	ldrb	r3, [r3, #20]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d111      	bne.n	8000cfe <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3318      	adds	r3, #24
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	6811      	ldr	r1, [r2, #0]
 8000cee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3318      	adds	r3, #24
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	440b      	add	r3, r1
 8000cfa:	3304      	adds	r3, #4
 8000cfc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3307      	adds	r3, #7
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	061a      	lsls	r2, r3, #24
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3306      	adds	r3, #6
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	041b      	lsls	r3, r3, #16
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3305      	adds	r3, #5
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	3204      	adds	r2, #4
 8000d1e:	7812      	ldrb	r2, [r2, #0]
 8000d20:	4610      	mov	r0, r2
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	6811      	ldr	r1, [r2, #0]
 8000d26:	ea43 0200 	orr.w	r2, r3, r0
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	011b      	lsls	r3, r3, #4
 8000d2e:	440b      	add	r3, r1
 8000d30:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000d34:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3303      	adds	r3, #3
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	061a      	lsls	r2, r3, #24
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3302      	adds	r3, #2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	041b      	lsls	r3, r3, #16
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	4313      	orrs	r3, r2
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	4610      	mov	r0, r2
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	6811      	ldr	r1, [r2, #0]
 8000d5c:	ea43 0200 	orr.w	r2, r3, r0
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	440b      	add	r3, r1
 8000d66:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000d6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	3318      	adds	r3, #24
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	4413      	add	r3, r2
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	6811      	ldr	r1, [r2, #0]
 8000d7e:	f043 0201 	orr.w	r2, r3, #1
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3318      	adds	r3, #24
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	440b      	add	r3, r1
 8000d8a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	e00e      	b.n	8000dae <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d94:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e006      	b.n	8000dae <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
  }
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	@ 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d002      	beq.n	8000dd6 <HAL_CAN_ActivateNotification+0x1e>
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d109      	bne.n	8000dea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6959      	ldr	r1, [r3, #20]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e006      	b.n	8000df8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
  }
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b08a      	sub	sp, #40	@ 0x28
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000e3e:	6a3b      	ldr	r3, [r7, #32]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d07c      	beq.n	8000f42 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d023      	beq.n	8000e9a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2201      	movs	r2, #1
 8000e58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f983 	bl	8001170 <HAL_CAN_TxMailbox0CompleteCallback>
 8000e6a:	e016      	b.n	8000e9a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d004      	beq.n	8000e80 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e7e:	e00c      	b.n	8000e9a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d004      	beq.n	8000e94 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e92:	e002      	b.n	8000e9a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 f986 	bl	80011a6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d024      	beq.n	8000eee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 f962 	bl	8001182 <HAL_CAN_TxMailbox1CompleteCallback>
 8000ebe:	e016      	b.n	8000eee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ecc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ed2:	e00c      	b.n	8000eee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d004      	beq.n	8000ee8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ee6:	e002      	b.n	8000eee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f965 	bl	80011b8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d024      	beq.n	8000f42 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f941 	bl	8001194 <HAL_CAN_TxMailbox2CompleteCallback>
 8000f12:	e016      	b.n	8000f42 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d004      	beq.n	8000f28 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f26:	e00c      	b.n	8000f42 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d004      	beq.n	8000f3c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f3a:	e002      	b.n	8000f42 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f944 	bl	80011ca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000f42:	6a3b      	ldr	r3, [r7, #32]
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00c      	beq.n	8000f66 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2210      	movs	r2, #16
 8000f64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000f66:	6a3b      	ldr	r3, [r7, #32]
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00b      	beq.n	8000f88 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f003 0308 	and.w	r3, r3, #8
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d006      	beq.n	8000f88 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2208      	movs	r2, #8
 8000f80:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f933 	bl	80011ee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d009      	beq.n	8000fa6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f91b 	bl	80011dc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
 8000fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00c      	beq.n	8000fca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d007      	beq.n	8000fca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	f003 0320 	and.w	r3, r3, #32
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00b      	beq.n	8000fec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d006      	beq.n	8000fec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2208      	movs	r2, #8
 8000fe4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f913 	bl	8001212 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000fec:	6a3b      	ldr	r3, [r7, #32]
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d009      	beq.n	800100a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f8fb 	bl	8001200 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00b      	beq.n	800102c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2210      	movs	r2, #16
 8001024:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f8fc 	bl	8001224 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00b      	beq.n	800104e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2208      	movs	r2, #8
 8001046:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f8f4 	bl	8001236 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d07b      	beq.n	8001150 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	2b00      	cmp	r3, #0
 8001060:	d072      	beq.n	8001148 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001068:	2b00      	cmp	r3, #0
 800106a:	d008      	beq.n	800107e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001084:	2b00      	cmp	r3, #0
 8001086:	d008      	beq.n	800109a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d008      	beq.n	80010b6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80010ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d043      	beq.n	8001148 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d03e      	beq.n	8001148 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80010d0:	2b60      	cmp	r3, #96	@ 0x60
 80010d2:	d02b      	beq.n	800112c <HAL_CAN_IRQHandler+0x32a>
 80010d4:	2b60      	cmp	r3, #96	@ 0x60
 80010d6:	d82e      	bhi.n	8001136 <HAL_CAN_IRQHandler+0x334>
 80010d8:	2b50      	cmp	r3, #80	@ 0x50
 80010da:	d022      	beq.n	8001122 <HAL_CAN_IRQHandler+0x320>
 80010dc:	2b50      	cmp	r3, #80	@ 0x50
 80010de:	d82a      	bhi.n	8001136 <HAL_CAN_IRQHandler+0x334>
 80010e0:	2b40      	cmp	r3, #64	@ 0x40
 80010e2:	d019      	beq.n	8001118 <HAL_CAN_IRQHandler+0x316>
 80010e4:	2b40      	cmp	r3, #64	@ 0x40
 80010e6:	d826      	bhi.n	8001136 <HAL_CAN_IRQHandler+0x334>
 80010e8:	2b30      	cmp	r3, #48	@ 0x30
 80010ea:	d010      	beq.n	800110e <HAL_CAN_IRQHandler+0x30c>
 80010ec:	2b30      	cmp	r3, #48	@ 0x30
 80010ee:	d822      	bhi.n	8001136 <HAL_CAN_IRQHandler+0x334>
 80010f0:	2b10      	cmp	r3, #16
 80010f2:	d002      	beq.n	80010fa <HAL_CAN_IRQHandler+0x2f8>
 80010f4:	2b20      	cmp	r3, #32
 80010f6:	d005      	beq.n	8001104 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80010f8:	e01d      	b.n	8001136 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001102:	e019      	b.n	8001138 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001106:	f043 0310 	orr.w	r3, r3, #16
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800110c:	e014      	b.n	8001138 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	f043 0320 	orr.w	r3, r3, #32
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001116:	e00f      	b.n	8001138 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001120:	e00a      	b.n	8001138 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800112a:	e005      	b.n	8001138 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001134:	e000      	b.n	8001138 <HAL_CAN_IRQHandler+0x336>
            break;
 8001136:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	699a      	ldr	r2, [r3, #24]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001146:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2204      	movs	r2, #4
 800114e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001152:	2b00      	cmp	r3, #0
 8001154:	d008      	beq.n	8001168 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f870 	bl	8001248 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001168:	bf00      	nop
 800116a:	3728      	adds	r7, #40	@ 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr

08001212 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
	...

0800125c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	@ (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	@ (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db0b      	blt.n	80012ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	4906      	ldr	r1, [pc, #24]	@ (80012f4 <__NVIC_EnableIRQ+0x34>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2001      	movs	r0, #1
 80012e2:	fa00 f202 	lsl.w	r2, r0, r2
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	@ (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	@ (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	@ 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
         );
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	@ 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff4f 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff64 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ffb2 	bl	800134c <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff81 	bl	80012f8 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff57 	bl	80012c0 <__NVIC_EnableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b480      	push	{r7}
 800141e:	b08b      	sub	sp, #44	@ 0x2c
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142e:	e161      	b.n	80016f4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001430:	2201      	movs	r2, #1
 8001432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	429a      	cmp	r2, r3
 800144a:	f040 8150 	bne.w	80016ee <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	4a97      	ldr	r2, [pc, #604]	@ (80016b0 <HAL_GPIO_Init+0x294>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d05e      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
 8001458:	4a95      	ldr	r2, [pc, #596]	@ (80016b0 <HAL_GPIO_Init+0x294>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d875      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 800145e:	4a95      	ldr	r2, [pc, #596]	@ (80016b4 <HAL_GPIO_Init+0x298>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d058      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
 8001464:	4a93      	ldr	r2, [pc, #588]	@ (80016b4 <HAL_GPIO_Init+0x298>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d86f      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 800146a:	4a93      	ldr	r2, [pc, #588]	@ (80016b8 <HAL_GPIO_Init+0x29c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d052      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
 8001470:	4a91      	ldr	r2, [pc, #580]	@ (80016b8 <HAL_GPIO_Init+0x29c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d869      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 8001476:	4a91      	ldr	r2, [pc, #580]	@ (80016bc <HAL_GPIO_Init+0x2a0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d04c      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
 800147c:	4a8f      	ldr	r2, [pc, #572]	@ (80016bc <HAL_GPIO_Init+0x2a0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d863      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 8001482:	4a8f      	ldr	r2, [pc, #572]	@ (80016c0 <HAL_GPIO_Init+0x2a4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d046      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
 8001488:	4a8d      	ldr	r2, [pc, #564]	@ (80016c0 <HAL_GPIO_Init+0x2a4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d85d      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 800148e:	2b12      	cmp	r3, #18
 8001490:	d82a      	bhi.n	80014e8 <HAL_GPIO_Init+0xcc>
 8001492:	2b12      	cmp	r3, #18
 8001494:	d859      	bhi.n	800154a <HAL_GPIO_Init+0x12e>
 8001496:	a201      	add	r2, pc, #4	@ (adr r2, 800149c <HAL_GPIO_Init+0x80>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	08001517 	.word	0x08001517
 80014a0:	080014f1 	.word	0x080014f1
 80014a4:	08001503 	.word	0x08001503
 80014a8:	08001545 	.word	0x08001545
 80014ac:	0800154b 	.word	0x0800154b
 80014b0:	0800154b 	.word	0x0800154b
 80014b4:	0800154b 	.word	0x0800154b
 80014b8:	0800154b 	.word	0x0800154b
 80014bc:	0800154b 	.word	0x0800154b
 80014c0:	0800154b 	.word	0x0800154b
 80014c4:	0800154b 	.word	0x0800154b
 80014c8:	0800154b 	.word	0x0800154b
 80014cc:	0800154b 	.word	0x0800154b
 80014d0:	0800154b 	.word	0x0800154b
 80014d4:	0800154b 	.word	0x0800154b
 80014d8:	0800154b 	.word	0x0800154b
 80014dc:	0800154b 	.word	0x0800154b
 80014e0:	080014f9 	.word	0x080014f9
 80014e4:	0800150d 	.word	0x0800150d
 80014e8:	4a76      	ldr	r2, [pc, #472]	@ (80016c4 <HAL_GPIO_Init+0x2a8>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ee:	e02c      	b.n	800154a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	623b      	str	r3, [r7, #32]
          break;
 80014f6:	e029      	b.n	800154c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	3304      	adds	r3, #4
 80014fe:	623b      	str	r3, [r7, #32]
          break;
 8001500:	e024      	b.n	800154c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	3308      	adds	r3, #8
 8001508:	623b      	str	r3, [r7, #32]
          break;
 800150a:	e01f      	b.n	800154c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	330c      	adds	r3, #12
 8001512:	623b      	str	r3, [r7, #32]
          break;
 8001514:	e01a      	b.n	800154c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800151e:	2304      	movs	r3, #4
 8001520:	623b      	str	r3, [r7, #32]
          break;
 8001522:	e013      	b.n	800154c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d105      	bne.n	8001538 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800152c:	2308      	movs	r3, #8
 800152e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	611a      	str	r2, [r3, #16]
          break;
 8001536:	e009      	b.n	800154c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001538:	2308      	movs	r3, #8
 800153a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	615a      	str	r2, [r3, #20]
          break;
 8001542:	e003      	b.n	800154c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001544:	2300      	movs	r3, #0
 8001546:	623b      	str	r3, [r7, #32]
          break;
 8001548:	e000      	b.n	800154c <HAL_GPIO_Init+0x130>
          break;
 800154a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2bff      	cmp	r3, #255	@ 0xff
 8001550:	d801      	bhi.n	8001556 <HAL_GPIO_Init+0x13a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	e001      	b.n	800155a <HAL_GPIO_Init+0x13e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3304      	adds	r3, #4
 800155a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2bff      	cmp	r3, #255	@ 0xff
 8001560:	d802      	bhi.n	8001568 <HAL_GPIO_Init+0x14c>
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	e002      	b.n	800156e <HAL_GPIO_Init+0x152>
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	3b08      	subs	r3, #8
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	210f      	movs	r1, #15
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	401a      	ands	r2, r3
 8001580:	6a39      	ldr	r1, [r7, #32]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	431a      	orrs	r2, r3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 80a9 	beq.w	80016ee <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800159c:	4b4a      	ldr	r3, [pc, #296]	@ (80016c8 <HAL_GPIO_Init+0x2ac>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a49      	ldr	r2, [pc, #292]	@ (80016c8 <HAL_GPIO_Init+0x2ac>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b47      	ldr	r3, [pc, #284]	@ (80016c8 <HAL_GPIO_Init+0x2ac>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015b4:	4a45      	ldr	r2, [pc, #276]	@ (80016cc <HAL_GPIO_Init+0x2b0>)
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4013      	ands	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a3d      	ldr	r2, [pc, #244]	@ (80016d0 <HAL_GPIO_Init+0x2b4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d00d      	beq.n	80015fc <HAL_GPIO_Init+0x1e0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a3c      	ldr	r2, [pc, #240]	@ (80016d4 <HAL_GPIO_Init+0x2b8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d007      	beq.n	80015f8 <HAL_GPIO_Init+0x1dc>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a3b      	ldr	r2, [pc, #236]	@ (80016d8 <HAL_GPIO_Init+0x2bc>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d101      	bne.n	80015f4 <HAL_GPIO_Init+0x1d8>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e004      	b.n	80015fe <HAL_GPIO_Init+0x1e2>
 80015f4:	2303      	movs	r3, #3
 80015f6:	e002      	b.n	80015fe <HAL_GPIO_Init+0x1e2>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <HAL_GPIO_Init+0x1e2>
 80015fc:	2300      	movs	r3, #0
 80015fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001600:	f002 0203 	and.w	r2, r2, #3
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	4093      	lsls	r3, r2
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4313      	orrs	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800160e:	492f      	ldr	r1, [pc, #188]	@ (80016cc <HAL_GPIO_Init+0x2b0>)
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001628:	4b2c      	ldr	r3, [pc, #176]	@ (80016dc <HAL_GPIO_Init+0x2c0>)
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	492b      	ldr	r1, [pc, #172]	@ (80016dc <HAL_GPIO_Init+0x2c0>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001636:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <HAL_GPIO_Init+0x2c0>)
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	43db      	mvns	r3, r3
 800163e:	4927      	ldr	r1, [pc, #156]	@ (80016dc <HAL_GPIO_Init+0x2c0>)
 8001640:	4013      	ands	r3, r2
 8001642:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001650:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <HAL_GPIO_Init+0x2c0>)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	4921      	ldr	r1, [pc, #132]	@ (80016dc <HAL_GPIO_Init+0x2c0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	60cb      	str	r3, [r1, #12]
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800165e:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <HAL_GPIO_Init+0x2c0>)
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	43db      	mvns	r3, r3
 8001666:	491d      	ldr	r1, [pc, #116]	@ (80016dc <HAL_GPIO_Init+0x2c0>)
 8001668:	4013      	ands	r3, r2
 800166a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001678:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <HAL_GPIO_Init+0x2c0>)
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	4917      	ldr	r1, [pc, #92]	@ (80016dc <HAL_GPIO_Init+0x2c0>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	e006      	b.n	8001694 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <HAL_GPIO_Init+0x2c0>)
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	43db      	mvns	r3, r3
 800168e:	4913      	ldr	r1, [pc, #76]	@ (80016dc <HAL_GPIO_Init+0x2c0>)
 8001690:	4013      	ands	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d01f      	beq.n	80016e0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016a0:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <HAL_GPIO_Init+0x2c0>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	490d      	ldr	r1, [pc, #52]	@ (80016dc <HAL_GPIO_Init+0x2c0>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
 80016ac:	e01f      	b.n	80016ee <HAL_GPIO_Init+0x2d2>
 80016ae:	bf00      	nop
 80016b0:	10320000 	.word	0x10320000
 80016b4:	10310000 	.word	0x10310000
 80016b8:	10220000 	.word	0x10220000
 80016bc:	10210000 	.word	0x10210000
 80016c0:	10120000 	.word	0x10120000
 80016c4:	10110000 	.word	0x10110000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000
 80016d0:	40010800 	.word	0x40010800
 80016d4:	40010c00 	.word	0x40010c00
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <HAL_GPIO_Init+0x2f4>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	4909      	ldr	r1, [pc, #36]	@ (8001710 <HAL_GPIO_Init+0x2f4>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	3301      	adds	r3, #1
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	fa22 f303 	lsr.w	r3, r2, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f47f ae96 	bne.w	8001430 <HAL_GPIO_Init+0x14>
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	372c      	adds	r7, #44	@ 0x2c
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40010400 	.word	0x40010400

08001714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
 8001720:	4613      	mov	r3, r2
 8001722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001724:	787b      	ldrb	r3, [r7, #1]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001730:	e003      	b.n	800173a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001732:	887b      	ldrh	r3, [r7, #2]
 8001734:	041a      	lsls	r2, r3, #16
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	611a      	str	r2, [r3, #16]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e272      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8087 	beq.w	8001872 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001764:	4b92      	ldr	r3, [pc, #584]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b04      	cmp	r3, #4
 800176e:	d00c      	beq.n	800178a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001770:	4b8f      	ldr	r3, [pc, #572]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d112      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
 800177c:	4b8c      	ldr	r3, [pc, #560]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001788:	d10b      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178a:	4b89      	ldr	r3, [pc, #548]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d06c      	beq.n	8001870 <HAL_RCC_OscConfig+0x12c>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d168      	bne.n	8001870 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e24c      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x76>
 80017ac:	4b80      	ldr	r3, [pc, #512]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a7f      	ldr	r2, [pc, #508]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e02e      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x98>
 80017c2:	4b7b      	ldr	r3, [pc, #492]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a7a      	ldr	r2, [pc, #488]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b78      	ldr	r3, [pc, #480]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a77      	ldr	r2, [pc, #476]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e01d      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0xbc>
 80017e6:	4b72      	ldr	r3, [pc, #456]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a71      	ldr	r2, [pc, #452]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b6f      	ldr	r3, [pc, #444]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6e      	ldr	r2, [pc, #440]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 8001800:	4b6b      	ldr	r3, [pc, #428]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a6a      	ldr	r2, [pc, #424]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b68      	ldr	r3, [pc, #416]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a67      	ldr	r2, [pc, #412]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001816:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff f8b2 	bl	8000988 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff f8ae 	bl	8000988 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	@ 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e200      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b5d      	ldr	r3, [pc, #372]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0xe4>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff f89e 	bl	8000988 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff f89a 	bl	8000988 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	@ 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1ec      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	4b53      	ldr	r3, [pc, #332]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x10c>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d063      	beq.n	8001946 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800187e:	4b4c      	ldr	r3, [pc, #304]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800188a:	4b49      	ldr	r3, [pc, #292]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b08      	cmp	r3, #8
 8001894:	d11c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x18c>
 8001896:	4b46      	ldr	r3, [pc, #280]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d116      	bne.n	80018d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	4b43      	ldr	r3, [pc, #268]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x176>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e1c0      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	4b3d      	ldr	r3, [pc, #244]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4939      	ldr	r1, [pc, #228]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	e03a      	b.n	8001946 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d8:	4b36      	ldr	r3, [pc, #216]	@ (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff f853 	bl	8000988 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff f84f 	bl	8000988 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1a1      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f8:	4b2d      	ldr	r3, [pc, #180]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	4b2a      	ldr	r3, [pc, #168]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4927      	ldr	r1, [pc, #156]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	4b26      	ldr	r3, [pc, #152]	@ (80019b4 <HAL_RCC_OscConfig+0x270>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff f832 	bl	8000988 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001928:	f7ff f82e 	bl	8000988 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e180      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d03a      	beq.n	80019c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d019      	beq.n	800198e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001960:	f7ff f812 	bl	8000988 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff f80e 	bl	8000988 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e160      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001986:	2001      	movs	r0, #1
 8001988:	f000 fafe 	bl	8001f88 <RCC_Delay>
 800198c:	e01c      	b.n	80019c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198e:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001994:	f7fe fff8 	bl	8000988 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199a:	e00f      	b.n	80019bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7fe fff4 	bl	8000988 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d908      	bls.n	80019bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e146      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	42420000 	.word	0x42420000
 80019b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019bc:	4b92      	ldr	r3, [pc, #584]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1e9      	bne.n	800199c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80a6 	beq.w	8001b22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019da:	4b8b      	ldr	r3, [pc, #556]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10d      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b88      	ldr	r3, [pc, #544]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a87      	ldr	r2, [pc, #540]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b85      	ldr	r3, [pc, #532]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fe:	2301      	movs	r3, #1
 8001a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	4b82      	ldr	r3, [pc, #520]	@ (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d118      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a7e      	ldr	r2, [pc, #504]	@ (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1a:	f7fe ffb5 	bl	8000988 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a22:	f7fe ffb1 	bl	8000988 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b64      	cmp	r3, #100	@ 0x64
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e103      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	4b75      	ldr	r3, [pc, #468]	@ (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x312>
 8001a48:	4b6f      	ldr	r3, [pc, #444]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6213      	str	r3, [r2, #32]
 8001a54:	e02d      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x334>
 8001a5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a69      	ldr	r2, [pc, #420]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	4b67      	ldr	r3, [pc, #412]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a66      	ldr	r2, [pc, #408]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6213      	str	r3, [r2, #32]
 8001a76:	e01c      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d10c      	bne.n	8001a9a <HAL_RCC_OscConfig+0x356>
 8001a80:	4b61      	ldr	r3, [pc, #388]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4a60      	ldr	r2, [pc, #384]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	6213      	str	r3, [r2, #32]
 8001a8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4a5d      	ldr	r2, [pc, #372]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6213      	str	r3, [r2, #32]
 8001a98:	e00b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a5a      	ldr	r2, [pc, #360]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	4b58      	ldr	r3, [pc, #352]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a57      	ldr	r2, [pc, #348]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d015      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7fe ff65 	bl	8000988 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7fe ff61 	bl	8000988 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0b1      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0ee      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x37e>
 8001ae4:	e014      	b.n	8001b10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7fe ff4f 	bl	8000988 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7fe ff4b 	bl	8000988 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e09b      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	4b40      	ldr	r3, [pc, #256]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ee      	bne.n	8001aee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d105      	bne.n	8001b22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b16:	4b3c      	ldr	r3, [pc, #240]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8087 	beq.w	8001c3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2c:	4b36      	ldr	r3, [pc, #216]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d061      	beq.n	8001bfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d146      	bne.n	8001bce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b33      	ldr	r3, [pc, #204]	@ (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7fe ff1f 	bl	8000988 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7fe ff1b 	bl	8000988 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e06d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b60:	4b29      	ldr	r3, [pc, #164]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b74:	d108      	bne.n	8001b88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b76:	4b24      	ldr	r3, [pc, #144]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4921      	ldr	r1, [pc, #132]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b88:	4b1f      	ldr	r3, [pc, #124]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a19      	ldr	r1, [r3, #32]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	491b      	ldr	r1, [pc, #108]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7fe feef 	bl	8000988 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bae:	f7fe feeb 	bl	8000988 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e03d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc0:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x46a>
 8001bcc:	e035      	b.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7fe fed8 	bl	8000988 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7fe fed4 	bl	8000988 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e026      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x498>
 8001bfa:	e01e      	b.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e019      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <HAL_RCC_OscConfig+0x500>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000

08001c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0d0      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d910      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b67      	ldr	r3, [pc, #412]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 0207 	bic.w	r2, r3, #7
 8001c72:	4965      	ldr	r1, [pc, #404]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b63      	ldr	r3, [pc, #396]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0b8      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca4:	4b59      	ldr	r3, [pc, #356]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a58      	ldr	r2, [pc, #352]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cbc:	4b53      	ldr	r3, [pc, #332]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001cc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc8:	4b50      	ldr	r3, [pc, #320]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	494d      	ldr	r1, [pc, #308]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d040      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b47      	ldr	r3, [pc, #284]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d115      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e07f      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b41      	ldr	r3, [pc, #260]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e073      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3d      	ldr	r3, [pc, #244]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06b      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b39      	ldr	r3, [pc, #228]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4936      	ldr	r1, [pc, #216]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7fe fe26 	bl	8000988 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7fe fe22 	bl	8000988 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e053      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2d      	ldr	r3, [pc, #180]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b27      	ldr	r3, [pc, #156]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d210      	bcs.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	4922      	ldr	r1, [pc, #136]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b20      	ldr	r3, [pc, #128]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e032      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da4:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4916      	ldr	r1, [pc, #88]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dc2:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	490e      	ldr	r1, [pc, #56]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dd6:	f000 f821 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	490a      	ldr	r1, [pc, #40]	@ (8001e10 <HAL_RCC_ClockConfig+0x1c8>)
 8001de8:	5ccb      	ldrb	r3, [r1, r3]
 8001dea:	fa22 f303 	lsr.w	r3, r2, r3
 8001dee:	4a09      	ldr	r2, [pc, #36]	@ (8001e14 <HAL_RCC_ClockConfig+0x1cc>)
 8001df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001df2:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_RCC_ClockConfig+0x1d0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fcc6 	bl	8000788 <HAL_InitTick>

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40022000 	.word	0x40022000
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08004988 	.word	0x08004988
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000004 	.word	0x20000004

08001e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e36:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d002      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x30>
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d003      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0x36>
 8001e4a:	e027      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e4c:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e4e:	613b      	str	r3, [r7, #16]
      break;
 8001e50:	e027      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	0c9b      	lsrs	r3, r3, #18
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	4a17      	ldr	r2, [pc, #92]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d010      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e6a:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	0c5b      	lsrs	r3, r3, #17
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	4a11      	ldr	r2, [pc, #68]	@ (8001ebc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e7e:	fb03 f202 	mul.w	r2, r3, r2
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	e004      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e90:	fb02 f303 	mul.w	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	613b      	str	r3, [r7, #16]
      break;
 8001e9a:	e002      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e9e:	613b      	str	r3, [r7, #16]
      break;
 8001ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea2:	693b      	ldr	r3, [r7, #16]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	007a1200 	.word	0x007a1200
 8001eb8:	080049a0 	.word	0x080049a0
 8001ebc:	080049b0 	.word	0x080049b0
 8001ec0:	003d0900 	.word	0x003d0900

08001ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec8:	4b02      	ldr	r3, [pc, #8]	@ (8001ed4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	20000000 	.word	0x20000000

08001ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001edc:	f7ff fff2 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4903      	ldr	r1, [pc, #12]	@ (8001efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08004998 	.word	0x08004998

08001f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f04:	f7ff ffde 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	0adb      	lsrs	r3, r3, #11
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4903      	ldr	r1, [pc, #12]	@ (8001f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08004998 	.word	0x08004998

08001f28 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	220f      	movs	r2, #15
 8001f36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <HAL_RCC_GetClockConfig+0x58>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0203 	and.w	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f44:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <HAL_RCC_GetClockConfig+0x58>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f50:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <HAL_RCC_GetClockConfig+0x58>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f5c:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <HAL_RCC_GetClockConfig+0x58>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	08db      	lsrs	r3, r3, #3
 8001f62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_RCC_GetClockConfig+0x5c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0207 	and.w	r2, r3, #7
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40022000 	.word	0x40022000

08001f88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f90:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <RCC_Delay+0x34>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <RCC_Delay+0x38>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	0a5b      	lsrs	r3, r3, #9
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fa4:	bf00      	nop
  }
  while (Delay --);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	60fa      	str	r2, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f9      	bne.n	8001fa4 <RCC_Delay+0x1c>
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	10624dd3 	.word	0x10624dd3

08001fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e041      	b.n	800205a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f839 	bl	8002062 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3304      	adds	r3, #4
 8002000:	4619      	mov	r1, r3
 8002002:	4610      	mov	r0, r2
 8002004:	f000 f996 	bl	8002334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d001      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e035      	b.n	80020f8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a16      	ldr	r2, [pc, #88]	@ (8002104 <HAL_TIM_Base_Start_IT+0x90>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d009      	beq.n	80020c2 <HAL_TIM_Base_Start_IT+0x4e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020b6:	d004      	beq.n	80020c2 <HAL_TIM_Base_Start_IT+0x4e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a12      	ldr	r2, [pc, #72]	@ (8002108 <HAL_TIM_Base_Start_IT+0x94>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d111      	bne.n	80020e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2b06      	cmp	r3, #6
 80020d2:	d010      	beq.n	80020f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e4:	e007      	b.n	80020f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40012c00 	.word	0x40012c00
 8002108:	40000400 	.word	0x40000400

0800210c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d020      	beq.n	8002170 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01b      	beq.n	8002170 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0202 	mvn.w	r2, #2
 8002140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f8d1 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 800215c:	e005      	b.n	800216a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f8c4 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f8d3 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	d020      	beq.n	80021bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01b      	beq.n	80021bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0204 	mvn.w	r2, #4
 800218c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2202      	movs	r2, #2
 8002192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f8ab 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 80021a8:	e005      	b.n	80021b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f89e 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f8ad 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d020      	beq.n	8002208 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01b      	beq.n	8002208 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0208 	mvn.w	r2, #8
 80021d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2204      	movs	r2, #4
 80021de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f885 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 80021f4:	e005      	b.n	8002202 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f878 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f887 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	2b00      	cmp	r3, #0
 8002210:	d020      	beq.n	8002254 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b00      	cmp	r3, #0
 800221a:	d01b      	beq.n	8002254 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0210 	mvn.w	r2, #16
 8002224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2208      	movs	r2, #8
 800222a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f85f 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 8002240:	e005      	b.n	800224e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f852 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f861 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00c      	beq.n	8002278 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d007      	beq.n	8002278 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0201 	mvn.w	r2, #1
 8002270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe f984 	bl	8000580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00c      	beq.n	800229c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f8b9 	bl	800240e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00c      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f831 	bl	8002322 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00c      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d007      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0220 	mvn.w	r2, #32
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f88c 	bl	80023fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a2b      	ldr	r2, [pc, #172]	@ (80023f4 <TIM_Base_SetConfig+0xc0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d007      	beq.n	800235c <TIM_Base_SetConfig+0x28>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002352:	d003      	beq.n	800235c <TIM_Base_SetConfig+0x28>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a28      	ldr	r2, [pc, #160]	@ (80023f8 <TIM_Base_SetConfig+0xc4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d108      	bne.n	800236e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a20      	ldr	r2, [pc, #128]	@ (80023f4 <TIM_Base_SetConfig+0xc0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <TIM_Base_SetConfig+0x52>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800237c:	d003      	beq.n	8002386 <TIM_Base_SetConfig+0x52>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a1d      	ldr	r2, [pc, #116]	@ (80023f8 <TIM_Base_SetConfig+0xc4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d108      	bne.n	8002398 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800238c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a0d      	ldr	r2, [pc, #52]	@ (80023f4 <TIM_Base_SetConfig+0xc0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d103      	bne.n	80023cc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f023 0201 	bic.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	611a      	str	r2, [r3, #16]
  }
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	40012c00 	.word	0x40012c00
 80023f8:	40000400 	.word	0x40000400

080023fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e042      	b.n	80024b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe f952 	bl	80006f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2224      	movs	r2, #36	@ 0x24
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002462:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f97d 	bl	8002764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002478:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002488:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002498:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	@ 0x28
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	4613      	mov	r3, r2
 80024ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b20      	cmp	r3, #32
 80024de:	f040 8081 	bne.w	80025e4 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <HAL_UART_Receive+0x2e>
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e079      	b.n	80025e6 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2222      	movs	r2, #34	@ 0x22
 80024fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002506:	f7fe fa3f 	bl	8000988 <HAL_GetTick>
 800250a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	88fa      	ldrh	r2, [r7, #6]
 8002510:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	88fa      	ldrh	r2, [r7, #6]
 8002516:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002520:	d108      	bne.n	8002534 <HAL_UART_Receive+0x74>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d104      	bne.n	8002534 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	e003      	b.n	800253c <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800253c:	e047      	b.n	80025ce <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2200      	movs	r2, #0
 8002546:	2120      	movs	r1, #32
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f850 	bl	80025ee <UART_WaitOnFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e042      	b.n	80025e6 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10c      	bne.n	8002580 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	b29b      	uxth	r3, r3
 800256e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002572:	b29a      	uxth	r2, r3
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	3302      	adds	r3, #2
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	e01f      	b.n	80025c0 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002588:	d007      	beq.n	800259a <HAL_UART_Receive+0xda>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10a      	bne.n	80025a8 <HAL_UART_Receive+0xe8>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	e008      	b.n	80025ba <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3301      	adds	r3, #1
 80025be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1b2      	bne.n	800253e <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e000      	b.n	80025e6 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80025e4:	2302      	movs	r3, #2
  }
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	4613      	mov	r3, r2
 80025fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025fe:	e03b      	b.n	8002678 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002606:	d037      	beq.n	8002678 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002608:	f7fe f9be 	bl	8000988 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	6a3a      	ldr	r2, [r7, #32]
 8002614:	429a      	cmp	r2, r3
 8002616:	d302      	bcc.n	800261e <UART_WaitOnFlagUntilTimeout+0x30>
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e03a      	b.n	8002698 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d023      	beq.n	8002678 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b80      	cmp	r3, #128	@ 0x80
 8002634:	d020      	beq.n	8002678 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b40      	cmp	r3, #64	@ 0x40
 800263a:	d01d      	beq.n	8002678 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b08      	cmp	r3, #8
 8002648:	d116      	bne.n	8002678 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f81d 	bl	80026a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2208      	movs	r2, #8
 800266a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e00f      	b.n	8002698 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	4013      	ands	r3, r2
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	429a      	cmp	r2, r3
 8002686:	bf0c      	ite	eq
 8002688:	2301      	moveq	r3, #1
 800268a:	2300      	movne	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	429a      	cmp	r2, r3
 8002694:	d0b4      	beq.n	8002600 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b095      	sub	sp, #84	@ 0x54
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	330c      	adds	r3, #12
 80026ae:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b2:	e853 3f00 	ldrex	r3, [r3]
 80026b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80026b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	330c      	adds	r3, #12
 80026c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80026ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80026ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026d0:	e841 2300 	strex	r3, r2, [r1]
 80026d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80026d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1e5      	bne.n	80026a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3314      	adds	r3, #20
 80026e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	e853 3f00 	ldrex	r3, [r3]
 80026ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3314      	adds	r3, #20
 80026fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002700:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002704:	e841 2300 	strex	r3, r2, [r1]
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e5      	bne.n	80026dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	2b01      	cmp	r3, #1
 8002716:	d119      	bne.n	800274c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	330c      	adds	r3, #12
 800271e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	e853 3f00 	ldrex	r3, [r3]
 8002726:	60bb      	str	r3, [r7, #8]
   return(result);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f023 0310 	bic.w	r3, r3, #16
 800272e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	330c      	adds	r3, #12
 8002736:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002738:	61ba      	str	r2, [r7, #24]
 800273a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273c:	6979      	ldr	r1, [r7, #20]
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	e841 2300 	strex	r3, r2, [r1]
 8002744:	613b      	str	r3, [r7, #16]
   return(result);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e5      	bne.n	8002718 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800275a:	bf00      	nop
 800275c:	3754      	adds	r7, #84	@ 0x54
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800279e:	f023 030c 	bic.w	r3, r3, #12
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002878 <UART_SetConfig+0x114>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d103      	bne.n	80027d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027cc:	f7ff fb98 	bl	8001f00 <HAL_RCC_GetPCLK2Freq>
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	e002      	b.n	80027da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027d4:	f7ff fb80 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 80027d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	009a      	lsls	r2, r3, #2
 80027e4:	441a      	add	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	4a22      	ldr	r2, [pc, #136]	@ (800287c <UART_SetConfig+0x118>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	0119      	lsls	r1, r3, #4
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	009a      	lsls	r2, r3, #2
 8002804:	441a      	add	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002810:	4b1a      	ldr	r3, [pc, #104]	@ (800287c <UART_SetConfig+0x118>)
 8002812:	fba3 0302 	umull	r0, r3, r3, r2
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	2064      	movs	r0, #100	@ 0x64
 800281a:	fb00 f303 	mul.w	r3, r0, r3
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	3332      	adds	r3, #50	@ 0x32
 8002824:	4a15      	ldr	r2, [pc, #84]	@ (800287c <UART_SetConfig+0x118>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002830:	4419      	add	r1, r3
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009a      	lsls	r2, r3, #2
 800283c:	441a      	add	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	fbb2 f2f3 	udiv	r2, r2, r3
 8002848:	4b0c      	ldr	r3, [pc, #48]	@ (800287c <UART_SetConfig+0x118>)
 800284a:	fba3 0302 	umull	r0, r3, r3, r2
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2064      	movs	r0, #100	@ 0x64
 8002852:	fb00 f303 	mul.w	r3, r0, r3
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	3332      	adds	r3, #50	@ 0x32
 800285c:	4a07      	ldr	r2, [pc, #28]	@ (800287c <UART_SetConfig+0x118>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	f003 020f 	and.w	r2, r3, #15
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	440a      	add	r2, r1
 800286e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40013800 	.word	0x40013800
 800287c:	51eb851f 	.word	0x51eb851f

08002880 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800288e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002892:	2b84      	cmp	r3, #132	@ 0x84
 8002894:	d005      	beq.n	80028a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002896:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4413      	add	r3, r2
 800289e:	3303      	adds	r3, #3
 80028a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80028b2:	f000 fe67 	bl	8003584 <vTaskStartScheduler>
  
  return osOK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}

080028bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80028bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028be:	b089      	sub	sp, #36	@ 0x24
 80028c0:	af04      	add	r7, sp, #16
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d020      	beq.n	8002910 <osThreadCreate+0x54>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01c      	beq.n	8002910 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685c      	ldr	r4, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691e      	ldr	r6, [r3, #16]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ffc9 	bl	8002880 <makeFreeRtosPriority>
 80028ee:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028f8:	9202      	str	r2, [sp, #8]
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	9100      	str	r1, [sp, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	4632      	mov	r2, r6
 8002902:	4629      	mov	r1, r5
 8002904:	4620      	mov	r0, r4
 8002906:	f000 fc8d 	bl	8003224 <xTaskCreateStatic>
 800290a:	4603      	mov	r3, r0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	e01c      	b.n	800294a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685c      	ldr	r4, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800291c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ffab 	bl	8002880 <makeFreeRtosPriority>
 800292a:	4602      	mov	r2, r0
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	9200      	str	r2, [sp, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4632      	mov	r2, r6
 8002938:	4629      	mov	r1, r5
 800293a:	4620      	mov	r0, r4
 800293c:	f000 fcd2 	bl	80032e4 <xTaskCreate>
 8002940:	4603      	mov	r3, r0
 8002942:	2b01      	cmp	r3, #1
 8002944:	d001      	beq.n	800294a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002946:	2300      	movs	r3, #0
 8002948:	e000      	b.n	800294c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002954 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f103 0208 	add.w	r2, r3, #8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f04f 32ff 	mov.w	r2, #4294967295
 800296c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f103 0208 	add.w	r2, r3, #8
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f103 0208 	add.w	r2, r3, #8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029aa:	b480      	push	{r7}
 80029ac:	b085      	sub	sp, #20
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a06:	d103      	bne.n	8002a10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	e00c      	b.n	8002a2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3308      	adds	r3, #8
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e002      	b.n	8002a1e <vListInsert+0x2e>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d2f6      	bcs.n	8002a18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	601a      	str	r2, [r3, #0]
}
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6892      	ldr	r2, [r2, #8]
 8002a76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6852      	ldr	r2, [r2, #4]
 8002a80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d103      	bne.n	8002a94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	1e5a      	subs	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
	...

08002ab4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10b      	bne.n	8002ae0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ada:	bf00      	nop
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ae0:	f001 fb6c 	bl	80041bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aec:	68f9      	ldr	r1, [r7, #12]
 8002aee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	441a      	add	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b10:	3b01      	subs	r3, #1
 8002b12:	68f9      	ldr	r1, [r7, #12]
 8002b14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	441a      	add	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	22ff      	movs	r2, #255	@ 0xff
 8002b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	22ff      	movs	r2, #255	@ 0xff
 8002b2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d114      	bne.n	8002b60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01a      	beq.n	8002b74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3310      	adds	r3, #16
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 ff76 	bl	8003a34 <xTaskRemoveFromEventList>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d012      	beq.n	8002b74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <xQueueGenericReset+0xd0>)
 8002b50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	e009      	b.n	8002b74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3310      	adds	r3, #16
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fef5 	bl	8002954 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3324      	adds	r3, #36	@ 0x24
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fef0 	bl	8002954 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b74:	f001 fb52 	bl	800421c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b78:	2301      	movs	r3, #1
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	e000ed04 	.word	0xe000ed04

08002b88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	@ 0x28
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	4613      	mov	r3, r2
 8002b94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10b      	bne.n	8002bb4 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	613b      	str	r3, [r7, #16]
}
 8002bae:	bf00      	nop
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	fb02 f303 	mul.w	r3, r2, r3
 8002bbc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3348      	adds	r3, #72	@ 0x48
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fbbc 	bl	8004340 <pvPortMalloc>
 8002bc8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d011      	beq.n	8002bf4 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	3348      	adds	r3, #72	@ 0x48
 8002bd8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002be2:	79fa      	ldrb	r2, [r7, #7]
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f805 	bl	8002bfe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
	}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d103      	bne.n	8002c1a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	e002      	b.n	8002c20 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	69b8      	ldr	r0, [r7, #24]
 8002c30:	f7ff ff40 	bl	8002ab4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08e      	sub	sp, #56	@ 0x38
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10b      	bne.n	8002c70 <xQueueGenericSend+0x34>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c6a:	bf00      	nop
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <xQueueGenericSend+0x42>
 8002c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <xQueueGenericSend+0x46>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <xQueueGenericSend+0x48>
 8002c82:	2300      	movs	r3, #0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <xQueueGenericSend+0x64>
	__asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c9a:	bf00      	nop
 8002c9c:	bf00      	nop
 8002c9e:	e7fd      	b.n	8002c9c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d103      	bne.n	8002cae <xQueueGenericSend+0x72>
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <xQueueGenericSend+0x76>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <xQueueGenericSend+0x78>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10b      	bne.n	8002cd0 <xQueueGenericSend+0x94>
	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	623b      	str	r3, [r7, #32]
}
 8002cca:	bf00      	nop
 8002ccc:	bf00      	nop
 8002cce:	e7fd      	b.n	8002ccc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cd0:	f001 f876 	bl	8003dc0 <xTaskGetSchedulerState>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <xQueueGenericSend+0xa4>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <xQueueGenericSend+0xa8>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <xQueueGenericSend+0xaa>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <xQueueGenericSend+0xc6>
	__asm volatile
 8002cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	61fb      	str	r3, [r7, #28]
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	e7fd      	b.n	8002cfe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d02:	f001 fa5b 	bl	80041bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d302      	bcc.n	8002d18 <xQueueGenericSend+0xdc>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d129      	bne.n	8002d6c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d1e:	f000 f971 	bl	8003004 <prvCopyDataToQueue>
 8002d22:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d010      	beq.n	8002d4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2e:	3324      	adds	r3, #36	@ 0x24
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fe7f 	bl	8003a34 <xTaskRemoveFromEventList>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e3c <xQueueGenericSend+0x200>)
 8002d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	e00a      	b.n	8002d64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d007      	beq.n	8002d64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d54:	4b39      	ldr	r3, [pc, #228]	@ (8002e3c <xQueueGenericSend+0x200>)
 8002d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d64:	f001 fa5a 	bl	800421c <vPortExitCritical>
				return pdPASS;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e063      	b.n	8002e34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d103      	bne.n	8002d7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d72:	f001 fa53 	bl	800421c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e05c      	b.n	8002e34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d106      	bne.n	8002d8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 feb9 	bl	8003afc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d8e:	f001 fa45 	bl	800421c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d92:	f000 fc61 	bl	8003658 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d96:	f001 fa11 	bl	80041bc <vPortEnterCritical>
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002da0:	b25b      	sxtb	r3, r3
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da6:	d103      	bne.n	8002db0 <xQueueGenericSend+0x174>
 8002da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002db6:	b25b      	sxtb	r3, r3
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d103      	bne.n	8002dc6 <xQueueGenericSend+0x18a>
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002dc6:	f001 fa29 	bl	800421c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dca:	1d3a      	adds	r2, r7, #4
 8002dcc:	f107 0314 	add.w	r3, r7, #20
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fea8 	bl	8003b28 <xTaskCheckForTimeOut>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d124      	bne.n	8002e28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002de0:	f000 fa08 	bl	80031f4 <prvIsQueueFull>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d018      	beq.n	8002e1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	3310      	adds	r3, #16
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fdf8 	bl	80039e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002df8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dfa:	f000 f993 	bl	8003124 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002dfe:	f000 fc39 	bl	8003674 <xTaskResumeAll>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f47f af7c 	bne.w	8002d02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e3c <xQueueGenericSend+0x200>)
 8002e0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	e772      	b.n	8002d02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e1e:	f000 f981 	bl	8003124 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e22:	f000 fc27 	bl	8003674 <xTaskResumeAll>
 8002e26:	e76c      	b.n	8002d02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e2a:	f000 f97b 	bl	8003124 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e2e:	f000 fc21 	bl	8003674 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3738      	adds	r7, #56	@ 0x38
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	e000ed04 	.word	0xe000ed04

08002e40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08c      	sub	sp, #48	@ 0x30
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10b      	bne.n	8002e72 <xQueueReceive+0x32>
	__asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	623b      	str	r3, [r7, #32]
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	e7fd      	b.n	8002e6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d103      	bne.n	8002e80 <xQueueReceive+0x40>
 8002e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <xQueueReceive+0x44>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <xQueueReceive+0x46>
 8002e84:	2300      	movs	r3, #0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10b      	bne.n	8002ea2 <xQueueReceive+0x62>
	__asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	61fb      	str	r3, [r7, #28]
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	e7fd      	b.n	8002e9e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ea2:	f000 ff8d 	bl	8003dc0 <xTaskGetSchedulerState>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <xQueueReceive+0x72>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <xQueueReceive+0x76>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <xQueueReceive+0x78>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10b      	bne.n	8002ed4 <xQueueReceive+0x94>
	__asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	61bb      	str	r3, [r7, #24]
}
 8002ece:	bf00      	nop
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ed4:	f001 f972 	bl	80041bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01f      	beq.n	8002f24 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ee8:	f000 f8f6 	bl	80030d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	1e5a      	subs	r2, r3, #1
 8002ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00f      	beq.n	8002f1c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efe:	3310      	adds	r3, #16
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fd97 	bl	8003a34 <xTaskRemoveFromEventList>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d007      	beq.n	8002f1c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f0c:	4b3c      	ldr	r3, [pc, #240]	@ (8003000 <xQueueReceive+0x1c0>)
 8002f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f1c:	f001 f97e 	bl	800421c <vPortExitCritical>
				return pdPASS;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e069      	b.n	8002ff8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f2a:	f001 f977 	bl	800421c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e062      	b.n	8002ff8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f38:	f107 0310 	add.w	r3, r7, #16
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fddd 	bl	8003afc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f42:	2301      	movs	r3, #1
 8002f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f46:	f001 f969 	bl	800421c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f4a:	f000 fb85 	bl	8003658 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f4e:	f001 f935 	bl	80041bc <vPortEnterCritical>
 8002f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f58:	b25b      	sxtb	r3, r3
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5e:	d103      	bne.n	8002f68 <xQueueReceive+0x128>
 8002f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f6e:	b25b      	sxtb	r3, r3
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d103      	bne.n	8002f7e <xQueueReceive+0x13e>
 8002f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f7e:	f001 f94d 	bl	800421c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f82:	1d3a      	adds	r2, r7, #4
 8002f84:	f107 0310 	add.w	r3, r7, #16
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fdcc 	bl	8003b28 <xTaskCheckForTimeOut>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d123      	bne.n	8002fde <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f98:	f000 f916 	bl	80031c8 <prvIsQueueEmpty>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d017      	beq.n	8002fd2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa4:	3324      	adds	r3, #36	@ 0x24
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fd1c 	bl	80039e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fb2:	f000 f8b7 	bl	8003124 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fb6:	f000 fb5d 	bl	8003674 <xTaskResumeAll>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d189      	bne.n	8002ed4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003000 <xQueueReceive+0x1c0>)
 8002fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	e780      	b.n	8002ed4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fd4:	f000 f8a6 	bl	8003124 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fd8:	f000 fb4c 	bl	8003674 <xTaskResumeAll>
 8002fdc:	e77a      	b.n	8002ed4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fe0:	f000 f8a0 	bl	8003124 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fe4:	f000 fb46 	bl	8003674 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fea:	f000 f8ed 	bl	80031c8 <prvIsQueueEmpty>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f43f af6f 	beq.w	8002ed4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ff6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3730      	adds	r7, #48	@ 0x30
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	e000ed04 	.word	0xe000ed04

08003004 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003018:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10d      	bne.n	800303e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d14d      	bne.n	80030c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fee4 	bl	8003dfc <xTaskPriorityDisinherit>
 8003034:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	e043      	b.n	80030c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d119      	bne.n	8003078 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6858      	ldr	r0, [r3, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	461a      	mov	r2, r3
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	f001 fbee 	bl	8004830 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	441a      	add	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	d32b      	bcc.n	80030c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	e026      	b.n	80030c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68d8      	ldr	r0, [r3, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	461a      	mov	r2, r3
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	f001 fbd4 	bl	8004830 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	425b      	negs	r3, r3
 8003092:	441a      	add	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d207      	bcs.n	80030b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	425b      	negs	r3, r3
 80030ae:	441a      	add	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d105      	bne.n	80030c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80030ce:	697b      	ldr	r3, [r7, #20]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d018      	beq.n	800311c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	441a      	add	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	429a      	cmp	r2, r3
 8003102:	d303      	bcc.n	800310c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68d9      	ldr	r1, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	461a      	mov	r2, r3
 8003116:	6838      	ldr	r0, [r7, #0]
 8003118:	f001 fb8a 	bl	8004830 <memcpy>
	}
}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800312c:	f001 f846 	bl	80041bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003136:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003138:	e011      	b.n	800315e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313e:	2b00      	cmp	r3, #0
 8003140:	d012      	beq.n	8003168 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3324      	adds	r3, #36	@ 0x24
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fc74 	bl	8003a34 <xTaskRemoveFromEventList>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003152:	f000 fd4d 	bl	8003bf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	3b01      	subs	r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800315e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003162:	2b00      	cmp	r3, #0
 8003164:	dce9      	bgt.n	800313a <prvUnlockQueue+0x16>
 8003166:	e000      	b.n	800316a <prvUnlockQueue+0x46>
					break;
 8003168:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	22ff      	movs	r2, #255	@ 0xff
 800316e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003172:	f001 f853 	bl	800421c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003176:	f001 f821 	bl	80041bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003180:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003182:	e011      	b.n	80031a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d012      	beq.n	80031b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3310      	adds	r3, #16
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fc4f 	bl	8003a34 <xTaskRemoveFromEventList>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800319c:	f000 fd28 	bl	8003bf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031a0:	7bbb      	ldrb	r3, [r7, #14]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	dce9      	bgt.n	8003184 <prvUnlockQueue+0x60>
 80031b0:	e000      	b.n	80031b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	22ff      	movs	r2, #255	@ 0xff
 80031b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80031bc:	f001 f82e 	bl	800421c <vPortExitCritical>
}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031d0:	f000 fff4 	bl	80041bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031dc:	2301      	movs	r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e001      	b.n	80031e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031e6:	f001 f819 	bl	800421c <vPortExitCritical>

	return xReturn;
 80031ea:	68fb      	ldr	r3, [r7, #12]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031fc:	f000 ffde 	bl	80041bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003208:	429a      	cmp	r2, r3
 800320a:	d102      	bne.n	8003212 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800320c:	2301      	movs	r3, #1
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	e001      	b.n	8003216 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003216:	f001 f801 	bl	800421c <vPortExitCritical>

	return xReturn;
 800321a:	68fb      	ldr	r3, [r7, #12]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08e      	sub	sp, #56	@ 0x38
 8003228:	af04      	add	r7, sp, #16
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10b      	bne.n	8003250 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	623b      	str	r3, [r7, #32]
}
 800324a:	bf00      	nop
 800324c:	bf00      	nop
 800324e:	e7fd      	b.n	800324c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10b      	bne.n	800326e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	61fb      	str	r3, [r7, #28]
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	e7fd      	b.n	800326a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800326e:	23a0      	movs	r3, #160	@ 0xa0
 8003270:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2ba0      	cmp	r3, #160	@ 0xa0
 8003276:	d00b      	beq.n	8003290 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	61bb      	str	r3, [r7, #24]
}
 800328a:	bf00      	nop
 800328c:	bf00      	nop
 800328e:	e7fd      	b.n	800328c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003290:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01e      	beq.n	80032d6 <xTaskCreateStatic+0xb2>
 8003298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800329a:	2b00      	cmp	r3, #0
 800329c:	d01b      	beq.n	80032d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800329e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032b0:	2300      	movs	r3, #0
 80032b2:	9303      	str	r3, [sp, #12]
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	9302      	str	r3, [sp, #8]
 80032b8:	f107 0314 	add.w	r3, r7, #20
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 f851 	bl	8003370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80032d0:	f000 f8ee 	bl	80034b0 <prvAddNewTaskToReadyList>
 80032d4:	e001      	b.n	80032da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032da:	697b      	ldr	r3, [r7, #20]
	}
 80032dc:	4618      	mov	r0, r3
 80032de:	3728      	adds	r7, #40	@ 0x28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08c      	sub	sp, #48	@ 0x30
 80032e8:	af04      	add	r7, sp, #16
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f001 f821 	bl	8004340 <pvPortMalloc>
 80032fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00e      	beq.n	8003324 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003306:	20a0      	movs	r0, #160	@ 0xa0
 8003308:	f001 f81a 	bl	8004340 <pvPortMalloc>
 800330c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	631a      	str	r2, [r3, #48]	@ 0x30
 800331a:	e005      	b.n	8003328 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800331c:	6978      	ldr	r0, [r7, #20]
 800331e:	f001 f8dd 	bl	80044dc <vPortFree>
 8003322:	e001      	b.n	8003328 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d017      	beq.n	800335e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003336:	88fa      	ldrh	r2, [r7, #6]
 8003338:	2300      	movs	r3, #0
 800333a:	9303      	str	r3, [sp, #12]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	9302      	str	r3, [sp, #8]
 8003340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f80f 	bl	8003370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003352:	69f8      	ldr	r0, [r7, #28]
 8003354:	f000 f8ac 	bl	80034b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003358:	2301      	movs	r3, #1
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	e002      	b.n	8003364 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295
 8003362:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003364:	69bb      	ldr	r3, [r7, #24]
	}
 8003366:	4618      	mov	r0, r3
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800337e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003388:	3b01      	subs	r3, #1
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f023 0307 	bic.w	r3, r3, #7
 8003396:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <prvInitialiseNewTask+0x4a>
	__asm volatile
 80033a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	617b      	str	r3, [r7, #20]
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	e7fd      	b.n	80033b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01f      	beq.n	8003400 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	e012      	b.n	80033ec <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	4413      	add	r3, r2
 80033cc:	7819      	ldrb	r1, [r3, #0]
 80033ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	3334      	adds	r3, #52	@ 0x34
 80033d6:	460a      	mov	r2, r1
 80033d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	4413      	add	r3, r2
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d006      	beq.n	80033f4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3301      	adds	r3, #1
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	d9e9      	bls.n	80033c6 <prvInitialiseNewTask+0x56>
 80033f2:	e000      	b.n	80033f6 <prvInitialiseNewTask+0x86>
			{
				break;
 80033f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033fe:	e003      	b.n	8003408 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340a:	2b06      	cmp	r3, #6
 800340c:	d901      	bls.n	8003412 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800340e:	2306      	movs	r3, #6
 8003410:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003414:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003416:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800341c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800341e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003420:	2200      	movs	r2, #0
 8003422:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003426:	3304      	adds	r3, #4
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fab2 	bl	8002992 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800342e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003430:	3318      	adds	r3, #24
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff faad 	bl	8002992 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800343c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800343e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003440:	f1c3 0207 	rsb	r2, r3, #7
 8003444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003446:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800344c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800344e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003450:	2200      	movs	r2, #0
 8003452:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003458:	2200      	movs	r2, #0
 800345a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003460:	334c      	adds	r3, #76	@ 0x4c
 8003462:	224c      	movs	r2, #76	@ 0x4c
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f001 f956 	bl	8004718 <memset>
 800346c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346e:	4a0d      	ldr	r2, [pc, #52]	@ (80034a4 <prvInitialiseNewTask+0x134>)
 8003470:	651a      	str	r2, [r3, #80]	@ 0x50
 8003472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003474:	4a0c      	ldr	r2, [pc, #48]	@ (80034a8 <prvInitialiseNewTask+0x138>)
 8003476:	655a      	str	r2, [r3, #84]	@ 0x54
 8003478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347a:	4a0c      	ldr	r2, [pc, #48]	@ (80034ac <prvInitialiseNewTask+0x13c>)
 800347c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	68f9      	ldr	r1, [r7, #12]
 8003482:	69b8      	ldr	r0, [r7, #24]
 8003484:	f000 fda8 	bl	8003fd8 <pxPortInitialiseStack>
 8003488:	4602      	mov	r2, r0
 800348a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800348e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003498:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800349a:	bf00      	nop
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20001140 	.word	0x20001140
 80034a8:	200011a8 	.word	0x200011a8
 80034ac:	20001210 	.word	0x20001210

080034b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034b8:	f000 fe80 	bl	80041bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003568 <prvAddNewTaskToReadyList+0xb8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	4a29      	ldr	r2, [pc, #164]	@ (8003568 <prvAddNewTaskToReadyList+0xb8>)
 80034c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034c6:	4b29      	ldr	r3, [pc, #164]	@ (800356c <prvAddNewTaskToReadyList+0xbc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d109      	bne.n	80034e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034ce:	4a27      	ldr	r2, [pc, #156]	@ (800356c <prvAddNewTaskToReadyList+0xbc>)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034d4:	4b24      	ldr	r3, [pc, #144]	@ (8003568 <prvAddNewTaskToReadyList+0xb8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d110      	bne.n	80034fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034dc:	f000 fbac 	bl	8003c38 <prvInitialiseTaskLists>
 80034e0:	e00d      	b.n	80034fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034e2:	4b23      	ldr	r3, [pc, #140]	@ (8003570 <prvAddNewTaskToReadyList+0xc0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034ea:	4b20      	ldr	r3, [pc, #128]	@ (800356c <prvAddNewTaskToReadyList+0xbc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d802      	bhi.n	80034fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034f8:	4a1c      	ldr	r2, [pc, #112]	@ (800356c <prvAddNewTaskToReadyList+0xbc>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003574 <prvAddNewTaskToReadyList+0xc4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3301      	adds	r3, #1
 8003504:	4a1b      	ldr	r2, [pc, #108]	@ (8003574 <prvAddNewTaskToReadyList+0xc4>)
 8003506:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	2201      	movs	r2, #1
 800350e:	409a      	lsls	r2, r3
 8003510:	4b19      	ldr	r3, [pc, #100]	@ (8003578 <prvAddNewTaskToReadyList+0xc8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4313      	orrs	r3, r2
 8003516:	4a18      	ldr	r2, [pc, #96]	@ (8003578 <prvAddNewTaskToReadyList+0xc8>)
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4a15      	ldr	r2, [pc, #84]	@ (800357c <prvAddNewTaskToReadyList+0xcc>)
 8003528:	441a      	add	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3304      	adds	r3, #4
 800352e:	4619      	mov	r1, r3
 8003530:	4610      	mov	r0, r2
 8003532:	f7ff fa3a 	bl	80029aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003536:	f000 fe71 	bl	800421c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800353a:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <prvAddNewTaskToReadyList+0xc0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00e      	beq.n	8003560 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003542:	4b0a      	ldr	r3, [pc, #40]	@ (800356c <prvAddNewTaskToReadyList+0xbc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354c:	429a      	cmp	r2, r3
 800354e:	d207      	bcs.n	8003560 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003550:	4b0b      	ldr	r3, [pc, #44]	@ (8003580 <prvAddNewTaskToReadyList+0xd0>)
 8003552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	200004ec 	.word	0x200004ec
 800356c:	200003ec 	.word	0x200003ec
 8003570:	200004f8 	.word	0x200004f8
 8003574:	20000508 	.word	0x20000508
 8003578:	200004f4 	.word	0x200004f4
 800357c:	200003f0 	.word	0x200003f0
 8003580:	e000ed04 	.word	0xe000ed04

08003584 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	@ 0x28
 8003588:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003592:	463a      	mov	r2, r7
 8003594:	1d39      	adds	r1, r7, #4
 8003596:	f107 0308 	add.w	r3, r7, #8
 800359a:	4618      	mov	r0, r3
 800359c:	f7fc fdd8 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035a0:	6839      	ldr	r1, [r7, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	9202      	str	r2, [sp, #8]
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	2300      	movs	r3, #0
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	2300      	movs	r3, #0
 80035b0:	460a      	mov	r2, r1
 80035b2:	4921      	ldr	r1, [pc, #132]	@ (8003638 <vTaskStartScheduler+0xb4>)
 80035b4:	4821      	ldr	r0, [pc, #132]	@ (800363c <vTaskStartScheduler+0xb8>)
 80035b6:	f7ff fe35 	bl	8003224 <xTaskCreateStatic>
 80035ba:	4603      	mov	r3, r0
 80035bc:	4a20      	ldr	r2, [pc, #128]	@ (8003640 <vTaskStartScheduler+0xbc>)
 80035be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003640 <vTaskStartScheduler+0xbc>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035c8:	2301      	movs	r3, #1
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	e001      	b.n	80035d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d11b      	bne.n	8003610 <vTaskStartScheduler+0x8c>
	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	613b      	str	r3, [r7, #16]
}
 80035ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035ec:	4b15      	ldr	r3, [pc, #84]	@ (8003644 <vTaskStartScheduler+0xc0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	334c      	adds	r3, #76	@ 0x4c
 80035f2:	4a15      	ldr	r2, [pc, #84]	@ (8003648 <vTaskStartScheduler+0xc4>)
 80035f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035f6:	4b15      	ldr	r3, [pc, #84]	@ (800364c <vTaskStartScheduler+0xc8>)
 80035f8:	f04f 32ff 	mov.w	r2, #4294967295
 80035fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035fe:	4b14      	ldr	r3, [pc, #80]	@ (8003650 <vTaskStartScheduler+0xcc>)
 8003600:	2201      	movs	r2, #1
 8003602:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003604:	4b13      	ldr	r3, [pc, #76]	@ (8003654 <vTaskStartScheduler+0xd0>)
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800360a:	f000 fd65 	bl	80040d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800360e:	e00f      	b.n	8003630 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d10b      	bne.n	8003630 <vTaskStartScheduler+0xac>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	60fb      	str	r3, [r7, #12]
}
 800362a:	bf00      	nop
 800362c:	bf00      	nop
 800362e:	e7fd      	b.n	800362c <vTaskStartScheduler+0xa8>
}
 8003630:	bf00      	nop
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	08004980 	.word	0x08004980
 800363c:	08003c09 	.word	0x08003c09
 8003640:	20000510 	.word	0x20000510
 8003644:	200003ec 	.word	0x200003ec
 8003648:	20000010 	.word	0x20000010
 800364c:	2000050c 	.word	0x2000050c
 8003650:	200004f8 	.word	0x200004f8
 8003654:	200004f0 	.word	0x200004f0

08003658 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800365c:	4b04      	ldr	r3, [pc, #16]	@ (8003670 <vTaskSuspendAll+0x18>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3301      	adds	r3, #1
 8003662:	4a03      	ldr	r2, [pc, #12]	@ (8003670 <vTaskSuspendAll+0x18>)
 8003664:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003666:	bf00      	nop
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000514 	.word	0x20000514

08003674 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003682:	4b42      	ldr	r3, [pc, #264]	@ (800378c <xTaskResumeAll+0x118>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	603b      	str	r3, [r7, #0]
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	e7fd      	b.n	800369e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036a2:	f000 fd8b 	bl	80041bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036a6:	4b39      	ldr	r3, [pc, #228]	@ (800378c <xTaskResumeAll+0x118>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	4a37      	ldr	r2, [pc, #220]	@ (800378c <xTaskResumeAll+0x118>)
 80036ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036b0:	4b36      	ldr	r3, [pc, #216]	@ (800378c <xTaskResumeAll+0x118>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d161      	bne.n	800377c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036b8:	4b35      	ldr	r3, [pc, #212]	@ (8003790 <xTaskResumeAll+0x11c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d05d      	beq.n	800377c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036c0:	e02e      	b.n	8003720 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036c2:	4b34      	ldr	r3, [pc, #208]	@ (8003794 <xTaskResumeAll+0x120>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3318      	adds	r3, #24
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff f9c6 	bl	8002a60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3304      	adds	r3, #4
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff f9c1 	bl	8002a60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e2:	2201      	movs	r2, #1
 80036e4:	409a      	lsls	r2, r3
 80036e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003798 <xTaskResumeAll+0x124>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003798 <xTaskResumeAll+0x124>)
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4a27      	ldr	r2, [pc, #156]	@ (800379c <xTaskResumeAll+0x128>)
 80036fe:	441a      	add	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3304      	adds	r3, #4
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f7ff f94f 	bl	80029aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003710:	4b23      	ldr	r3, [pc, #140]	@ (80037a0 <xTaskResumeAll+0x12c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800371a:	4b22      	ldr	r3, [pc, #136]	@ (80037a4 <xTaskResumeAll+0x130>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003720:	4b1c      	ldr	r3, [pc, #112]	@ (8003794 <xTaskResumeAll+0x120>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1cc      	bne.n	80036c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800372e:	f000 fb27 	bl	8003d80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003732:	4b1d      	ldr	r3, [pc, #116]	@ (80037a8 <xTaskResumeAll+0x134>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d010      	beq.n	8003760 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800373e:	f000 f837 	bl	80037b0 <xTaskIncrementTick>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003748:	4b16      	ldr	r3, [pc, #88]	@ (80037a4 <xTaskResumeAll+0x130>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3b01      	subs	r3, #1
 8003752:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f1      	bne.n	800373e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800375a:	4b13      	ldr	r3, [pc, #76]	@ (80037a8 <xTaskResumeAll+0x134>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003760:	4b10      	ldr	r3, [pc, #64]	@ (80037a4 <xTaskResumeAll+0x130>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d009      	beq.n	800377c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003768:	2301      	movs	r3, #1
 800376a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800376c:	4b0f      	ldr	r3, [pc, #60]	@ (80037ac <xTaskResumeAll+0x138>)
 800376e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800377c:	f000 fd4e 	bl	800421c <vPortExitCritical>

	return xAlreadyYielded;
 8003780:	68bb      	ldr	r3, [r7, #8]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000514 	.word	0x20000514
 8003790:	200004ec 	.word	0x200004ec
 8003794:	200004ac 	.word	0x200004ac
 8003798:	200004f4 	.word	0x200004f4
 800379c:	200003f0 	.word	0x200003f0
 80037a0:	200003ec 	.word	0x200003ec
 80037a4:	20000500 	.word	0x20000500
 80037a8:	200004fc 	.word	0x200004fc
 80037ac:	e000ed04 	.word	0xe000ed04

080037b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ba:	4b4f      	ldr	r3, [pc, #316]	@ (80038f8 <xTaskIncrementTick+0x148>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f040 808f 	bne.w	80038e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037c4:	4b4d      	ldr	r3, [pc, #308]	@ (80038fc <xTaskIncrementTick+0x14c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3301      	adds	r3, #1
 80037ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037cc:	4a4b      	ldr	r2, [pc, #300]	@ (80038fc <xTaskIncrementTick+0x14c>)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d121      	bne.n	800381c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80037d8:	4b49      	ldr	r3, [pc, #292]	@ (8003900 <xTaskIncrementTick+0x150>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00b      	beq.n	80037fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80037e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e6:	f383 8811 	msr	BASEPRI, r3
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	603b      	str	r3, [r7, #0]
}
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop
 80037f8:	e7fd      	b.n	80037f6 <xTaskIncrementTick+0x46>
 80037fa:	4b41      	ldr	r3, [pc, #260]	@ (8003900 <xTaskIncrementTick+0x150>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	4b40      	ldr	r3, [pc, #256]	@ (8003904 <xTaskIncrementTick+0x154>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a3e      	ldr	r2, [pc, #248]	@ (8003900 <xTaskIncrementTick+0x150>)
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4a3e      	ldr	r2, [pc, #248]	@ (8003904 <xTaskIncrementTick+0x154>)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	4b3e      	ldr	r3, [pc, #248]	@ (8003908 <xTaskIncrementTick+0x158>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3301      	adds	r3, #1
 8003814:	4a3c      	ldr	r2, [pc, #240]	@ (8003908 <xTaskIncrementTick+0x158>)
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	f000 fab2 	bl	8003d80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800381c:	4b3b      	ldr	r3, [pc, #236]	@ (800390c <xTaskIncrementTick+0x15c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	429a      	cmp	r2, r3
 8003824:	d348      	bcc.n	80038b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003826:	4b36      	ldr	r3, [pc, #216]	@ (8003900 <xTaskIncrementTick+0x150>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d104      	bne.n	800383a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003830:	4b36      	ldr	r3, [pc, #216]	@ (800390c <xTaskIncrementTick+0x15c>)
 8003832:	f04f 32ff 	mov.w	r2, #4294967295
 8003836:	601a      	str	r2, [r3, #0]
					break;
 8003838:	e03e      	b.n	80038b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800383a:	4b31      	ldr	r3, [pc, #196]	@ (8003900 <xTaskIncrementTick+0x150>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	429a      	cmp	r2, r3
 8003850:	d203      	bcs.n	800385a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003852:	4a2e      	ldr	r2, [pc, #184]	@ (800390c <xTaskIncrementTick+0x15c>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003858:	e02e      	b.n	80038b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	3304      	adds	r3, #4
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff f8fe 	bl	8002a60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	2b00      	cmp	r3, #0
 800386a:	d004      	beq.n	8003876 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	3318      	adds	r3, #24
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff f8f5 	bl	8002a60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387a:	2201      	movs	r2, #1
 800387c:	409a      	lsls	r2, r3
 800387e:	4b24      	ldr	r3, [pc, #144]	@ (8003910 <xTaskIncrementTick+0x160>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4313      	orrs	r3, r2
 8003884:	4a22      	ldr	r2, [pc, #136]	@ (8003910 <xTaskIncrementTick+0x160>)
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4a1f      	ldr	r2, [pc, #124]	@ (8003914 <xTaskIncrementTick+0x164>)
 8003896:	441a      	add	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	3304      	adds	r3, #4
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f7ff f883 	bl	80029aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003918 <xTaskIncrementTick+0x168>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d3b9      	bcc.n	8003826 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80038b2:	2301      	movs	r3, #1
 80038b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038b6:	e7b6      	b.n	8003826 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038b8:	4b17      	ldr	r3, [pc, #92]	@ (8003918 <xTaskIncrementTick+0x168>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038be:	4915      	ldr	r1, [pc, #84]	@ (8003914 <xTaskIncrementTick+0x164>)
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d901      	bls.n	80038d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80038d0:	2301      	movs	r3, #1
 80038d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80038d4:	4b11      	ldr	r3, [pc, #68]	@ (800391c <xTaskIncrementTick+0x16c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80038dc:	2301      	movs	r3, #1
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	e004      	b.n	80038ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80038e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003920 <xTaskIncrementTick+0x170>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3301      	adds	r3, #1
 80038e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003920 <xTaskIncrementTick+0x170>)
 80038ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80038ec:	697b      	ldr	r3, [r7, #20]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000514 	.word	0x20000514
 80038fc:	200004f0 	.word	0x200004f0
 8003900:	200004a4 	.word	0x200004a4
 8003904:	200004a8 	.word	0x200004a8
 8003908:	20000504 	.word	0x20000504
 800390c:	2000050c 	.word	0x2000050c
 8003910:	200004f4 	.word	0x200004f4
 8003914:	200003f0 	.word	0x200003f0
 8003918:	200003ec 	.word	0x200003ec
 800391c:	20000500 	.word	0x20000500
 8003920:	200004fc 	.word	0x200004fc

08003924 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800392a:	4b29      	ldr	r3, [pc, #164]	@ (80039d0 <vTaskSwitchContext+0xac>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003932:	4b28      	ldr	r3, [pc, #160]	@ (80039d4 <vTaskSwitchContext+0xb0>)
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003938:	e045      	b.n	80039c6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800393a:	4b26      	ldr	r3, [pc, #152]	@ (80039d4 <vTaskSwitchContext+0xb0>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003940:	4b25      	ldr	r3, [pc, #148]	@ (80039d8 <vTaskSwitchContext+0xb4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	fab3 f383 	clz	r3, r3
 800394c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800394e:	7afb      	ldrb	r3, [r7, #11]
 8003950:	f1c3 031f 	rsb	r3, r3, #31
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	4921      	ldr	r1, [pc, #132]	@ (80039dc <vTaskSwitchContext+0xb8>)
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10b      	bne.n	8003982 <vTaskSwitchContext+0x5e>
	__asm volatile
 800396a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	607b      	str	r3, [r7, #4]
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	e7fd      	b.n	800397e <vTaskSwitchContext+0x5a>
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4a13      	ldr	r2, [pc, #76]	@ (80039dc <vTaskSwitchContext+0xb8>)
 800398e:	4413      	add	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	605a      	str	r2, [r3, #4]
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	3308      	adds	r3, #8
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d104      	bne.n	80039b2 <vTaskSwitchContext+0x8e>
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4a09      	ldr	r2, [pc, #36]	@ (80039e0 <vTaskSwitchContext+0xbc>)
 80039ba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039bc:	4b08      	ldr	r3, [pc, #32]	@ (80039e0 <vTaskSwitchContext+0xbc>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	334c      	adds	r3, #76	@ 0x4c
 80039c2:	4a08      	ldr	r2, [pc, #32]	@ (80039e4 <vTaskSwitchContext+0xc0>)
 80039c4:	6013      	str	r3, [r2, #0]
}
 80039c6:	bf00      	nop
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	20000514 	.word	0x20000514
 80039d4:	20000500 	.word	0x20000500
 80039d8:	200004f4 	.word	0x200004f4
 80039dc:	200003f0 	.word	0x200003f0
 80039e0:	200003ec 	.word	0x200003ec
 80039e4:	20000010 	.word	0x20000010

080039e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	60fb      	str	r3, [r7, #12]
}
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
 8003a0e:	e7fd      	b.n	8003a0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a10:	4b07      	ldr	r3, [pc, #28]	@ (8003a30 <vTaskPlaceOnEventList+0x48>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3318      	adds	r3, #24
 8003a16:	4619      	mov	r1, r3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7fe ffe9 	bl	80029f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a1e:	2101      	movs	r1, #1
 8003a20:	6838      	ldr	r0, [r7, #0]
 8003a22:	f000 fa73 	bl	8003f0c <prvAddCurrentTaskToDelayedList>
}
 8003a26:	bf00      	nop
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	200003ec 	.word	0x200003ec

08003a34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10b      	bne.n	8003a62 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	60fb      	str	r3, [r7, #12]
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	e7fd      	b.n	8003a5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	3318      	adds	r3, #24
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe fffa 	bl	8002a60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae4 <xTaskRemoveFromEventList+0xb0>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d11c      	bne.n	8003aae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	3304      	adds	r3, #4
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe fff1 	bl	8002a60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a82:	2201      	movs	r2, #1
 8003a84:	409a      	lsls	r2, r3
 8003a86:	4b18      	ldr	r3, [pc, #96]	@ (8003ae8 <xTaskRemoveFromEventList+0xb4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	4a16      	ldr	r2, [pc, #88]	@ (8003ae8 <xTaskRemoveFromEventList+0xb4>)
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4a13      	ldr	r2, [pc, #76]	@ (8003aec <xTaskRemoveFromEventList+0xb8>)
 8003a9e:	441a      	add	r2, r3
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f7fe ff7f 	bl	80029aa <vListInsertEnd>
 8003aac:	e005      	b.n	8003aba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	3318      	adds	r3, #24
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	480e      	ldr	r0, [pc, #56]	@ (8003af0 <xTaskRemoveFromEventList+0xbc>)
 8003ab6:	f7fe ff78 	bl	80029aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003abe:	4b0d      	ldr	r3, [pc, #52]	@ (8003af4 <xTaskRemoveFromEventList+0xc0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d905      	bls.n	8003ad4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003acc:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <xTaskRemoveFromEventList+0xc4>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	e001      	b.n	8003ad8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ad8:	697b      	ldr	r3, [r7, #20]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000514 	.word	0x20000514
 8003ae8:	200004f4 	.word	0x200004f4
 8003aec:	200003f0 	.word	0x200003f0
 8003af0:	200004ac 	.word	0x200004ac
 8003af4:	200003ec 	.word	0x200003ec
 8003af8:	20000500 	.word	0x20000500

08003afc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b04:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <vTaskInternalSetTimeOutState+0x24>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b0c:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <vTaskInternalSetTimeOutState+0x28>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	605a      	str	r2, [r3, #4]
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000504 	.word	0x20000504
 8003b24:	200004f0 	.word	0x200004f0

08003b28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10b      	bne.n	8003b50 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	613b      	str	r3, [r7, #16]
}
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	e7fd      	b.n	8003b4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10b      	bne.n	8003b6e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	60fb      	str	r3, [r7, #12]
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	e7fd      	b.n	8003b6a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003b6e:	f000 fb25 	bl	80041bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b72:	4b1d      	ldr	r3, [pc, #116]	@ (8003be8 <xTaskCheckForTimeOut+0xc0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8a:	d102      	bne.n	8003b92 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
 8003b90:	e023      	b.n	8003bda <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <xTaskCheckForTimeOut+0xc4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d007      	beq.n	8003bae <xTaskCheckForTimeOut+0x86>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d302      	bcc.n	8003bae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	e015      	b.n	8003bda <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d20b      	bcs.n	8003bd0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	1ad2      	subs	r2, r2, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff ff99 	bl	8003afc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	e004      	b.n	8003bda <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003bda:	f000 fb1f 	bl	800421c <vPortExitCritical>

	return xReturn;
 8003bde:	69fb      	ldr	r3, [r7, #28]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3720      	adds	r7, #32
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	200004f0 	.word	0x200004f0
 8003bec:	20000504 	.word	0x20000504

08003bf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	@ (8003c04 <vTaskMissedYield+0x14>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000500 	.word	0x20000500

08003c08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c10:	f000 f852 	bl	8003cb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c14:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <prvIdleTask+0x28>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d9f9      	bls.n	8003c10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c1c:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <prvIdleTask+0x2c>)
 8003c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c2c:	e7f0      	b.n	8003c10 <prvIdleTask+0x8>
 8003c2e:	bf00      	nop
 8003c30:	200003f0 	.word	0x200003f0
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c3e:	2300      	movs	r3, #0
 8003c40:	607b      	str	r3, [r7, #4]
 8003c42:	e00c      	b.n	8003c5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4a12      	ldr	r2, [pc, #72]	@ (8003c98 <prvInitialiseTaskLists+0x60>)
 8003c50:	4413      	add	r3, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fe7e 	bl	8002954 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b06      	cmp	r3, #6
 8003c62:	d9ef      	bls.n	8003c44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c64:	480d      	ldr	r0, [pc, #52]	@ (8003c9c <prvInitialiseTaskLists+0x64>)
 8003c66:	f7fe fe75 	bl	8002954 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c6a:	480d      	ldr	r0, [pc, #52]	@ (8003ca0 <prvInitialiseTaskLists+0x68>)
 8003c6c:	f7fe fe72 	bl	8002954 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c70:	480c      	ldr	r0, [pc, #48]	@ (8003ca4 <prvInitialiseTaskLists+0x6c>)
 8003c72:	f7fe fe6f 	bl	8002954 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c76:	480c      	ldr	r0, [pc, #48]	@ (8003ca8 <prvInitialiseTaskLists+0x70>)
 8003c78:	f7fe fe6c 	bl	8002954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c7c:	480b      	ldr	r0, [pc, #44]	@ (8003cac <prvInitialiseTaskLists+0x74>)
 8003c7e:	f7fe fe69 	bl	8002954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c82:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb0 <prvInitialiseTaskLists+0x78>)
 8003c84:	4a05      	ldr	r2, [pc, #20]	@ (8003c9c <prvInitialiseTaskLists+0x64>)
 8003c86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c88:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <prvInitialiseTaskLists+0x7c>)
 8003c8a:	4a05      	ldr	r2, [pc, #20]	@ (8003ca0 <prvInitialiseTaskLists+0x68>)
 8003c8c:	601a      	str	r2, [r3, #0]
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	200003f0 	.word	0x200003f0
 8003c9c:	2000047c 	.word	0x2000047c
 8003ca0:	20000490 	.word	0x20000490
 8003ca4:	200004ac 	.word	0x200004ac
 8003ca8:	200004c0 	.word	0x200004c0
 8003cac:	200004d8 	.word	0x200004d8
 8003cb0:	200004a4 	.word	0x200004a4
 8003cb4:	200004a8 	.word	0x200004a8

08003cb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cbe:	e019      	b.n	8003cf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003cc0:	f000 fa7c 	bl	80041bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc4:	4b10      	ldr	r3, [pc, #64]	@ (8003d08 <prvCheckTasksWaitingTermination+0x50>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fe fec5 	bl	8002a60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d0c <prvCheckTasksWaitingTermination+0x54>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8003d0c <prvCheckTasksWaitingTermination+0x54>)
 8003cde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d10 <prvCheckTasksWaitingTermination+0x58>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8003d10 <prvCheckTasksWaitingTermination+0x58>)
 8003ce8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003cea:	f000 fa97 	bl	800421c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f810 	bl	8003d14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cf4:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <prvCheckTasksWaitingTermination+0x58>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e1      	bne.n	8003cc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	200004c0 	.word	0x200004c0
 8003d0c:	200004ec 	.word	0x200004ec
 8003d10:	200004d4 	.word	0x200004d4

08003d14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	334c      	adds	r3, #76	@ 0x4c
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fd01 	bl	8004728 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d108      	bne.n	8003d42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fbd1 	bl	80044dc <vPortFree>
				vPortFree( pxTCB );
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fbce 	bl	80044dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d40:	e019      	b.n	8003d76 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d103      	bne.n	8003d54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fbc5 	bl	80044dc <vPortFree>
	}
 8003d52:	e010      	b.n	8003d76 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d00b      	beq.n	8003d76 <prvDeleteTCB+0x62>
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	60fb      	str	r3, [r7, #12]
}
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	e7fd      	b.n	8003d72 <prvDeleteTCB+0x5e>
	}
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d86:	4b0c      	ldr	r3, [pc, #48]	@ (8003db8 <prvResetNextTaskUnblockTime+0x38>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d104      	bne.n	8003d9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d90:	4b0a      	ldr	r3, [pc, #40]	@ (8003dbc <prvResetNextTaskUnblockTime+0x3c>)
 8003d92:	f04f 32ff 	mov.w	r2, #4294967295
 8003d96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d98:	e008      	b.n	8003dac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d9a:	4b07      	ldr	r3, [pc, #28]	@ (8003db8 <prvResetNextTaskUnblockTime+0x38>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4a04      	ldr	r2, [pc, #16]	@ (8003dbc <prvResetNextTaskUnblockTime+0x3c>)
 8003daa:	6013      	str	r3, [r2, #0]
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	200004a4 	.word	0x200004a4
 8003dbc:	2000050c 	.word	0x2000050c

08003dc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003df4 <xTaskGetSchedulerState+0x34>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	607b      	str	r3, [r7, #4]
 8003dd2:	e008      	b.n	8003de6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dd4:	4b08      	ldr	r3, [pc, #32]	@ (8003df8 <xTaskGetSchedulerState+0x38>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	607b      	str	r3, [r7, #4]
 8003de0:	e001      	b.n	8003de6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003de2:	2300      	movs	r3, #0
 8003de4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003de6:	687b      	ldr	r3, [r7, #4]
	}
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	200004f8 	.word	0x200004f8
 8003df8:	20000514 	.word	0x20000514

08003dfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d070      	beq.n	8003ef4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e12:	4b3b      	ldr	r3, [pc, #236]	@ (8003f00 <xTaskPriorityDisinherit+0x104>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d00b      	beq.n	8003e34 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	60fb      	str	r3, [r7, #12]
}
 8003e2e:	bf00      	nop
 8003e30:	bf00      	nop
 8003e32:	e7fd      	b.n	8003e30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	60bb      	str	r3, [r7, #8]
}
 8003e4e:	bf00      	nop
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e58:	1e5a      	subs	r2, r3, #1
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d044      	beq.n	8003ef4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d140      	bne.n	8003ef4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fdf2 	bl	8002a60 <uxListRemove>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d115      	bne.n	8003eae <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e86:	491f      	ldr	r1, [pc, #124]	@ (8003f04 <xTaskPriorityDisinherit+0x108>)
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <xTaskPriorityDisinherit+0xb2>
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43da      	mvns	r2, r3
 8003ea4:	4b18      	ldr	r3, [pc, #96]	@ (8003f08 <xTaskPriorityDisinherit+0x10c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	4a17      	ldr	r2, [pc, #92]	@ (8003f08 <xTaskPriorityDisinherit+0x10c>)
 8003eac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eba:	f1c3 0207 	rsb	r2, r3, #7
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	409a      	lsls	r2, r3
 8003eca:	4b0f      	ldr	r3, [pc, #60]	@ (8003f08 <xTaskPriorityDisinherit+0x10c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8003f08 <xTaskPriorityDisinherit+0x10c>)
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4a08      	ldr	r2, [pc, #32]	@ (8003f04 <xTaskPriorityDisinherit+0x108>)
 8003ee2:	441a      	add	r2, r3
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	f7fe fd5d 	bl	80029aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ef4:	697b      	ldr	r3, [r7, #20]
	}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	200003ec 	.word	0x200003ec
 8003f04:	200003f0 	.word	0x200003f0
 8003f08:	200004f4 	.word	0x200004f4

08003f0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f16:	4b29      	ldr	r3, [pc, #164]	@ (8003fbc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f1c:	4b28      	ldr	r3, [pc, #160]	@ (8003fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe fd9c 	bl	8002a60 <uxListRemove>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10b      	bne.n	8003f46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f2e:	4b24      	ldr	r3, [pc, #144]	@ (8003fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f34:	2201      	movs	r2, #1
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	4b21      	ldr	r3, [pc, #132]	@ (8003fc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4013      	ands	r3, r2
 8003f42:	4a20      	ldr	r2, [pc, #128]	@ (8003fc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4c:	d10a      	bne.n	8003f64 <prvAddCurrentTaskToDelayedList+0x58>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f54:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	481a      	ldr	r0, [pc, #104]	@ (8003fc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f5e:	f7fe fd24 	bl	80029aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f62:	e026      	b.n	8003fb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4413      	add	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f6c:	4b14      	ldr	r3, [pc, #80]	@ (8003fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d209      	bcs.n	8003f90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f7c:	4b13      	ldr	r3, [pc, #76]	@ (8003fcc <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3304      	adds	r3, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	4610      	mov	r0, r2
 8003f8a:	f7fe fd31 	bl	80029f0 <vListInsert>
}
 8003f8e:	e010      	b.n	8003fb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f90:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	f7fe fd27 	bl	80029f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d202      	bcs.n	8003fb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003fac:	4a09      	ldr	r2, [pc, #36]	@ (8003fd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6013      	str	r3, [r2, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	200004f0 	.word	0x200004f0
 8003fc0:	200003ec 	.word	0x200003ec
 8003fc4:	200004f4 	.word	0x200004f4
 8003fc8:	200004d8 	.word	0x200004d8
 8003fcc:	200004a8 	.word	0x200004a8
 8003fd0:	200004a4 	.word	0x200004a4
 8003fd4:	2000050c 	.word	0x2000050c

08003fd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3b04      	subs	r3, #4
 8003fe8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3b04      	subs	r3, #4
 8003ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f023 0201 	bic.w	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3b04      	subs	r3, #4
 8004006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004008:	4a08      	ldr	r2, [pc, #32]	@ (800402c <pxPortInitialiseStack+0x54>)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3b14      	subs	r3, #20
 8004012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3b20      	subs	r3, #32
 800401e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004020:	68fb      	ldr	r3, [r7, #12]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr
 800402c:	08004031 	.word	0x08004031

08004030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004036:	2300      	movs	r3, #0
 8004038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800403a:	4b12      	ldr	r3, [pc, #72]	@ (8004084 <prvTaskExitError+0x54>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004042:	d00b      	beq.n	800405c <prvTaskExitError+0x2c>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	60fb      	str	r3, [r7, #12]
}
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <prvTaskExitError+0x28>
	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	60bb      	str	r3, [r7, #8]
}
 800406e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004070:	bf00      	nop
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0fc      	beq.n	8004072 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr
 8004084:	2000000c 	.word	0x2000000c
	...

08004090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004090:	4b07      	ldr	r3, [pc, #28]	@ (80040b0 <pxCurrentTCBConst2>)
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	6808      	ldr	r0, [r1, #0]
 8004096:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800409a:	f380 8809 	msr	PSP, r0
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f380 8811 	msr	BASEPRI, r0
 80040aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80040ae:	4770      	bx	lr

080040b0 <pxCurrentTCBConst2>:
 80040b0:	200003ec 	.word	0x200003ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop

080040b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80040b8:	4806      	ldr	r0, [pc, #24]	@ (80040d4 <prvPortStartFirstTask+0x1c>)
 80040ba:	6800      	ldr	r0, [r0, #0]
 80040bc:	6800      	ldr	r0, [r0, #0]
 80040be:	f380 8808 	msr	MSP, r0
 80040c2:	b662      	cpsie	i
 80040c4:	b661      	cpsie	f
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	df00      	svc	0
 80040d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040d2:	bf00      	nop
 80040d4:	e000ed08 	.word	0xe000ed08

080040d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040de:	4b32      	ldr	r3, [pc, #200]	@ (80041a8 <xPortStartScheduler+0xd0>)
 80040e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	22ff      	movs	r2, #255	@ 0xff
 80040ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004100:	b2da      	uxtb	r2, r3
 8004102:	4b2a      	ldr	r3, [pc, #168]	@ (80041ac <xPortStartScheduler+0xd4>)
 8004104:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004106:	4b2a      	ldr	r3, [pc, #168]	@ (80041b0 <xPortStartScheduler+0xd8>)
 8004108:	2207      	movs	r2, #7
 800410a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800410c:	e009      	b.n	8004122 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800410e:	4b28      	ldr	r3, [pc, #160]	@ (80041b0 <xPortStartScheduler+0xd8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3b01      	subs	r3, #1
 8004114:	4a26      	ldr	r2, [pc, #152]	@ (80041b0 <xPortStartScheduler+0xd8>)
 8004116:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	b2db      	uxtb	r3, r3
 8004120:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412a:	2b80      	cmp	r3, #128	@ 0x80
 800412c:	d0ef      	beq.n	800410e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800412e:	4b20      	ldr	r3, [pc, #128]	@ (80041b0 <xPortStartScheduler+0xd8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f1c3 0307 	rsb	r3, r3, #7
 8004136:	2b04      	cmp	r3, #4
 8004138:	d00b      	beq.n	8004152 <xPortStartScheduler+0x7a>
	__asm volatile
 800413a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	60bb      	str	r3, [r7, #8]
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	e7fd      	b.n	800414e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004152:	4b17      	ldr	r3, [pc, #92]	@ (80041b0 <xPortStartScheduler+0xd8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4a15      	ldr	r2, [pc, #84]	@ (80041b0 <xPortStartScheduler+0xd8>)
 800415a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800415c:	4b14      	ldr	r3, [pc, #80]	@ (80041b0 <xPortStartScheduler+0xd8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004164:	4a12      	ldr	r2, [pc, #72]	@ (80041b0 <xPortStartScheduler+0xd8>)
 8004166:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	b2da      	uxtb	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004170:	4b10      	ldr	r3, [pc, #64]	@ (80041b4 <xPortStartScheduler+0xdc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a0f      	ldr	r2, [pc, #60]	@ (80041b4 <xPortStartScheduler+0xdc>)
 8004176:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800417a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800417c:	4b0d      	ldr	r3, [pc, #52]	@ (80041b4 <xPortStartScheduler+0xdc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a0c      	ldr	r2, [pc, #48]	@ (80041b4 <xPortStartScheduler+0xdc>)
 8004182:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004186:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004188:	f000 f8b8 	bl	80042fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800418c:	4b0a      	ldr	r3, [pc, #40]	@ (80041b8 <xPortStartScheduler+0xe0>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004192:	f7ff ff91 	bl	80040b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004196:	f7ff fbc5 	bl	8003924 <vTaskSwitchContext>
	prvTaskExitError();
 800419a:	f7ff ff49 	bl	8004030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	e000e400 	.word	0xe000e400
 80041ac:	20000518 	.word	0x20000518
 80041b0:	2000051c 	.word	0x2000051c
 80041b4:	e000ed20 	.word	0xe000ed20
 80041b8:	2000000c 	.word	0x2000000c

080041bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	607b      	str	r3, [r7, #4]
}
 80041d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004214 <vPortEnterCritical+0x58>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3301      	adds	r3, #1
 80041dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004214 <vPortEnterCritical+0x58>)
 80041de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004214 <vPortEnterCritical+0x58>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d110      	bne.n	800420a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004218 <vPortEnterCritical+0x5c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <vPortEnterCritical+0x4e>
	__asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	603b      	str	r3, [r7, #0]
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	e7fd      	b.n	8004206 <vPortEnterCritical+0x4a>
	}
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr
 8004214:	2000000c 	.word	0x2000000c
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004222:	4b12      	ldr	r3, [pc, #72]	@ (800426c <vPortExitCritical+0x50>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10b      	bne.n	8004242 <vPortExitCritical+0x26>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	607b      	str	r3, [r7, #4]
}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	e7fd      	b.n	800423e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004242:	4b0a      	ldr	r3, [pc, #40]	@ (800426c <vPortExitCritical+0x50>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3b01      	subs	r3, #1
 8004248:	4a08      	ldr	r2, [pc, #32]	@ (800426c <vPortExitCritical+0x50>)
 800424a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800424c:	4b07      	ldr	r3, [pc, #28]	@ (800426c <vPortExitCritical+0x50>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d105      	bne.n	8004260 <vPortExitCritical+0x44>
 8004254:	2300      	movs	r3, #0
 8004256:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800425e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	2000000c 	.word	0x2000000c

08004270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004270:	f3ef 8009 	mrs	r0, PSP
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <pxCurrentTCBConst>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004280:	6010      	str	r0, [r2, #0]
 8004282:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004286:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800428a:	f380 8811 	msr	BASEPRI, r0
 800428e:	f7ff fb49 	bl	8003924 <vTaskSwitchContext>
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f380 8811 	msr	BASEPRI, r0
 800429a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	6808      	ldr	r0, [r1, #0]
 80042a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042a6:	f380 8809 	msr	PSP, r0
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	4770      	bx	lr

080042b0 <pxCurrentTCBConst>:
 80042b0:	200003ec 	.word	0x200003ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop

080042b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	607b      	str	r3, [r7, #4]
}
 80042d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80042d2:	f7ff fa6d 	bl	80037b0 <xTaskIncrementTick>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042dc:	4b06      	ldr	r3, [pc, #24]	@ (80042f8 <SysTick_Handler+0x40>)
 80042de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	2300      	movs	r3, #0
 80042e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f383 8811 	msr	BASEPRI, r3
}
 80042ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	e000ed04 	.word	0xe000ed04

080042fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004300:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <vPortSetupTimerInterrupt+0x30>)
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004306:	4b0a      	ldr	r3, [pc, #40]	@ (8004330 <vPortSetupTimerInterrupt+0x34>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800430c:	4b09      	ldr	r3, [pc, #36]	@ (8004334 <vPortSetupTimerInterrupt+0x38>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a09      	ldr	r2, [pc, #36]	@ (8004338 <vPortSetupTimerInterrupt+0x3c>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	099b      	lsrs	r3, r3, #6
 8004318:	4a08      	ldr	r2, [pc, #32]	@ (800433c <vPortSetupTimerInterrupt+0x40>)
 800431a:	3b01      	subs	r3, #1
 800431c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800431e:	4b03      	ldr	r3, [pc, #12]	@ (800432c <vPortSetupTimerInterrupt+0x30>)
 8004320:	2207      	movs	r2, #7
 8004322:	601a      	str	r2, [r3, #0]
}
 8004324:	bf00      	nop
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr
 800432c:	e000e010 	.word	0xe000e010
 8004330:	e000e018 	.word	0xe000e018
 8004334:	20000000 	.word	0x20000000
 8004338:	10624dd3 	.word	0x10624dd3
 800433c:	e000e014 	.word	0xe000e014

08004340 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	@ 0x28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004348:	2300      	movs	r3, #0
 800434a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800434c:	f7ff f984 	bl	8003658 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004350:	4b5c      	ldr	r3, [pc, #368]	@ (80044c4 <pvPortMalloc+0x184>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004358:	f000 f924 	bl	80045a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800435c:	4b5a      	ldr	r3, [pc, #360]	@ (80044c8 <pvPortMalloc+0x188>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4013      	ands	r3, r2
 8004364:	2b00      	cmp	r3, #0
 8004366:	f040 8095 	bne.w	8004494 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01e      	beq.n	80043ae <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004370:	2208      	movs	r2, #8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4413      	add	r3, r2
 8004376:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	2b00      	cmp	r3, #0
 8004380:	d015      	beq.n	80043ae <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f023 0307 	bic.w	r3, r3, #7
 8004388:	3308      	adds	r3, #8
 800438a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <pvPortMalloc+0x6e>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	617b      	str	r3, [r7, #20]
}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	e7fd      	b.n	80043aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d06f      	beq.n	8004494 <pvPortMalloc+0x154>
 80043b4:	4b45      	ldr	r3, [pc, #276]	@ (80044cc <pvPortMalloc+0x18c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d86a      	bhi.n	8004494 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043be:	4b44      	ldr	r3, [pc, #272]	@ (80044d0 <pvPortMalloc+0x190>)
 80043c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043c2:	4b43      	ldr	r3, [pc, #268]	@ (80044d0 <pvPortMalloc+0x190>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043c8:	e004      	b.n	80043d4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d903      	bls.n	80043e6 <pvPortMalloc+0xa6>
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f1      	bne.n	80043ca <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043e6:	4b37      	ldr	r3, [pc, #220]	@ (80044c4 <pvPortMalloc+0x184>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d051      	beq.n	8004494 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2208      	movs	r2, #8
 80043f6:	4413      	add	r3, r2
 80043f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	1ad2      	subs	r2, r2, r3
 800440a:	2308      	movs	r3, #8
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	429a      	cmp	r2, r3
 8004410:	d920      	bls.n	8004454 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4413      	add	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00b      	beq.n	800443c <pvPortMalloc+0xfc>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	613b      	str	r3, [r7, #16]
}
 8004436:	bf00      	nop
 8004438:	bf00      	nop
 800443a:	e7fd      	b.n	8004438 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	1ad2      	subs	r2, r2, r3
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800444e:	69b8      	ldr	r0, [r7, #24]
 8004450:	f000 f90a 	bl	8004668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004454:	4b1d      	ldr	r3, [pc, #116]	@ (80044cc <pvPortMalloc+0x18c>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	4a1b      	ldr	r2, [pc, #108]	@ (80044cc <pvPortMalloc+0x18c>)
 8004460:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004462:	4b1a      	ldr	r3, [pc, #104]	@ (80044cc <pvPortMalloc+0x18c>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b1b      	ldr	r3, [pc, #108]	@ (80044d4 <pvPortMalloc+0x194>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d203      	bcs.n	8004476 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800446e:	4b17      	ldr	r3, [pc, #92]	@ (80044cc <pvPortMalloc+0x18c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a18      	ldr	r2, [pc, #96]	@ (80044d4 <pvPortMalloc+0x194>)
 8004474:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	4b13      	ldr	r3, [pc, #76]	@ (80044c8 <pvPortMalloc+0x188>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	431a      	orrs	r2, r3
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800448a:	4b13      	ldr	r3, [pc, #76]	@ (80044d8 <pvPortMalloc+0x198>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3301      	adds	r3, #1
 8004490:	4a11      	ldr	r2, [pc, #68]	@ (80044d8 <pvPortMalloc+0x198>)
 8004492:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004494:	f7ff f8ee 	bl	8003674 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00b      	beq.n	80044ba <pvPortMalloc+0x17a>
	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	60fb      	str	r3, [r7, #12]
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
 80044b8:	e7fd      	b.n	80044b6 <pvPortMalloc+0x176>
	return pvReturn;
 80044ba:	69fb      	ldr	r3, [r7, #28]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3728      	adds	r7, #40	@ 0x28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20001128 	.word	0x20001128
 80044c8:	2000113c 	.word	0x2000113c
 80044cc:	2000112c 	.word	0x2000112c
 80044d0:	20001120 	.word	0x20001120
 80044d4:	20001130 	.word	0x20001130
 80044d8:	20001134 	.word	0x20001134

080044dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d04f      	beq.n	800458e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044ee:	2308      	movs	r3, #8
 80044f0:	425b      	negs	r3, r3
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4413      	add	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	4b25      	ldr	r3, [pc, #148]	@ (8004598 <vPortFree+0xbc>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4013      	ands	r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <vPortFree+0x46>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	60fb      	str	r3, [r7, #12]
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	e7fd      	b.n	800451e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <vPortFree+0x66>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	60bb      	str	r3, [r7, #8]
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	e7fd      	b.n	800453e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	4b14      	ldr	r3, [pc, #80]	@ (8004598 <vPortFree+0xbc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01e      	beq.n	800458e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d11a      	bne.n	800458e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	4b0e      	ldr	r3, [pc, #56]	@ (8004598 <vPortFree+0xbc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	43db      	mvns	r3, r3
 8004562:	401a      	ands	r2, r3
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004568:	f7ff f876 	bl	8003658 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	4b0a      	ldr	r3, [pc, #40]	@ (800459c <vPortFree+0xc0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4413      	add	r3, r2
 8004576:	4a09      	ldr	r2, [pc, #36]	@ (800459c <vPortFree+0xc0>)
 8004578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800457a:	6938      	ldr	r0, [r7, #16]
 800457c:	f000 f874 	bl	8004668 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004580:	4b07      	ldr	r3, [pc, #28]	@ (80045a0 <vPortFree+0xc4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3301      	adds	r3, #1
 8004586:	4a06      	ldr	r2, [pc, #24]	@ (80045a0 <vPortFree+0xc4>)
 8004588:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800458a:	f7ff f873 	bl	8003674 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800458e:	bf00      	nop
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	2000113c 	.word	0x2000113c
 800459c:	2000112c 	.word	0x2000112c
 80045a0:	20001138 	.word	0x20001138

080045a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80045ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045b0:	4b27      	ldr	r3, [pc, #156]	@ (8004650 <prvHeapInit+0xac>)
 80045b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00c      	beq.n	80045d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3307      	adds	r3, #7
 80045c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0307 	bic.w	r3, r3, #7
 80045ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004650 <prvHeapInit+0xac>)
 80045d4:	4413      	add	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004654 <prvHeapInit+0xb0>)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004654 <prvHeapInit+0xb0>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	4413      	add	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045f0:	2208      	movs	r2, #8
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0307 	bic.w	r3, r3, #7
 80045fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4a15      	ldr	r2, [pc, #84]	@ (8004658 <prvHeapInit+0xb4>)
 8004604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004606:	4b14      	ldr	r3, [pc, #80]	@ (8004658 <prvHeapInit+0xb4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2200      	movs	r2, #0
 800460c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800460e:	4b12      	ldr	r3, [pc, #72]	@ (8004658 <prvHeapInit+0xb4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	1ad2      	subs	r2, r2, r3
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004624:	4b0c      	ldr	r3, [pc, #48]	@ (8004658 <prvHeapInit+0xb4>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4a0a      	ldr	r2, [pc, #40]	@ (800465c <prvHeapInit+0xb8>)
 8004632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	4a09      	ldr	r2, [pc, #36]	@ (8004660 <prvHeapInit+0xbc>)
 800463a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800463c:	4b09      	ldr	r3, [pc, #36]	@ (8004664 <prvHeapInit+0xc0>)
 800463e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	20000520 	.word	0x20000520
 8004654:	20001120 	.word	0x20001120
 8004658:	20001128 	.word	0x20001128
 800465c:	20001130 	.word	0x20001130
 8004660:	2000112c 	.word	0x2000112c
 8004664:	2000113c 	.word	0x2000113c

08004668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004670:	4b27      	ldr	r3, [pc, #156]	@ (8004710 <prvInsertBlockIntoFreeList+0xa8>)
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e002      	b.n	800467c <prvInsertBlockIntoFreeList+0x14>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	429a      	cmp	r2, r3
 8004684:	d8f7      	bhi.n	8004676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4413      	add	r3, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d108      	bne.n	80046aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	441a      	add	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	441a      	add	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d118      	bne.n	80046f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4b14      	ldr	r3, [pc, #80]	@ (8004714 <prvInsertBlockIntoFreeList+0xac>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d00d      	beq.n	80046e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	441a      	add	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	e008      	b.n	80046f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <prvInsertBlockIntoFreeList+0xac>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	e003      	b.n	80046f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d002      	beq.n	8004706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr
 8004710:	20001120 	.word	0x20001120
 8004714:	20001128 	.word	0x20001128

08004718 <memset>:
 8004718:	4603      	mov	r3, r0
 800471a:	4402      	add	r2, r0
 800471c:	4293      	cmp	r3, r2
 800471e:	d100      	bne.n	8004722 <memset+0xa>
 8004720:	4770      	bx	lr
 8004722:	f803 1b01 	strb.w	r1, [r3], #1
 8004726:	e7f9      	b.n	800471c <memset+0x4>

08004728 <_reclaim_reent>:
 8004728:	4b2d      	ldr	r3, [pc, #180]	@ (80047e0 <_reclaim_reent+0xb8>)
 800472a:	b570      	push	{r4, r5, r6, lr}
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4604      	mov	r4, r0
 8004730:	4283      	cmp	r3, r0
 8004732:	d053      	beq.n	80047dc <_reclaim_reent+0xb4>
 8004734:	69c3      	ldr	r3, [r0, #28]
 8004736:	b31b      	cbz	r3, 8004780 <_reclaim_reent+0x58>
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	b163      	cbz	r3, 8004756 <_reclaim_reent+0x2e>
 800473c:	2500      	movs	r5, #0
 800473e:	69e3      	ldr	r3, [r4, #28]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	5959      	ldr	r1, [r3, r5]
 8004744:	b9b1      	cbnz	r1, 8004774 <_reclaim_reent+0x4c>
 8004746:	3504      	adds	r5, #4
 8004748:	2d80      	cmp	r5, #128	@ 0x80
 800474a:	d1f8      	bne.n	800473e <_reclaim_reent+0x16>
 800474c:	69e3      	ldr	r3, [r4, #28]
 800474e:	4620      	mov	r0, r4
 8004750:	68d9      	ldr	r1, [r3, #12]
 8004752:	f000 f87b 	bl	800484c <_free_r>
 8004756:	69e3      	ldr	r3, [r4, #28]
 8004758:	6819      	ldr	r1, [r3, #0]
 800475a:	b111      	cbz	r1, 8004762 <_reclaim_reent+0x3a>
 800475c:	4620      	mov	r0, r4
 800475e:	f000 f875 	bl	800484c <_free_r>
 8004762:	69e3      	ldr	r3, [r4, #28]
 8004764:	689d      	ldr	r5, [r3, #8]
 8004766:	b15d      	cbz	r5, 8004780 <_reclaim_reent+0x58>
 8004768:	4629      	mov	r1, r5
 800476a:	4620      	mov	r0, r4
 800476c:	682d      	ldr	r5, [r5, #0]
 800476e:	f000 f86d 	bl	800484c <_free_r>
 8004772:	e7f8      	b.n	8004766 <_reclaim_reent+0x3e>
 8004774:	680e      	ldr	r6, [r1, #0]
 8004776:	4620      	mov	r0, r4
 8004778:	f000 f868 	bl	800484c <_free_r>
 800477c:	4631      	mov	r1, r6
 800477e:	e7e1      	b.n	8004744 <_reclaim_reent+0x1c>
 8004780:	6961      	ldr	r1, [r4, #20]
 8004782:	b111      	cbz	r1, 800478a <_reclaim_reent+0x62>
 8004784:	4620      	mov	r0, r4
 8004786:	f000 f861 	bl	800484c <_free_r>
 800478a:	69e1      	ldr	r1, [r4, #28]
 800478c:	b111      	cbz	r1, 8004794 <_reclaim_reent+0x6c>
 800478e:	4620      	mov	r0, r4
 8004790:	f000 f85c 	bl	800484c <_free_r>
 8004794:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004796:	b111      	cbz	r1, 800479e <_reclaim_reent+0x76>
 8004798:	4620      	mov	r0, r4
 800479a:	f000 f857 	bl	800484c <_free_r>
 800479e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047a0:	b111      	cbz	r1, 80047a8 <_reclaim_reent+0x80>
 80047a2:	4620      	mov	r0, r4
 80047a4:	f000 f852 	bl	800484c <_free_r>
 80047a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80047aa:	b111      	cbz	r1, 80047b2 <_reclaim_reent+0x8a>
 80047ac:	4620      	mov	r0, r4
 80047ae:	f000 f84d 	bl	800484c <_free_r>
 80047b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80047b4:	b111      	cbz	r1, 80047bc <_reclaim_reent+0x94>
 80047b6:	4620      	mov	r0, r4
 80047b8:	f000 f848 	bl	800484c <_free_r>
 80047bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80047be:	b111      	cbz	r1, 80047c6 <_reclaim_reent+0x9e>
 80047c0:	4620      	mov	r0, r4
 80047c2:	f000 f843 	bl	800484c <_free_r>
 80047c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80047c8:	b111      	cbz	r1, 80047d0 <_reclaim_reent+0xa8>
 80047ca:	4620      	mov	r0, r4
 80047cc:	f000 f83e 	bl	800484c <_free_r>
 80047d0:	6a23      	ldr	r3, [r4, #32]
 80047d2:	b11b      	cbz	r3, 80047dc <_reclaim_reent+0xb4>
 80047d4:	4620      	mov	r0, r4
 80047d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80047da:	4718      	bx	r3
 80047dc:	bd70      	pop	{r4, r5, r6, pc}
 80047de:	bf00      	nop
 80047e0:	20000010 	.word	0x20000010

080047e4 <__libc_init_array>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	2600      	movs	r6, #0
 80047e8:	4d0c      	ldr	r5, [pc, #48]	@ (800481c <__libc_init_array+0x38>)
 80047ea:	4c0d      	ldr	r4, [pc, #52]	@ (8004820 <__libc_init_array+0x3c>)
 80047ec:	1b64      	subs	r4, r4, r5
 80047ee:	10a4      	asrs	r4, r4, #2
 80047f0:	42a6      	cmp	r6, r4
 80047f2:	d109      	bne.n	8004808 <__libc_init_array+0x24>
 80047f4:	f000 f87e 	bl	80048f4 <_init>
 80047f8:	2600      	movs	r6, #0
 80047fa:	4d0a      	ldr	r5, [pc, #40]	@ (8004824 <__libc_init_array+0x40>)
 80047fc:	4c0a      	ldr	r4, [pc, #40]	@ (8004828 <__libc_init_array+0x44>)
 80047fe:	1b64      	subs	r4, r4, r5
 8004800:	10a4      	asrs	r4, r4, #2
 8004802:	42a6      	cmp	r6, r4
 8004804:	d105      	bne.n	8004812 <__libc_init_array+0x2e>
 8004806:	bd70      	pop	{r4, r5, r6, pc}
 8004808:	f855 3b04 	ldr.w	r3, [r5], #4
 800480c:	4798      	blx	r3
 800480e:	3601      	adds	r6, #1
 8004810:	e7ee      	b.n	80047f0 <__libc_init_array+0xc>
 8004812:	f855 3b04 	ldr.w	r3, [r5], #4
 8004816:	4798      	blx	r3
 8004818:	3601      	adds	r6, #1
 800481a:	e7f2      	b.n	8004802 <__libc_init_array+0x1e>
 800481c:	080049b4 	.word	0x080049b4
 8004820:	080049b4 	.word	0x080049b4
 8004824:	080049b4 	.word	0x080049b4
 8004828:	080049b8 	.word	0x080049b8

0800482c <__retarget_lock_acquire_recursive>:
 800482c:	4770      	bx	lr

0800482e <__retarget_lock_release_recursive>:
 800482e:	4770      	bx	lr

08004830 <memcpy>:
 8004830:	440a      	add	r2, r1
 8004832:	4291      	cmp	r1, r2
 8004834:	f100 33ff 	add.w	r3, r0, #4294967295
 8004838:	d100      	bne.n	800483c <memcpy+0xc>
 800483a:	4770      	bx	lr
 800483c:	b510      	push	{r4, lr}
 800483e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004842:	4291      	cmp	r1, r2
 8004844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004848:	d1f9      	bne.n	800483e <memcpy+0xe>
 800484a:	bd10      	pop	{r4, pc}

0800484c <_free_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4605      	mov	r5, r0
 8004850:	2900      	cmp	r1, #0
 8004852:	d040      	beq.n	80048d6 <_free_r+0x8a>
 8004854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004858:	1f0c      	subs	r4, r1, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	bfb8      	it	lt
 800485e:	18e4      	addlt	r4, r4, r3
 8004860:	f000 f83c 	bl	80048dc <__malloc_lock>
 8004864:	4a1c      	ldr	r2, [pc, #112]	@ (80048d8 <_free_r+0x8c>)
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	b933      	cbnz	r3, 8004878 <_free_r+0x2c>
 800486a:	6063      	str	r3, [r4, #4]
 800486c:	6014      	str	r4, [r2, #0]
 800486e:	4628      	mov	r0, r5
 8004870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004874:	f000 b838 	b.w	80048e8 <__malloc_unlock>
 8004878:	42a3      	cmp	r3, r4
 800487a:	d908      	bls.n	800488e <_free_r+0x42>
 800487c:	6820      	ldr	r0, [r4, #0]
 800487e:	1821      	adds	r1, r4, r0
 8004880:	428b      	cmp	r3, r1
 8004882:	bf01      	itttt	eq
 8004884:	6819      	ldreq	r1, [r3, #0]
 8004886:	685b      	ldreq	r3, [r3, #4]
 8004888:	1809      	addeq	r1, r1, r0
 800488a:	6021      	streq	r1, [r4, #0]
 800488c:	e7ed      	b.n	800486a <_free_r+0x1e>
 800488e:	461a      	mov	r2, r3
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	b10b      	cbz	r3, 8004898 <_free_r+0x4c>
 8004894:	42a3      	cmp	r3, r4
 8004896:	d9fa      	bls.n	800488e <_free_r+0x42>
 8004898:	6811      	ldr	r1, [r2, #0]
 800489a:	1850      	adds	r0, r2, r1
 800489c:	42a0      	cmp	r0, r4
 800489e:	d10b      	bne.n	80048b8 <_free_r+0x6c>
 80048a0:	6820      	ldr	r0, [r4, #0]
 80048a2:	4401      	add	r1, r0
 80048a4:	1850      	adds	r0, r2, r1
 80048a6:	4283      	cmp	r3, r0
 80048a8:	6011      	str	r1, [r2, #0]
 80048aa:	d1e0      	bne.n	800486e <_free_r+0x22>
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	4408      	add	r0, r1
 80048b2:	6010      	str	r0, [r2, #0]
 80048b4:	6053      	str	r3, [r2, #4]
 80048b6:	e7da      	b.n	800486e <_free_r+0x22>
 80048b8:	d902      	bls.n	80048c0 <_free_r+0x74>
 80048ba:	230c      	movs	r3, #12
 80048bc:	602b      	str	r3, [r5, #0]
 80048be:	e7d6      	b.n	800486e <_free_r+0x22>
 80048c0:	6820      	ldr	r0, [r4, #0]
 80048c2:	1821      	adds	r1, r4, r0
 80048c4:	428b      	cmp	r3, r1
 80048c6:	bf01      	itttt	eq
 80048c8:	6819      	ldreq	r1, [r3, #0]
 80048ca:	685b      	ldreq	r3, [r3, #4]
 80048cc:	1809      	addeq	r1, r1, r0
 80048ce:	6021      	streq	r1, [r4, #0]
 80048d0:	6063      	str	r3, [r4, #4]
 80048d2:	6054      	str	r4, [r2, #4]
 80048d4:	e7cb      	b.n	800486e <_free_r+0x22>
 80048d6:	bd38      	pop	{r3, r4, r5, pc}
 80048d8:	2000127c 	.word	0x2000127c

080048dc <__malloc_lock>:
 80048dc:	4801      	ldr	r0, [pc, #4]	@ (80048e4 <__malloc_lock+0x8>)
 80048de:	f7ff bfa5 	b.w	800482c <__retarget_lock_acquire_recursive>
 80048e2:	bf00      	nop
 80048e4:	20001278 	.word	0x20001278

080048e8 <__malloc_unlock>:
 80048e8:	4801      	ldr	r0, [pc, #4]	@ (80048f0 <__malloc_unlock+0x8>)
 80048ea:	f7ff bfa0 	b.w	800482e <__retarget_lock_release_recursive>
 80048ee:	bf00      	nop
 80048f0:	20001278 	.word	0x20001278

080048f4 <_init>:
 80048f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f6:	bf00      	nop
 80048f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fa:	bc08      	pop	{r3}
 80048fc:	469e      	mov	lr, r3
 80048fe:	4770      	bx	lr

08004900 <_fini>:
 8004900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004902:	bf00      	nop
 8004904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004906:	bc08      	pop	{r3}
 8004908:	469e      	mov	lr, r3
 800490a:	4770      	bx	lr
