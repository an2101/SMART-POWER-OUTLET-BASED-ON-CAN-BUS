
rtos_stm32_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000461c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800472c  0800472c  0000572c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b0  080047b0  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080047b0  080047b0  00006060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080047b0  080047b0  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b0  080047b0  000057b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047b4  080047b4  000057b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080047b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001220  20000060  08004818  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001280  08004818  00006280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118f8  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d15  00000000  00000000  00017981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  0001a698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c98  00000000  00000000  0001b700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191b2  00000000  00000000  0001c398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119fc  00000000  00000000  0003554a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090dc8  00000000  00000000  00046f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7d0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046cc  00000000  00000000  000d7d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000dc420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004714 	.word	0x08004714

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004714 	.word	0x08004714

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <HAL_CAN_RxFifo1MsgPendingCallback>:
CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];

/* Callback: CAN nhận dữ liệu */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK)
 8000188:	4b10      	ldr	r3, [pc, #64]	@ (80001cc <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 800018a:	4a11      	ldr	r2, [pc, #68]	@ (80001d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 800018c:	2101      	movs	r1, #1
 800018e:	6878      	ldr	r0, [r7, #4]
 8000190:	f000 fd72 	bl	8000c78 <HAL_CAN_GetRxMessage>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d114      	bne.n	80001c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>
    {
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800019a:	2300      	movs	r3, #0
 800019c:	60fb      	str	r3, [r7, #12]
    	        xQueueSendFromISR(CAN_Queue, &RxData[0], &xHigherPriorityTaskWoken);
 800019e:	4b0d      	ldr	r3, [pc, #52]	@ (80001d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 80001a0:	6818      	ldr	r0, [r3, #0]
 80001a2:	f107 020c 	add.w	r2, r7, #12
 80001a6:	2300      	movs	r3, #0
 80001a8:	4908      	ldr	r1, [pc, #32]	@ (80001cc <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 80001aa:	f002 fc7d 	bl	8002aa8 <xQueueGenericSendFromISR>
    	        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d007      	beq.n	80001c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>
 80001b4:	4b08      	ldr	r3, [pc, #32]	@ (80001d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 80001b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80001ba:	601a      	str	r2, [r3, #0]
 80001bc:	f3bf 8f4f 	dsb	sy
 80001c0:	f3bf 8f6f 	isb	sy
    }
}
 80001c4:	bf00      	nop
 80001c6:	3710      	adds	r7, #16
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000398 	.word	0x20000398
 80001d0:	2000037c 	.word	0x2000037c
 80001d4:	2000034c 	.word	0x2000034c
 80001d8:	e000ed04 	.word	0xe000ed04

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b5b0      	push	{r4, r5, r7, lr}
 80001de:	b08e      	sub	sp, #56	@ 0x38
 80001e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e2:	f000 fb0f 	bl	8000804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e6:	f000 f877 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ea:	f000 f8f1 	bl	80003d0 <MX_GPIO_Init>
  MX_CAN_Init();
 80001ee:	f000 f8b9 	bl	8000364 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	482f      	ldr	r0, [pc, #188]	@ (80002b4 <main+0xd8>)
 80001f8:	f001 fb04 	bl	8001804 <HAL_GPIO_WritePin>
  /* Khởi động CAN */
   HAL_CAN_Start(&hcan);
 80001fc:	482e      	ldr	r0, [pc, #184]	@ (80002b8 <main+0xdc>)
 80001fe:	f000 fcf7 	bl	8000bf0 <HAL_CAN_Start>

   /* Cấu hình bộ lọc CAN */
   sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000202:	4b2e      	ldr	r3, [pc, #184]	@ (80002bc <main+0xe0>)
 8000204:	2201      	movs	r2, #1
 8000206:	621a      	str	r2, [r3, #32]
   sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000208:	4b2c      	ldr	r3, [pc, #176]	@ (80002bc <main+0xe0>)
 800020a:	2201      	movs	r2, #1
 800020c:	611a      	str	r2, [r3, #16]
   sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800020e:	4b2b      	ldr	r3, [pc, #172]	@ (80002bc <main+0xe0>)
 8000210:	2200      	movs	r2, #0
 8000212:	619a      	str	r2, [r3, #24]
   sFilterConfig.FilterIdHigh = 0;
 8000214:	4b29      	ldr	r3, [pc, #164]	@ (80002bc <main+0xe0>)
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
   sFilterConfig.FilterIdLow = 0;
 800021a:	4b28      	ldr	r3, [pc, #160]	@ (80002bc <main+0xe0>)
 800021c:	2200      	movs	r2, #0
 800021e:	605a      	str	r2, [r3, #4]
   sFilterConfig.FilterMaskIdHigh = 0;
 8000220:	4b26      	ldr	r3, [pc, #152]	@ (80002bc <main+0xe0>)
 8000222:	2200      	movs	r2, #0
 8000224:	609a      	str	r2, [r3, #8]
   sFilterConfig.FilterMaskIdLow = 0;
 8000226:	4b25      	ldr	r3, [pc, #148]	@ (80002bc <main+0xe0>)
 8000228:	2200      	movs	r2, #0
 800022a:	60da      	str	r2, [r3, #12]
   sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800022c:	4b23      	ldr	r3, [pc, #140]	@ (80002bc <main+0xe0>)
 800022e:	2201      	movs	r2, #1
 8000230:	61da      	str	r2, [r3, #28]
   HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000232:	4922      	ldr	r1, [pc, #136]	@ (80002bc <main+0xe0>)
 8000234:	4820      	ldr	r0, [pc, #128]	@ (80002b8 <main+0xdc>)
 8000236:	f000 fc12 	bl	8000a5e <HAL_CAN_ConfigFilter>

   /* Kích hoạt ngắt CAN */
   HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800023a:	2110      	movs	r1, #16
 800023c:	481e      	ldr	r0, [pc, #120]	@ (80002b8 <main+0xdc>)
 800023e:	f000 fe3c 	bl	8000eba <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
   CAN_Queue = xQueueCreate(10, sizeof(uint8_t));
 8000242:	2200      	movs	r2, #0
 8000244:	2101      	movs	r1, #1
 8000246:	200a      	movs	r0, #10
 8000248:	f002 fad2 	bl	80027f0 <xQueueGenericCreate>
 800024c:	4603      	mov	r3, r0
 800024e:	4a1c      	ldr	r2, [pc, #112]	@ (80002c0 <main+0xe4>)
 8000250:	6013      	str	r3, [r2, #0]
       Relay2_Queue = xQueueCreate(10, sizeof(uint8_t));
 8000252:	2200      	movs	r2, #0
 8000254:	2101      	movs	r1, #1
 8000256:	200a      	movs	r0, #10
 8000258:	f002 faca 	bl	80027f0 <xQueueGenericCreate>
 800025c:	4603      	mov	r3, r0
 800025e:	4a19      	ldr	r2, [pc, #100]	@ (80002c4 <main+0xe8>)
 8000260:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of receiveuart */
  osThreadDef(receiveuart, CAN_Receive_Task, osPriorityNormal, 0, 128);
 8000262:	4b19      	ldr	r3, [pc, #100]	@ (80002c8 <main+0xec>)
 8000264:	f107 041c 	add.w	r4, r7, #28
 8000268:	461d      	mov	r5, r3
 800026a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveuartHandle = osThreadCreate(osThread(receiveuart), NULL);
 8000276:	f107 031c 	add.w	r3, r7, #28
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f002 f951 	bl	8002524 <osThreadCreate>
 8000282:	4603      	mov	r3, r0
 8000284:	4a11      	ldr	r2, [pc, #68]	@ (80002cc <main+0xf0>)
 8000286:	6013      	str	r3, [r2, #0]

  /* definition and creation of relay2Task */
  osThreadDef(relay2Task, Task_Relay2_Control, osPriorityNormal, 0, 128);
 8000288:	4b11      	ldr	r3, [pc, #68]	@ (80002d0 <main+0xf4>)
 800028a:	463c      	mov	r4, r7
 800028c:	461d      	mov	r5, r3
 800028e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000292:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  relay2TaskHandle = osThreadCreate(osThread(relay2Task), NULL);
 800029a:	463b      	mov	r3, r7
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 f940 	bl	8002524 <osThreadCreate>
 80002a4:	4603      	mov	r3, r0
 80002a6:	4a0b      	ldr	r2, [pc, #44]	@ (80002d4 <main+0xf8>)
 80002a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002aa:	f002 f934 	bl	8002516 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ae:	bf00      	nop
 80002b0:	e7fd      	b.n	80002ae <main+0xd2>
 80002b2:	bf00      	nop
 80002b4:	40010c00 	.word	0x40010c00
 80002b8:	2000031c 	.word	0x2000031c
 80002bc:	20000354 	.word	0x20000354
 80002c0:	2000034c 	.word	0x2000034c
 80002c4:	20000350 	.word	0x20000350
 80002c8:	08004738 	.word	0x08004738
 80002cc:	20000344 	.word	0x20000344
 80002d0:	08004760 	.word	0x08004760
 80002d4:	20000348 	.word	0x20000348

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b090      	sub	sp, #64	@ 0x40
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	2228      	movs	r2, #40	@ 0x28
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f004 f926 	bl	8004538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002fa:	2301      	movs	r3, #1
 80002fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000302:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	2301      	movs	r3, #1
 800030a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030c:	2302      	movs	r3, #2
 800030e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000310:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000314:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000316:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800031a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031c:	f107 0318 	add.w	r3, r7, #24
 8000320:	4618      	mov	r0, r3
 8000322:	f001 fa87 	bl	8001834 <HAL_RCC_OscConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800032c:	f000 f8ed 	bl	800050a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	230f      	movs	r3, #15
 8000332:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	2302      	movs	r3, #2
 8000336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2102      	movs	r1, #2
 800034a:	4618      	mov	r0, r3
 800034c:	f001 fcf4 	bl	8001d38 <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000356:	f000 f8d8 	bl	800050a <Error_Handler>
  }
}
 800035a:	bf00      	nop
 800035c:	3740      	adds	r7, #64	@ 0x40
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000368:	4b17      	ldr	r3, [pc, #92]	@ (80003c8 <MX_CAN_Init+0x64>)
 800036a:	4a18      	ldr	r2, [pc, #96]	@ (80003cc <MX_CAN_Init+0x68>)
 800036c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 72;
 800036e:	4b16      	ldr	r3, [pc, #88]	@ (80003c8 <MX_CAN_Init+0x64>)
 8000370:	2248      	movs	r2, #72	@ 0x48
 8000372:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000374:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <MX_CAN_Init+0x64>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800037a:	4b13      	ldr	r3, [pc, #76]	@ (80003c8 <MX_CAN_Init+0x64>)
 800037c:	2200      	movs	r2, #0
 800037e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000380:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <MX_CAN_Init+0x64>)
 8000382:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000386:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000388:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <MX_CAN_Init+0x64>)
 800038a:	2200      	movs	r2, #0
 800038c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800038e:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <MX_CAN_Init+0x64>)
 8000390:	2200      	movs	r2, #0
 8000392:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000394:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <MX_CAN_Init+0x64>)
 8000396:	2200      	movs	r2, #0
 8000398:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800039a:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <MX_CAN_Init+0x64>)
 800039c:	2200      	movs	r2, #0
 800039e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003a0:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <MX_CAN_Init+0x64>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003a6:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <MX_CAN_Init+0x64>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <MX_CAN_Init+0x64>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003b2:	4805      	ldr	r0, [pc, #20]	@ (80003c8 <MX_CAN_Init+0x64>)
 80003b4:	f000 fa58 	bl	8000868 <HAL_CAN_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80003be:	f000 f8a4 	bl	800050a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	2000031c 	.word	0x2000031c
 80003cc:	40006400 	.word	0x40006400

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e4:	4b1d      	ldr	r3, [pc, #116]	@ (800045c <MX_GPIO_Init+0x8c>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a1c      	ldr	r2, [pc, #112]	@ (800045c <MX_GPIO_Init+0x8c>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b1a      	ldr	r3, [pc, #104]	@ (800045c <MX_GPIO_Init+0x8c>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0320 	and.w	r3, r3, #32
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fc:	4b17      	ldr	r3, [pc, #92]	@ (800045c <MX_GPIO_Init+0x8c>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a16      	ldr	r2, [pc, #88]	@ (800045c <MX_GPIO_Init+0x8c>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b14      	ldr	r3, [pc, #80]	@ (800045c <MX_GPIO_Init+0x8c>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0304 	and.w	r3, r3, #4
 8000410:	60bb      	str	r3, [r7, #8]
 8000412:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000414:	4b11      	ldr	r3, [pc, #68]	@ (800045c <MX_GPIO_Init+0x8c>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a10      	ldr	r2, [pc, #64]	@ (800045c <MX_GPIO_Init+0x8c>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <MX_GPIO_Init+0x8c>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0308 	and.w	r3, r3, #8
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2108      	movs	r1, #8
 8000430:	480b      	ldr	r0, [pc, #44]	@ (8000460 <MX_GPIO_Init+0x90>)
 8000432:	f001 f9e7 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000436:	2308      	movs	r3, #8
 8000438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	2301      	movs	r3, #1
 800043c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	2302      	movs	r3, #2
 8000444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	4619      	mov	r1, r3
 800044c:	4804      	ldr	r0, [pc, #16]	@ (8000460 <MX_GPIO_Init+0x90>)
 800044e:	f001 f85d 	bl	800150c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000452:	bf00      	nop
 8000454:	3720      	adds	r7, #32
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000
 8000460:	40010c00 	.word	0x40010c00

08000464 <CAN_Receive_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_CAN_Receive_Task */
void CAN_Receive_Task(void const * argument)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	 uint8_t receivedData;
	    for (;;) {
	        if (xQueueReceive(CAN_Queue, &receivedData, portMAX_DELAY) == pdPASS) {
 800046c:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <CAN_Receive_Task+0x34>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f107 010f 	add.w	r1, r7, #15
 8000474:	f04f 32ff 	mov.w	r2, #4294967295
 8000478:	4618      	mov	r0, r3
 800047a:	f002 fbb3 	bl	8002be4 <xQueueReceive>
 800047e:	4603      	mov	r3, r0
 8000480:	2b01      	cmp	r3, #1
 8000482:	d1f3      	bne.n	800046c <CAN_Receive_Task+0x8>
	            xQueueSend(Relay2_Queue, &receivedData, portMAX_DELAY);
 8000484:	4b05      	ldr	r3, [pc, #20]	@ (800049c <CAN_Receive_Task+0x38>)
 8000486:	6818      	ldr	r0, [r3, #0]
 8000488:	f107 010f 	add.w	r1, r7, #15
 800048c:	2300      	movs	r3, #0
 800048e:	f04f 32ff 	mov.w	r2, #4294967295
 8000492:	f002 fa07 	bl	80028a4 <xQueueGenericSend>
	        if (xQueueReceive(CAN_Queue, &receivedData, portMAX_DELAY) == pdPASS) {
 8000496:	e7e9      	b.n	800046c <CAN_Receive_Task+0x8>
 8000498:	2000034c 	.word	0x2000034c
 800049c:	20000350 	.word	0x20000350

080004a0 <Task_Relay2_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Relay2_Control */
void Task_Relay2_Control(void const * argument)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	uint8_t command;
		    for (;;) {
		        if (xQueueReceive(Relay2_Queue, &command, portMAX_DELAY) == pdPASS) {
 80004a8:	4b0e      	ldr	r3, [pc, #56]	@ (80004e4 <Task_Relay2_Control+0x44>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f107 010f 	add.w	r1, r7, #15
 80004b0:	f04f 32ff 	mov.w	r2, #4294967295
 80004b4:	4618      	mov	r0, r3
 80004b6:	f002 fb95 	bl	8002be4 <xQueueReceive>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d1f3      	bne.n	80004a8 <Task_Relay2_Control+0x8>
		            if (command == '1') {
 80004c0:	7bfb      	ldrb	r3, [r7, #15]
 80004c2:	2b31      	cmp	r3, #49	@ 0x31
 80004c4:	d105      	bne.n	80004d2 <Task_Relay2_Control+0x32>
		                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2108      	movs	r1, #8
 80004ca:	4807      	ldr	r0, [pc, #28]	@ (80004e8 <Task_Relay2_Control+0x48>)
 80004cc:	f001 f99a 	bl	8001804 <HAL_GPIO_WritePin>
 80004d0:	e7ea      	b.n	80004a8 <Task_Relay2_Control+0x8>
		            } else if (command == '2') {
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	2b32      	cmp	r3, #50	@ 0x32
 80004d6:	d1e7      	bne.n	80004a8 <Task_Relay2_Control+0x8>
		                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2108      	movs	r1, #8
 80004dc:	4802      	ldr	r0, [pc, #8]	@ (80004e8 <Task_Relay2_Control+0x48>)
 80004de:	f001 f991 	bl	8001804 <HAL_GPIO_WritePin>
		        if (xQueueReceive(Relay2_Queue, &command, portMAX_DELAY) == pdPASS) {
 80004e2:	e7e1      	b.n	80004a8 <Task_Relay2_Control+0x8>
 80004e4:	20000350 	.word	0x20000350
 80004e8:	40010c00 	.word	0x40010c00

080004ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80004fc:	d101      	bne.n	8000502 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004fe:	f000 f997 	bl	8000830 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050e:	b672      	cpsid	i
}
 8000510:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000512:	bf00      	nop
 8000514:	e7fd      	b.n	8000512 <Error_Handler+0x8>
	...

08000518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	@ (8000580 <HAL_MspInit+0x68>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	4a17      	ldr	r2, [pc, #92]	@ (8000580 <HAL_MspInit+0x68>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6193      	str	r3, [r2, #24]
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <HAL_MspInit+0x68>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000536:	4b12      	ldr	r3, [pc, #72]	@ (8000580 <HAL_MspInit+0x68>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	4a11      	ldr	r2, [pc, #68]	@ (8000580 <HAL_MspInit+0x68>)
 800053c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000540:	61d3      	str	r3, [r2, #28]
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <HAL_MspInit+0x68>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	210f      	movs	r1, #15
 8000552:	f06f 0001 	mvn.w	r0, #1
 8000556:	f000 ffae 	bl	80014b6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800055a:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <HAL_MspInit+0x6c>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	4a04      	ldr	r2, [pc, #16]	@ (8000584 <HAL_MspInit+0x6c>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000
 8000584:	40010000 	.word	0x40010000

08000588 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	@ 0x28
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a29      	ldr	r2, [pc, #164]	@ (8000648 <HAL_CAN_MspInit+0xc0>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d14b      	bne.n	8000640 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005a8:	4b28      	ldr	r3, [pc, #160]	@ (800064c <HAL_CAN_MspInit+0xc4>)
 80005aa:	69db      	ldr	r3, [r3, #28]
 80005ac:	4a27      	ldr	r2, [pc, #156]	@ (800064c <HAL_CAN_MspInit+0xc4>)
 80005ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005b2:	61d3      	str	r3, [r2, #28]
 80005b4:	4b25      	ldr	r3, [pc, #148]	@ (800064c <HAL_CAN_MspInit+0xc4>)
 80005b6:	69db      	ldr	r3, [r3, #28]
 80005b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c0:	4b22      	ldr	r3, [pc, #136]	@ (800064c <HAL_CAN_MspInit+0xc4>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a21      	ldr	r2, [pc, #132]	@ (800064c <HAL_CAN_MspInit+0xc4>)
 80005c6:	f043 0308 	orr.w	r3, r3, #8
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <HAL_CAN_MspInit+0xc4>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0308 	and.w	r3, r3, #8
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4818      	ldr	r0, [pc, #96]	@ (8000650 <HAL_CAN_MspInit+0xc8>)
 80005ee:	f000 ff8d 	bl	800150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fc:	2303      	movs	r3, #3
 80005fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4619      	mov	r1, r3
 8000606:	4812      	ldr	r0, [pc, #72]	@ (8000650 <HAL_CAN_MspInit+0xc8>)
 8000608:	f000 ff80 	bl	800150c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <HAL_CAN_MspInit+0xcc>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
 8000612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000614:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000618:	627b      	str	r3, [r7, #36]	@ 0x24
 800061a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800061c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24
 8000622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
 800062a:	4a0a      	ldr	r2, [pc, #40]	@ (8000654 <HAL_CAN_MspInit+0xcc>)
 800062c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800062e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2105      	movs	r1, #5
 8000634:	2015      	movs	r0, #21
 8000636:	f000 ff3e 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800063a:	2015      	movs	r0, #21
 800063c:	f000 ff57 	bl	80014ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	@ 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40006400 	.word	0x40006400
 800064c:	40021000 	.word	0x40021000
 8000650:	40010c00 	.word	0x40010c00
 8000654:	40010000 	.word	0x40010000

08000658 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08e      	sub	sp, #56	@ 0x38
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000660:	2300      	movs	r3, #0
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000664:	2300      	movs	r3, #0
 8000666:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000668:	2300      	movs	r3, #0
 800066a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800066e:	4b34      	ldr	r3, [pc, #208]	@ (8000740 <HAL_InitTick+0xe8>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a33      	ldr	r2, [pc, #204]	@ (8000740 <HAL_InitTick+0xe8>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b31      	ldr	r3, [pc, #196]	@ (8000740 <HAL_InitTick+0xe8>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000686:	f107 0210 	add.w	r2, r7, #16
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4611      	mov	r1, r2
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fcad 	bl	8001ff0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000696:	6a3b      	ldr	r3, [r7, #32]
 8000698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800069a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800069c:	2b00      	cmp	r3, #0
 800069e:	d103      	bne.n	80006a8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006a0:	f001 fc92 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 80006a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80006a6:	e004      	b.n	80006b2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006a8:	f001 fc8e 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 80006ac:	4603      	mov	r3, r0
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006b4:	4a23      	ldr	r2, [pc, #140]	@ (8000744 <HAL_InitTick+0xec>)
 80006b6:	fba2 2303 	umull	r2, r3, r2, r3
 80006ba:	0c9b      	lsrs	r3, r3, #18
 80006bc:	3b01      	subs	r3, #1
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <HAL_InitTick+0xf0>)
 80006c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80006c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <HAL_InitTick+0xf0>)
 80006ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006ce:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80006d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000748 <HAL_InitTick+0xf0>)
 80006d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006d4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <HAL_InitTick+0xf0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <HAL_InitTick+0xf0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <HAL_InitTick+0xf0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80006e8:	4817      	ldr	r0, [pc, #92]	@ (8000748 <HAL_InitTick+0xf0>)
 80006ea:	f001 fccf 	bl	800208c <HAL_TIM_Base_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80006f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d11b      	bne.n	8000734 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80006fc:	4812      	ldr	r0, [pc, #72]	@ (8000748 <HAL_InitTick+0xf0>)
 80006fe:	f001 fd1d 	bl	800213c <HAL_TIM_Base_Start_IT>
 8000702:	4603      	mov	r3, r0
 8000704:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000708:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800070c:	2b00      	cmp	r3, #0
 800070e:	d111      	bne.n	8000734 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000710:	201c      	movs	r0, #28
 8000712:	f000 feec 	bl	80014ee <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b0f      	cmp	r3, #15
 800071a:	d808      	bhi.n	800072e <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800071c:	2200      	movs	r2, #0
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	201c      	movs	r0, #28
 8000722:	f000 fec8 	bl	80014b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000726:	4a09      	ldr	r2, [pc, #36]	@ (800074c <HAL_InitTick+0xf4>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	e002      	b.n	8000734 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000734:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000738:	4618      	mov	r0, r3
 800073a:	3738      	adds	r7, #56	@ 0x38
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	431bde83 	.word	0x431bde83
 8000748:	200003a0 	.word	0x200003a0
 800074c:	20000004 	.word	0x20000004

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <NMI_Handler+0x4>

08000758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <MemManage_Handler+0x4>

08000768 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <BusFault_Handler+0x4>

08000770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <UsageFault_Handler+0x4>

08000778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <CAN1_RX1_IRQHandler+0x10>)
 800078a:	f000 fbbb 	bl	8000f04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000031c 	.word	0x2000031c

08000798 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800079c:	4802      	ldr	r0, [pc, #8]	@ (80007a8 <TIM2_IRQHandler+0x10>)
 800079e:	f001 fd19 	bl	80021d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200003a0 	.word	0x200003a0

080007ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b8:	f7ff fff8 	bl	80007ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007bc:	480b      	ldr	r0, [pc, #44]	@ (80007ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007be:	490c      	ldr	r1, [pc, #48]	@ (80007f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007c0:	4a0c      	ldr	r2, [pc, #48]	@ (80007f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a09      	ldr	r2, [pc, #36]	@ (80007f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007d4:	4c09      	ldr	r4, [pc, #36]	@ (80007fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e2:	f003 ff0f 	bl	8004604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e6:	f7ff fcf9 	bl	80001dc <main>
  bx lr
 80007ea:	4770      	bx	lr
  ldr r0, =_sdata
 80007ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80007f4:	080047b8 	.word	0x080047b8
  ldr r2, =_sbss
 80007f8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80007fc:	20001280 	.word	0x20001280

08000800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC1_2_IRQHandler>
	...

08000804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000808:	4b08      	ldr	r3, [pc, #32]	@ (800082c <HAL_Init+0x28>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a07      	ldr	r2, [pc, #28]	@ (800082c <HAL_Init+0x28>)
 800080e:	f043 0310 	orr.w	r3, r3, #16
 8000812:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000814:	2003      	movs	r0, #3
 8000816:	f000 fe43 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800081a:	200f      	movs	r0, #15
 800081c:	f7ff ff1c 	bl	8000658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000820:	f7ff fe7a 	bl	8000518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40022000 	.word	0x40022000

08000830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000834:	4b05      	ldr	r3, [pc, #20]	@ (800084c <HAL_IncTick+0x1c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <HAL_IncTick+0x20>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a03      	ldr	r2, [pc, #12]	@ (8000850 <HAL_IncTick+0x20>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	20000008 	.word	0x20000008
 8000850:	200003e8 	.word	0x200003e8

08000854 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b02      	ldr	r3, [pc, #8]	@ (8000864 <HAL_GetTick+0x10>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	200003e8 	.word	0x200003e8

08000868 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d101      	bne.n	800087a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	e0ed      	b.n	8000a56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d102      	bne.n	800088c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff fe7e 	bl	8000588 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f042 0201 	orr.w	r2, r2, #1
 800089a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800089c:	f7ff ffda 	bl	8000854 <HAL_GetTick>
 80008a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008a2:	e012      	b.n	80008ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008a4:	f7ff ffd6 	bl	8000854 <HAL_GetTick>
 80008a8:	4602      	mov	r2, r0
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	2b0a      	cmp	r3, #10
 80008b0:	d90b      	bls.n	80008ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2205      	movs	r2, #5
 80008c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e0c5      	b.n	8000a56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d0e5      	beq.n	80008a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f022 0202 	bic.w	r2, r2, #2
 80008e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008e8:	f7ff ffb4 	bl	8000854 <HAL_GetTick>
 80008ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008ee:	e012      	b.n	8000916 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008f0:	f7ff ffb0 	bl	8000854 <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	2b0a      	cmp	r3, #10
 80008fc:	d90b      	bls.n	8000916 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000902:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2205      	movs	r2, #5
 800090e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e09f      	b.n	8000a56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	2b00      	cmp	r3, #0
 8000922:	d1e5      	bne.n	80008f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	7e1b      	ldrb	r3, [r3, #24]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d108      	bne.n	800093e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	e007      	b.n	800094e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7e5b      	ldrb	r3, [r3, #25]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d108      	bne.n	8000968 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	e007      	b.n	8000978 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000976:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7e9b      	ldrb	r3, [r3, #26]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d108      	bne.n	8000992 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f042 0220 	orr.w	r2, r2, #32
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	e007      	b.n	80009a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f022 0220 	bic.w	r2, r2, #32
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7edb      	ldrb	r3, [r3, #27]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d108      	bne.n	80009bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f022 0210 	bic.w	r2, r2, #16
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	e007      	b.n	80009cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f042 0210 	orr.w	r2, r2, #16
 80009ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	7f1b      	ldrb	r3, [r3, #28]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d108      	bne.n	80009e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f042 0208 	orr.w	r2, r2, #8
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	e007      	b.n	80009f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f022 0208 	bic.w	r2, r2, #8
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7f5b      	ldrb	r3, [r3, #29]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d108      	bne.n	8000a10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f042 0204 	orr.w	r2, r2, #4
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	e007      	b.n	8000a20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f022 0204 	bic.w	r2, r2, #4
 8000a1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689a      	ldr	r2, [r3, #8]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	431a      	orrs	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	ea42 0103 	orr.w	r1, r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	1e5a      	subs	r2, r3, #1
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b087      	sub	sp, #28
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a74:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a76:	7cfb      	ldrb	r3, [r7, #19]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d003      	beq.n	8000a84 <HAL_CAN_ConfigFilter+0x26>
 8000a7c:	7cfb      	ldrb	r3, [r7, #19]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	f040 80aa 	bne.w	8000bd8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000a8a:	f043 0201 	orr.w	r2, r3, #1
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	f003 031f 	and.w	r3, r3, #31
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d123      	bne.n	8000b06 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	401a      	ands	r2, r3
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ae0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3248      	adds	r2, #72	@ 0x48
 8000ae6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000afa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000afc:	6979      	ldr	r1, [r7, #20]
 8000afe:	3348      	adds	r3, #72	@ 0x48
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	440b      	add	r3, r1
 8000b04:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d122      	bne.n	8000b54 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	431a      	orrs	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	3248      	adds	r2, #72	@ 0x48
 8000b34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b4a:	6979      	ldr	r1, [r7, #20]
 8000b4c:	3348      	adds	r3, #72	@ 0x48
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	440b      	add	r3, r1
 8000b52:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d109      	bne.n	8000b70 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	401a      	ands	r2, r3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000b6e:	e007      	b.n	8000b80 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	691b      	ldr	r3, [r3, #16]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d109      	bne.n	8000b9c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000b9a:	e007      	b.n	8000bac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	6a1b      	ldr	r3, [r3, #32]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d107      	bne.n	8000bc4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000bca:	f023 0201 	bic.w	r2, r3, #1
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e006      	b.n	8000be6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bdc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
  }
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	371c      	adds	r7, #28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d12e      	bne.n	8000c62 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2202      	movs	r2, #2
 8000c08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f022 0201 	bic.w	r2, r2, #1
 8000c1a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c1c:	f7ff fe1a 	bl	8000854 <HAL_GetTick>
 8000c20:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c22:	e012      	b.n	8000c4a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c24:	f7ff fe16 	bl	8000854 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b0a      	cmp	r3, #10
 8000c30:	d90b      	bls.n	8000c4a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c36:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2205      	movs	r2, #5
 8000c42:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e012      	b.n	8000c70 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1e5      	bne.n	8000c24 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e006      	b.n	8000c70 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c66:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
  }
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b087      	sub	sp, #28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c8c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c8e:	7dfb      	ldrb	r3, [r7, #23]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d003      	beq.n	8000c9c <HAL_CAN_GetRxMessage+0x24>
 8000c94:	7dfb      	ldrb	r3, [r7, #23]
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	f040 8103 	bne.w	8000ea2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10e      	bne.n	8000cc0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d116      	bne.n	8000cde <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e0f7      	b.n	8000eb0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d107      	bne.n	8000cde <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e0e8      	b.n	8000eb0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	331b      	adds	r3, #27
 8000ce6:	011b      	lsls	r3, r3, #4
 8000ce8:	4413      	add	r3, r2
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 0204 	and.w	r2, r3, #4
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d10c      	bne.n	8000d16 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	331b      	adds	r3, #27
 8000d04:	011b      	lsls	r3, r3, #4
 8000d06:	4413      	add	r3, r2
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	0d5b      	lsrs	r3, r3, #21
 8000d0c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	e00b      	b.n	8000d2e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	331b      	adds	r3, #27
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4413      	add	r3, r2
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	08db      	lsrs	r3, r3, #3
 8000d26:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	331b      	adds	r3, #27
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	4413      	add	r3, r2
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0202 	and.w	r2, r3, #2
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	331b      	adds	r3, #27
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	4413      	add	r3, r2
 8000d50:	3304      	adds	r3, #4
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2208      	movs	r2, #8
 8000d60:	611a      	str	r2, [r3, #16]
 8000d62:	e00b      	b.n	8000d7c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	331b      	adds	r3, #27
 8000d6c:	011b      	lsls	r3, r3, #4
 8000d6e:	4413      	add	r3, r2
 8000d70:	3304      	adds	r3, #4
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 020f 	and.w	r2, r3, #15
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	331b      	adds	r3, #27
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	4413      	add	r3, r2
 8000d88:	3304      	adds	r3, #4
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	331b      	adds	r3, #27
 8000d9c:	011b      	lsls	r3, r3, #4
 8000d9e:	4413      	add	r3, r2
 8000da0:	3304      	adds	r3, #4
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	0c1b      	lsrs	r3, r3, #16
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	4413      	add	r3, r2
 8000db6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	011b      	lsls	r3, r3, #4
 8000dca:	4413      	add	r3, r2
 8000dcc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	0a1a      	lsrs	r2, r3, #8
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	011b      	lsls	r3, r3, #4
 8000de4:	4413      	add	r3, r2
 8000de6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	0c1a      	lsrs	r2, r3, #16
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	3302      	adds	r3, #2
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	4413      	add	r3, r2
 8000e00:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	0e1a      	lsrs	r2, r3, #24
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	3303      	adds	r3, #3
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	4413      	add	r3, r2
 8000e1a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	3304      	adds	r3, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	4413      	add	r3, r2
 8000e32:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	0a1a      	lsrs	r2, r3, #8
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	3305      	adds	r3, #5
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	011b      	lsls	r3, r3, #4
 8000e4a:	4413      	add	r3, r2
 8000e4c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	0c1a      	lsrs	r2, r3, #16
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	3306      	adds	r3, #6
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	4413      	add	r3, r2
 8000e66:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	0e1a      	lsrs	r2, r3, #24
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	3307      	adds	r3, #7
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d108      	bne.n	8000e8e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0220 	orr.w	r2, r2, #32
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	e007      	b.n	8000e9e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f042 0220 	orr.w	r2, r2, #32
 8000e9c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e006      	b.n	8000eb0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
  }
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	371c      	adds	r7, #28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr

08000eba <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b085      	sub	sp, #20
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eca:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d002      	beq.n	8000ed8 <HAL_CAN_ActivateNotification+0x1e>
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d109      	bne.n	8000eec <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6959      	ldr	r1, [r3, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	e006      	b.n	8000efa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
  }
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d07c      	beq.n	8001044 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d023      	beq.n	8000f9c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f983 	bl	8001272 <HAL_CAN_TxMailbox0CompleteCallback>
 8000f6c:	e016      	b.n	8000f9c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d004      	beq.n	8000f82 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f80:	e00c      	b.n	8000f9c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d004      	beq.n	8000f96 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f94:	e002      	b.n	8000f9c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 f986 	bl	80012a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d024      	beq.n	8000ff0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f962 	bl	8001284 <HAL_CAN_TxMailbox1CompleteCallback>
 8000fc0:	e016      	b.n	8000ff0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fd4:	e00c      	b.n	8000ff0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d004      	beq.n	8000fea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fe8:	e002      	b.n	8000ff0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f965 	bl	80012ba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d024      	beq.n	8001044 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001002:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f941 	bl	8001296 <HAL_CAN_TxMailbox2CompleteCallback>
 8001014:	e016      	b.n	8001044 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d004      	beq.n	800102a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
 8001028:	e00c      	b.n	8001044 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d004      	beq.n	800103e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24
 800103c:	e002      	b.n	8001044 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f944 	bl	80012cc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001044:	6a3b      	ldr	r3, [r7, #32]
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00c      	beq.n	8001068 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f003 0310 	and.w	r3, r3, #16
 8001054:	2b00      	cmp	r3, #0
 8001056:	d007      	beq.n	8001068 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800105e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2210      	movs	r2, #16
 8001066:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2208      	movs	r2, #8
 8001082:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f933 	bl	80012f0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d009      	beq.n	80010a8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d002      	beq.n	80010a8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f91b 	bl	80012de <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00c      	beq.n	80010cc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d007      	beq.n	80010cc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80010bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2210      	movs	r2, #16
 80010ca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	f003 0320 	and.w	r3, r3, #32
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00b      	beq.n	80010ee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d006      	beq.n	80010ee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2208      	movs	r2, #8
 80010e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f90a 	bl	8001302 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff f83a 	bl	8000180 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00b      	beq.n	800112e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2210      	movs	r2, #16
 8001126:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f8f3 	bl	8001314 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00b      	beq.n	8001150 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2208      	movs	r2, #8
 8001148:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f8eb 	bl	8001326 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d07b      	beq.n	8001252 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d072      	beq.n	800124a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800116a:	2b00      	cmp	r3, #0
 800116c:	d008      	beq.n	8001180 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001180:	6a3b      	ldr	r3, [r7, #32]
 8001182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001186:	2b00      	cmp	r3, #0
 8001188:	d008      	beq.n	800119c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001196:	f043 0302 	orr.w	r3, r3, #2
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d008      	beq.n	80011b8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80011b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d043      	beq.n	800124a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d03e      	beq.n	800124a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80011d2:	2b60      	cmp	r3, #96	@ 0x60
 80011d4:	d02b      	beq.n	800122e <HAL_CAN_IRQHandler+0x32a>
 80011d6:	2b60      	cmp	r3, #96	@ 0x60
 80011d8:	d82e      	bhi.n	8001238 <HAL_CAN_IRQHandler+0x334>
 80011da:	2b50      	cmp	r3, #80	@ 0x50
 80011dc:	d022      	beq.n	8001224 <HAL_CAN_IRQHandler+0x320>
 80011de:	2b50      	cmp	r3, #80	@ 0x50
 80011e0:	d82a      	bhi.n	8001238 <HAL_CAN_IRQHandler+0x334>
 80011e2:	2b40      	cmp	r3, #64	@ 0x40
 80011e4:	d019      	beq.n	800121a <HAL_CAN_IRQHandler+0x316>
 80011e6:	2b40      	cmp	r3, #64	@ 0x40
 80011e8:	d826      	bhi.n	8001238 <HAL_CAN_IRQHandler+0x334>
 80011ea:	2b30      	cmp	r3, #48	@ 0x30
 80011ec:	d010      	beq.n	8001210 <HAL_CAN_IRQHandler+0x30c>
 80011ee:	2b30      	cmp	r3, #48	@ 0x30
 80011f0:	d822      	bhi.n	8001238 <HAL_CAN_IRQHandler+0x334>
 80011f2:	2b10      	cmp	r3, #16
 80011f4:	d002      	beq.n	80011fc <HAL_CAN_IRQHandler+0x2f8>
 80011f6:	2b20      	cmp	r3, #32
 80011f8:	d005      	beq.n	8001206 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80011fa:	e01d      	b.n	8001238 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80011fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fe:	f043 0308 	orr.w	r3, r3, #8
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001204:	e019      	b.n	800123a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800120e:	e014      	b.n	800123a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001212:	f043 0320 	orr.w	r3, r3, #32
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001218:	e00f      	b.n	800123a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800121a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001222:	e00a      	b.n	800123a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800122c:	e005      	b.n	800123a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001236:	e000      	b.n	800123a <HAL_CAN_IRQHandler+0x336>
            break;
 8001238:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	699a      	ldr	r2, [r3, #24]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001248:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2204      	movs	r2, #4
 8001250:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800125c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f867 	bl	8001338 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	@ 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
	...

0800134c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001374:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800137c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137e:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60d3      	str	r3, [r2, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <__NVIC_GetPriorityGrouping+0x18>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f003 0307 	and.w	r3, r3, #7
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db0b      	blt.n	80013da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 021f 	and.w	r2, r3, #31
 80013c8:	4906      	ldr	r1, [pc, #24]	@ (80013e4 <__NVIC_EnableIRQ+0x34>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	2001      	movs	r0, #1
 80013d2:	fa00 f202 	lsl.w	r2, r0, r2
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	@ (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	@ (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	@ 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	@ 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff4f 	bl	800134c <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff64 	bl	8001394 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ffb2 	bl	800143c <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff81 	bl	80013e8 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff57 	bl	80013b0 <__NVIC_EnableIRQ>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800150c:	b480      	push	{r7}
 800150e:	b08b      	sub	sp, #44	@ 0x2c
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151e:	e161      	b.n	80017e4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001520:	2201      	movs	r2, #1
 8001522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	429a      	cmp	r2, r3
 800153a:	f040 8150 	bne.w	80017de <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4a97      	ldr	r2, [pc, #604]	@ (80017a0 <HAL_GPIO_Init+0x294>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d05e      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
 8001548:	4a95      	ldr	r2, [pc, #596]	@ (80017a0 <HAL_GPIO_Init+0x294>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d875      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 800154e:	4a95      	ldr	r2, [pc, #596]	@ (80017a4 <HAL_GPIO_Init+0x298>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d058      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
 8001554:	4a93      	ldr	r2, [pc, #588]	@ (80017a4 <HAL_GPIO_Init+0x298>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d86f      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 800155a:	4a93      	ldr	r2, [pc, #588]	@ (80017a8 <HAL_GPIO_Init+0x29c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d052      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
 8001560:	4a91      	ldr	r2, [pc, #580]	@ (80017a8 <HAL_GPIO_Init+0x29c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d869      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 8001566:	4a91      	ldr	r2, [pc, #580]	@ (80017ac <HAL_GPIO_Init+0x2a0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d04c      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
 800156c:	4a8f      	ldr	r2, [pc, #572]	@ (80017ac <HAL_GPIO_Init+0x2a0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d863      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 8001572:	4a8f      	ldr	r2, [pc, #572]	@ (80017b0 <HAL_GPIO_Init+0x2a4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d046      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
 8001578:	4a8d      	ldr	r2, [pc, #564]	@ (80017b0 <HAL_GPIO_Init+0x2a4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d85d      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 800157e:	2b12      	cmp	r3, #18
 8001580:	d82a      	bhi.n	80015d8 <HAL_GPIO_Init+0xcc>
 8001582:	2b12      	cmp	r3, #18
 8001584:	d859      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 8001586:	a201      	add	r2, pc, #4	@ (adr r2, 800158c <HAL_GPIO_Init+0x80>)
 8001588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158c:	08001607 	.word	0x08001607
 8001590:	080015e1 	.word	0x080015e1
 8001594:	080015f3 	.word	0x080015f3
 8001598:	08001635 	.word	0x08001635
 800159c:	0800163b 	.word	0x0800163b
 80015a0:	0800163b 	.word	0x0800163b
 80015a4:	0800163b 	.word	0x0800163b
 80015a8:	0800163b 	.word	0x0800163b
 80015ac:	0800163b 	.word	0x0800163b
 80015b0:	0800163b 	.word	0x0800163b
 80015b4:	0800163b 	.word	0x0800163b
 80015b8:	0800163b 	.word	0x0800163b
 80015bc:	0800163b 	.word	0x0800163b
 80015c0:	0800163b 	.word	0x0800163b
 80015c4:	0800163b 	.word	0x0800163b
 80015c8:	0800163b 	.word	0x0800163b
 80015cc:	0800163b 	.word	0x0800163b
 80015d0:	080015e9 	.word	0x080015e9
 80015d4:	080015fd 	.word	0x080015fd
 80015d8:	4a76      	ldr	r2, [pc, #472]	@ (80017b4 <HAL_GPIO_Init+0x2a8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015de:	e02c      	b.n	800163a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	623b      	str	r3, [r7, #32]
          break;
 80015e6:	e029      	b.n	800163c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	3304      	adds	r3, #4
 80015ee:	623b      	str	r3, [r7, #32]
          break;
 80015f0:	e024      	b.n	800163c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	3308      	adds	r3, #8
 80015f8:	623b      	str	r3, [r7, #32]
          break;
 80015fa:	e01f      	b.n	800163c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	330c      	adds	r3, #12
 8001602:	623b      	str	r3, [r7, #32]
          break;
 8001604:	e01a      	b.n	800163c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800160e:	2304      	movs	r3, #4
 8001610:	623b      	str	r3, [r7, #32]
          break;
 8001612:	e013      	b.n	800163c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d105      	bne.n	8001628 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800161c:	2308      	movs	r3, #8
 800161e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	611a      	str	r2, [r3, #16]
          break;
 8001626:	e009      	b.n	800163c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001628:	2308      	movs	r3, #8
 800162a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	615a      	str	r2, [r3, #20]
          break;
 8001632:	e003      	b.n	800163c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
          break;
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x130>
          break;
 800163a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2bff      	cmp	r3, #255	@ 0xff
 8001640:	d801      	bhi.n	8001646 <HAL_GPIO_Init+0x13a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	e001      	b.n	800164a <HAL_GPIO_Init+0x13e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3304      	adds	r3, #4
 800164a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2bff      	cmp	r3, #255	@ 0xff
 8001650:	d802      	bhi.n	8001658 <HAL_GPIO_Init+0x14c>
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	e002      	b.n	800165e <HAL_GPIO_Init+0x152>
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	3b08      	subs	r3, #8
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	210f      	movs	r1, #15
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	401a      	ands	r2, r3
 8001670:	6a39      	ldr	r1, [r7, #32]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	431a      	orrs	r2, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80a9 	beq.w	80017de <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800168c:	4b4a      	ldr	r3, [pc, #296]	@ (80017b8 <HAL_GPIO_Init+0x2ac>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a49      	ldr	r2, [pc, #292]	@ (80017b8 <HAL_GPIO_Init+0x2ac>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b47      	ldr	r3, [pc, #284]	@ (80017b8 <HAL_GPIO_Init+0x2ac>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016a4:	4a45      	ldr	r2, [pc, #276]	@ (80017bc <HAL_GPIO_Init+0x2b0>)
 80016a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3302      	adds	r3, #2
 80016ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4013      	ands	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a3d      	ldr	r2, [pc, #244]	@ (80017c0 <HAL_GPIO_Init+0x2b4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d00d      	beq.n	80016ec <HAL_GPIO_Init+0x1e0>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a3c      	ldr	r2, [pc, #240]	@ (80017c4 <HAL_GPIO_Init+0x2b8>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d007      	beq.n	80016e8 <HAL_GPIO_Init+0x1dc>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a3b      	ldr	r2, [pc, #236]	@ (80017c8 <HAL_GPIO_Init+0x2bc>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d101      	bne.n	80016e4 <HAL_GPIO_Init+0x1d8>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e004      	b.n	80016ee <HAL_GPIO_Init+0x1e2>
 80016e4:	2303      	movs	r3, #3
 80016e6:	e002      	b.n	80016ee <HAL_GPIO_Init+0x1e2>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <HAL_GPIO_Init+0x1e2>
 80016ec:	2300      	movs	r3, #0
 80016ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016f0:	f002 0203 	and.w	r2, r2, #3
 80016f4:	0092      	lsls	r2, r2, #2
 80016f6:	4093      	lsls	r3, r2
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016fe:	492f      	ldr	r1, [pc, #188]	@ (80017bc <HAL_GPIO_Init+0x2b0>)
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	3302      	adds	r3, #2
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d006      	beq.n	8001726 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001718:	4b2c      	ldr	r3, [pc, #176]	@ (80017cc <HAL_GPIO_Init+0x2c0>)
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	492b      	ldr	r1, [pc, #172]	@ (80017cc <HAL_GPIO_Init+0x2c0>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	608b      	str	r3, [r1, #8]
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001726:	4b29      	ldr	r3, [pc, #164]	@ (80017cc <HAL_GPIO_Init+0x2c0>)
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	43db      	mvns	r3, r3
 800172e:	4927      	ldr	r1, [pc, #156]	@ (80017cc <HAL_GPIO_Init+0x2c0>)
 8001730:	4013      	ands	r3, r2
 8001732:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d006      	beq.n	800174e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001740:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <HAL_GPIO_Init+0x2c0>)
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	4921      	ldr	r1, [pc, #132]	@ (80017cc <HAL_GPIO_Init+0x2c0>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	60cb      	str	r3, [r1, #12]
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800174e:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <HAL_GPIO_Init+0x2c0>)
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	43db      	mvns	r3, r3
 8001756:	491d      	ldr	r1, [pc, #116]	@ (80017cc <HAL_GPIO_Init+0x2c0>)
 8001758:	4013      	ands	r3, r2
 800175a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001768:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <HAL_GPIO_Init+0x2c0>)
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	4917      	ldr	r1, [pc, #92]	@ (80017cc <HAL_GPIO_Init+0x2c0>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
 8001774:	e006      	b.n	8001784 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <HAL_GPIO_Init+0x2c0>)
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	43db      	mvns	r3, r3
 800177e:	4913      	ldr	r1, [pc, #76]	@ (80017cc <HAL_GPIO_Init+0x2c0>)
 8001780:	4013      	ands	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d01f      	beq.n	80017d0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001790:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <HAL_GPIO_Init+0x2c0>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	490d      	ldr	r1, [pc, #52]	@ (80017cc <HAL_GPIO_Init+0x2c0>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
 800179c:	e01f      	b.n	80017de <HAL_GPIO_Init+0x2d2>
 800179e:	bf00      	nop
 80017a0:	10320000 	.word	0x10320000
 80017a4:	10310000 	.word	0x10310000
 80017a8:	10220000 	.word	0x10220000
 80017ac:	10210000 	.word	0x10210000
 80017b0:	10120000 	.word	0x10120000
 80017b4:	10110000 	.word	0x10110000
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000
 80017c0:	40010800 	.word	0x40010800
 80017c4:	40010c00 	.word	0x40010c00
 80017c8:	40011000 	.word	0x40011000
 80017cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HAL_GPIO_Init+0x2f4>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	4909      	ldr	r1, [pc, #36]	@ (8001800 <HAL_GPIO_Init+0x2f4>)
 80017da:	4013      	ands	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e0:	3301      	adds	r3, #1
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ea:	fa22 f303 	lsr.w	r3, r2, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f47f ae96 	bne.w	8001520 <HAL_GPIO_Init+0x14>
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	372c      	adds	r7, #44	@ 0x2c
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	40010400 	.word	0x40010400

08001804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
 8001810:	4613      	mov	r3, r2
 8001812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001814:	787b      	ldrb	r3, [r7, #1]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001820:	e003      	b.n	800182a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	041a      	lsls	r2, r3, #16
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	611a      	str	r2, [r3, #16]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e272      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8087 	beq.w	8001962 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001854:	4b92      	ldr	r3, [pc, #584]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b04      	cmp	r3, #4
 800185e:	d00c      	beq.n	800187a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001860:	4b8f      	ldr	r3, [pc, #572]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b08      	cmp	r3, #8
 800186a:	d112      	bne.n	8001892 <HAL_RCC_OscConfig+0x5e>
 800186c:	4b8c      	ldr	r3, [pc, #560]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001878:	d10b      	bne.n	8001892 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187a:	4b89      	ldr	r3, [pc, #548]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d06c      	beq.n	8001960 <HAL_RCC_OscConfig+0x12c>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d168      	bne.n	8001960 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e24c      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x76>
 800189c:	4b80      	ldr	r3, [pc, #512]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a7f      	ldr	r2, [pc, #508]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e02e      	b.n	8001908 <HAL_RCC_OscConfig+0xd4>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x98>
 80018b2:	4b7b      	ldr	r3, [pc, #492]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a7a      	ldr	r2, [pc, #488]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b78      	ldr	r3, [pc, #480]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a77      	ldr	r2, [pc, #476]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e01d      	b.n	8001908 <HAL_RCC_OscConfig+0xd4>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0xbc>
 80018d6:	4b72      	ldr	r3, [pc, #456]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a71      	ldr	r2, [pc, #452]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a6e      	ldr	r2, [pc, #440]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e00b      	b.n	8001908 <HAL_RCC_OscConfig+0xd4>
 80018f0:	4b6b      	ldr	r3, [pc, #428]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a6a      	ldr	r2, [pc, #424]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b68      	ldr	r3, [pc, #416]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a67      	ldr	r2, [pc, #412]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001906:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d013      	beq.n	8001938 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7fe ffa0 	bl	8000854 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7fe ff9c 	bl	8000854 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	@ 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e200      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b5d      	ldr	r3, [pc, #372]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0xe4>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7fe ff8c 	bl	8000854 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7fe ff88 	bl	8000854 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	@ 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e1ec      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001952:	4b53      	ldr	r3, [pc, #332]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x10c>
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d063      	beq.n	8001a36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800196e:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800197a:	4b49      	ldr	r3, [pc, #292]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b08      	cmp	r3, #8
 8001984:	d11c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x18c>
 8001986:	4b46      	ldr	r3, [pc, #280]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d116      	bne.n	80019c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	4b43      	ldr	r3, [pc, #268]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <HAL_RCC_OscConfig+0x176>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d001      	beq.n	80019aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e1c0      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019aa:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4939      	ldr	r1, [pc, #228]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	e03a      	b.n	8001a36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c8:	4b36      	ldr	r3, [pc, #216]	@ (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ce:	f7fe ff41 	bl	8000854 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d6:	f7fe ff3d 	bl	8000854 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e1a1      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e8:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f4:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4927      	ldr	r1, [pc, #156]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	e015      	b.n	8001a36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0a:	4b26      	ldr	r3, [pc, #152]	@ (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7fe ff20 	bl	8000854 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a18:	f7fe ff1c 	bl	8000854 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e180      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d03a      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d019      	beq.n	8001a7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a4a:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a50:	f7fe ff00 	bl	8000854 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a58:	f7fe fefc 	bl	8000854 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e160      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a76:	2001      	movs	r0, #1
 8001a78:	f000 faea 	bl	8002050 <RCC_Delay>
 8001a7c:	e01c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7fe fee6 	bl	8000854 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8a:	e00f      	b.n	8001aac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8c:	f7fe fee2 	bl	8000854 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d908      	bls.n	8001aac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e146      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	42420000 	.word	0x42420000
 8001aa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	4b92      	ldr	r3, [pc, #584]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1e9      	bne.n	8001a8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80a6 	beq.w	8001c12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aca:	4b8b      	ldr	r3, [pc, #556]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10d      	bne.n	8001af2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b88      	ldr	r3, [pc, #544]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a87      	ldr	r2, [pc, #540]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b85      	ldr	r3, [pc, #532]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aee:	2301      	movs	r3, #1
 8001af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af2:	4b82      	ldr	r3, [pc, #520]	@ (8001cfc <HAL_RCC_OscConfig+0x4c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d118      	bne.n	8001b30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001afe:	4b7f      	ldr	r3, [pc, #508]	@ (8001cfc <HAL_RCC_OscConfig+0x4c8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a7e      	ldr	r2, [pc, #504]	@ (8001cfc <HAL_RCC_OscConfig+0x4c8>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b0a:	f7fe fea3 	bl	8000854 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b12:	f7fe fe9f 	bl	8000854 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b64      	cmp	r3, #100	@ 0x64
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e103      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b24:	4b75      	ldr	r3, [pc, #468]	@ (8001cfc <HAL_RCC_OscConfig+0x4c8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x312>
 8001b38:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a6e      	ldr	r2, [pc, #440]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6213      	str	r3, [r2, #32]
 8001b44:	e02d      	b.n	8001ba2 <HAL_RCC_OscConfig+0x36e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x334>
 8001b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a69      	ldr	r2, [pc, #420]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6213      	str	r3, [r2, #32]
 8001b5a:	4b67      	ldr	r3, [pc, #412]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a66      	ldr	r2, [pc, #408]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	f023 0304 	bic.w	r3, r3, #4
 8001b64:	6213      	str	r3, [r2, #32]
 8001b66:	e01c      	b.n	8001ba2 <HAL_RCC_OscConfig+0x36e>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d10c      	bne.n	8001b8a <HAL_RCC_OscConfig+0x356>
 8001b70:	4b61      	ldr	r3, [pc, #388]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4a60      	ldr	r2, [pc, #384]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	6213      	str	r3, [r2, #32]
 8001b7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a5d      	ldr	r2, [pc, #372]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6213      	str	r3, [r2, #32]
 8001b88:	e00b      	b.n	8001ba2 <HAL_RCC_OscConfig+0x36e>
 8001b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a5a      	ldr	r2, [pc, #360]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6213      	str	r3, [r2, #32]
 8001b96:	4b58      	ldr	r3, [pc, #352]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a57      	ldr	r2, [pc, #348]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d015      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001baa:	f7fe fe53 	bl	8000854 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7fe fe4f 	bl	8000854 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e0b1      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0ee      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x37e>
 8001bd4:	e014      	b.n	8001c00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7fe fe3d 	bl	8000854 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7fe fe39 	bl	8000854 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e09b      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf4:	4b40      	ldr	r3, [pc, #256]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ee      	bne.n	8001bde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d105      	bne.n	8001c12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c06:	4b3c      	ldr	r3, [pc, #240]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4a3b      	ldr	r2, [pc, #236]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8087 	beq.w	8001d2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c1c:	4b36      	ldr	r3, [pc, #216]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d061      	beq.n	8001cec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d146      	bne.n	8001cbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c30:	4b33      	ldr	r3, [pc, #204]	@ (8001d00 <HAL_RCC_OscConfig+0x4cc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7fe fe0d 	bl	8000854 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7fe fe09 	bl	8000854 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e06d      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c50:	4b29      	ldr	r3, [pc, #164]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f0      	bne.n	8001c3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c64:	d108      	bne.n	8001c78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c66:	4b24      	ldr	r3, [pc, #144]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	4921      	ldr	r1, [pc, #132]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c78:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a19      	ldr	r1, [r3, #32]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	491b      	ldr	r1, [pc, #108]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c90:	4b1b      	ldr	r3, [pc, #108]	@ (8001d00 <HAL_RCC_OscConfig+0x4cc>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7fe fddd 	bl	8000854 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7fe fdd9 	bl	8000854 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e03d      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb0:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x46a>
 8001cbc:	e035      	b.n	8001d2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <HAL_RCC_OscConfig+0x4cc>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7fe fdc6 	bl	8000854 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7fe fdc2 	bl	8000854 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e026      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x498>
 8001cea:	e01e      	b.n	8001d2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e019      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <HAL_RCC_OscConfig+0x500>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000

08001d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0d0      	b.n	8001eee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d910      	bls.n	8001d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b67      	ldr	r3, [pc, #412]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 0207 	bic.w	r2, r3, #7
 8001d62:	4965      	ldr	r1, [pc, #404]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b63      	ldr	r3, [pc, #396]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0b8      	b.n	8001eee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d020      	beq.n	8001dca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d94:	4b59      	ldr	r3, [pc, #356]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4a58      	ldr	r2, [pc, #352]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dac:	4b53      	ldr	r3, [pc, #332]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4a52      	ldr	r2, [pc, #328]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001db6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4b50      	ldr	r3, [pc, #320]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	494d      	ldr	r1, [pc, #308]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d040      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	4b47      	ldr	r3, [pc, #284]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d115      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e07f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df6:	4b41      	ldr	r3, [pc, #260]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e073      	b.n	8001eee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e06:	4b3d      	ldr	r3, [pc, #244]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e06b      	b.n	8001eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e16:	4b39      	ldr	r3, [pc, #228]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f023 0203 	bic.w	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4936      	ldr	r1, [pc, #216]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e28:	f7fe fd14 	bl	8000854 <HAL_GetTick>
 8001e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e30:	f7fe fd10 	bl	8000854 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e053      	b.n	8001eee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	4b2d      	ldr	r3, [pc, #180]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 020c 	and.w	r2, r3, #12
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d1eb      	bne.n	8001e30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e58:	4b27      	ldr	r3, [pc, #156]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d210      	bcs.n	8001e88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b24      	ldr	r3, [pc, #144]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 0207 	bic.w	r2, r3, #7
 8001e6e:	4922      	ldr	r1, [pc, #136]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e032      	b.n	8001eee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e94:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4916      	ldr	r1, [pc, #88]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eb2:	4b12      	ldr	r3, [pc, #72]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	490e      	ldr	r1, [pc, #56]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ec6:	f000 f821 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	490a      	ldr	r1, [pc, #40]	@ (8001f00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed8:	5ccb      	ldrb	r3, [r1, r3]
 8001eda:	fa22 f303 	lsr.w	r3, r2, r3
 8001ede:	4a09      	ldr	r2, [pc, #36]	@ (8001f04 <HAL_RCC_ClockConfig+0x1cc>)
 8001ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ee2:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <HAL_RCC_ClockConfig+0x1d0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fbb6 	bl	8000658 <HAL_InitTick>

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40022000 	.word	0x40022000
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08004784 	.word	0x08004784
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f26:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d002      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x30>
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d003      	beq.n	8001f42 <HAL_RCC_GetSysClockFreq+0x36>
 8001f3a:	e027      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f3c:	4b19      	ldr	r3, [pc, #100]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f3e:	613b      	str	r3, [r7, #16]
      break;
 8001f40:	e027      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	0c9b      	lsrs	r3, r3, #18
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	4a17      	ldr	r2, [pc, #92]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f4c:	5cd3      	ldrb	r3, [r2, r3]
 8001f4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d010      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f5a:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	0c5b      	lsrs	r3, r3, #17
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	4a11      	ldr	r2, [pc, #68]	@ (8001fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f6e:	fb03 f202 	mul.w	r2, r3, r2
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	e004      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	613b      	str	r3, [r7, #16]
      break;
 8001f8a:	e002      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f8c:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f8e:	613b      	str	r3, [r7, #16]
      break;
 8001f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f92:	693b      	ldr	r3, [r7, #16]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	007a1200 	.word	0x007a1200
 8001fa8:	0800479c 	.word	0x0800479c
 8001fac:	080047ac 	.word	0x080047ac
 8001fb0:	003d0900 	.word	0x003d0900

08001fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb8:	4b02      	ldr	r3, [pc, #8]	@ (8001fc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	20000000 	.word	0x20000000

08001fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fcc:	f7ff fff2 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4903      	ldr	r1, [pc, #12]	@ (8001fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	08004794 	.word	0x08004794

08001ff0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002000:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <HAL_RCC_GetClockConfig+0x58>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0203 	and.w	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <HAL_RCC_GetClockConfig+0x58>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <HAL_RCC_GetClockConfig+0x58>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <HAL_RCC_GetClockConfig+0x58>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	08db      	lsrs	r3, r3, #3
 800202a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002032:	4b06      	ldr	r3, [pc, #24]	@ (800204c <HAL_RCC_GetClockConfig+0x5c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0207 	and.w	r2, r3, #7
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40021000 	.word	0x40021000
 800204c:	40022000 	.word	0x40022000

08002050 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002058:	4b0a      	ldr	r3, [pc, #40]	@ (8002084 <RCC_Delay+0x34>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <RCC_Delay+0x38>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	0a5b      	lsrs	r3, r3, #9
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800206c:	bf00      	nop
  }
  while (Delay --);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1e5a      	subs	r2, r3, #1
 8002072:	60fa      	str	r2, [r7, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f9      	bne.n	800206c <RCC_Delay+0x1c>
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	20000000 	.word	0x20000000
 8002088:	10624dd3 	.word	0x10624dd3

0800208c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e041      	b.n	8002122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f839 	bl	800212a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3304      	adds	r3, #4
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f000 f996 	bl	80023fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d001      	beq.n	8002154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e035      	b.n	80021c0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2202      	movs	r2, #2
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a16      	ldr	r2, [pc, #88]	@ (80021cc <HAL_TIM_Base_Start_IT+0x90>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d009      	beq.n	800218a <HAL_TIM_Base_Start_IT+0x4e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217e:	d004      	beq.n	800218a <HAL_TIM_Base_Start_IT+0x4e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a12      	ldr	r2, [pc, #72]	@ (80021d0 <HAL_TIM_Base_Start_IT+0x94>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d111      	bne.n	80021ae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b06      	cmp	r3, #6
 800219a:	d010      	beq.n	80021be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ac:	e007      	b.n	80021be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0201 	orr.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40012c00 	.word	0x40012c00
 80021d0:	40000400 	.word	0x40000400

080021d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d020      	beq.n	8002238 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01b      	beq.n	8002238 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0202 	mvn.w	r2, #2
 8002208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f8d1 	bl	80023c6 <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f8c4 	bl	80023b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f8d3 	bl	80023d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b00      	cmp	r3, #0
 8002240:	d020      	beq.n	8002284 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01b      	beq.n	8002284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0204 	mvn.w	r2, #4
 8002254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f8ab 	bl	80023c6 <HAL_TIM_IC_CaptureCallback>
 8002270:	e005      	b.n	800227e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f89e 	bl	80023b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f8ad 	bl	80023d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d020      	beq.n	80022d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01b      	beq.n	80022d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0208 	mvn.w	r2, #8
 80022a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2204      	movs	r2, #4
 80022a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f885 	bl	80023c6 <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f878 	bl	80023b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f887 	bl	80023d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d020      	beq.n	800231c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01b      	beq.n	800231c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0210 	mvn.w	r2, #16
 80022ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2208      	movs	r2, #8
 80022f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f85f 	bl	80023c6 <HAL_TIM_IC_CaptureCallback>
 8002308:	e005      	b.n	8002316 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f852 	bl	80023b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f861 	bl	80023d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00c      	beq.n	8002340 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d007      	beq.n	8002340 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0201 	mvn.w	r2, #1
 8002338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fe f8d6 	bl	80004ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00c      	beq.n	8002364 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800235c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f8b9 	bl	80024d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00c      	beq.n	8002388 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f831 	bl	80023ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00c      	beq.n	80023ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0220 	mvn.w	r2, #32
 80023a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f88c 	bl	80024c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr

080023ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a2b      	ldr	r2, [pc, #172]	@ (80024bc <TIM_Base_SetConfig+0xc0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d007      	beq.n	8002424 <TIM_Base_SetConfig+0x28>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800241a:	d003      	beq.n	8002424 <TIM_Base_SetConfig+0x28>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a28      	ldr	r2, [pc, #160]	@ (80024c0 <TIM_Base_SetConfig+0xc4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d108      	bne.n	8002436 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800242a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a20      	ldr	r2, [pc, #128]	@ (80024bc <TIM_Base_SetConfig+0xc0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d007      	beq.n	800244e <TIM_Base_SetConfig+0x52>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002444:	d003      	beq.n	800244e <TIM_Base_SetConfig+0x52>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a1d      	ldr	r2, [pc, #116]	@ (80024c0 <TIM_Base_SetConfig+0xc4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d108      	bne.n	8002460 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	4313      	orrs	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a0d      	ldr	r2, [pc, #52]	@ (80024bc <TIM_Base_SetConfig+0xc0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d103      	bne.n	8002494 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f023 0201 	bic.w	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	611a      	str	r2, [r3, #16]
  }
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40000400 	.word	0x40000400

080024c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80024f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024fa:	2b84      	cmp	r3, #132	@ 0x84
 80024fc:	d005      	beq.n	800250a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80024fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4413      	add	r3, r2
 8002506:	3303      	adds	r3, #3
 8002508:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800250a:	68fb      	ldr	r3, [r7, #12]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800251a:	f000 ff05 	bl	8003328 <vTaskStartScheduler>
  
  return osOK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	bd80      	pop	{r7, pc}

08002524 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002526:	b089      	sub	sp, #36	@ 0x24
 8002528:	af04      	add	r7, sp, #16
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d020      	beq.n	8002578 <osThreadCreate+0x54>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d01c      	beq.n	8002578 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685c      	ldr	r4, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691e      	ldr	r6, [r3, #16]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ffc9 	bl	80024e8 <makeFreeRtosPriority>
 8002556:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002560:	9202      	str	r2, [sp, #8]
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	9100      	str	r1, [sp, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	4632      	mov	r2, r6
 800256a:	4629      	mov	r1, r5
 800256c:	4620      	mov	r0, r4
 800256e:	f000 fd2b 	bl	8002fc8 <xTaskCreateStatic>
 8002572:	4603      	mov	r3, r0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	e01c      	b.n	80025b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685c      	ldr	r4, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002584:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ffab 	bl	80024e8 <makeFreeRtosPriority>
 8002592:	4602      	mov	r2, r0
 8002594:	f107 030c 	add.w	r3, r7, #12
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	9200      	str	r2, [sp, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	4632      	mov	r2, r6
 80025a0:	4629      	mov	r1, r5
 80025a2:	4620      	mov	r0, r4
 80025a4:	f000 fd70 	bl	8003088 <xTaskCreate>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d001      	beq.n	80025b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e000      	b.n	80025b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80025b2:	68fb      	ldr	r3, [r7, #12]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f103 0208 	add.w	r2, r3, #8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f103 0208 	add.w	r2, r3, #8
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f103 0208 	add.w	r2, r3, #8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002612:	b480      	push	{r7}
 8002614:	b085      	sub	sp, #20
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	601a      	str	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266e:	d103      	bne.n	8002678 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e00c      	b.n	8002692 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3308      	adds	r3, #8
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	e002      	b.n	8002686 <vListInsert+0x2e>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	429a      	cmp	r2, r3
 8002690:	d2f6      	bcs.n	8002680 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	601a      	str	r2, [r3, #0]
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6892      	ldr	r2, [r2, #8]
 80026de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6852      	ldr	r2, [r2, #4]
 80026e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d103      	bne.n	80026fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	1e5a      	subs	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
	...

0800271c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10b      	bne.n	8002748 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002742:	bf00      	nop
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002748:	f001 fc08 	bl	8003f5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002754:	68f9      	ldr	r1, [r7, #12]
 8002756:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	441a      	add	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002778:	3b01      	subs	r3, #1
 800277a:	68f9      	ldr	r1, [r7, #12]
 800277c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	441a      	add	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	22ff      	movs	r2, #255	@ 0xff
 800278c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	22ff      	movs	r2, #255	@ 0xff
 8002794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d114      	bne.n	80027c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01a      	beq.n	80027dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3310      	adds	r3, #16
 80027aa:	4618      	mov	r0, r3
 80027ac:	f001 f814 	bl	80037d8 <xTaskRemoveFromEventList>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d012      	beq.n	80027dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027b6:	4b0d      	ldr	r3, [pc, #52]	@ (80027ec <xQueueGenericReset+0xd0>)
 80027b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	f3bf 8f4f 	dsb	sy
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	e009      	b.n	80027dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3310      	adds	r3, #16
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fef5 	bl	80025bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3324      	adds	r3, #36	@ 0x24
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fef0 	bl	80025bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027dc:	f001 fbee 	bl	8003fbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027e0:	2301      	movs	r3, #1
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	e000ed04 	.word	0xe000ed04

080027f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	@ 0x28
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	4613      	mov	r3, r2
 80027fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10b      	bne.n	800281c <xQueueGenericCreate+0x2c>
	__asm volatile
 8002804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	613b      	str	r3, [r7, #16]
}
 8002816:	bf00      	nop
 8002818:	bf00      	nop
 800281a:	e7fd      	b.n	8002818 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	fb02 f303 	mul.w	r3, r2, r3
 8002824:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3348      	adds	r3, #72	@ 0x48
 800282a:	4618      	mov	r0, r3
 800282c:	f001 fc98 	bl	8004160 <pvPortMalloc>
 8002830:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d011      	beq.n	800285c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	3348      	adds	r3, #72	@ 0x48
 8002840:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800284a:	79fa      	ldrb	r2, [r7, #7]
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	4613      	mov	r3, r2
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f805 	bl	8002866 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800285c:	69bb      	ldr	r3, [r7, #24]
	}
 800285e:	4618      	mov	r0, r3
 8002860:	3720      	adds	r7, #32
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d103      	bne.n	8002882 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	e002      	b.n	8002888 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002894:	2101      	movs	r1, #1
 8002896:	69b8      	ldr	r0, [r7, #24]
 8002898:	f7ff ff40 	bl	800271c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08e      	sub	sp, #56	@ 0x38
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80028b2:	2300      	movs	r3, #0
 80028b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80028ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10b      	bne.n	80028d8 <xQueueGenericSend+0x34>
	__asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80028d2:	bf00      	nop
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d103      	bne.n	80028e6 <xQueueGenericSend+0x42>
 80028de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <xQueueGenericSend+0x46>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <xQueueGenericSend+0x48>
 80028ea:	2300      	movs	r3, #0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10b      	bne.n	8002908 <xQueueGenericSend+0x64>
	__asm volatile
 80028f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002902:	bf00      	nop
 8002904:	bf00      	nop
 8002906:	e7fd      	b.n	8002904 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d103      	bne.n	8002916 <xQueueGenericSend+0x72>
 800290e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <xQueueGenericSend+0x76>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <xQueueGenericSend+0x78>
 800291a:	2300      	movs	r3, #0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10b      	bne.n	8002938 <xQueueGenericSend+0x94>
	__asm volatile
 8002920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002924:	f383 8811 	msr	BASEPRI, r3
 8002928:	f3bf 8f6f 	isb	sy
 800292c:	f3bf 8f4f 	dsb	sy
 8002930:	623b      	str	r3, [r7, #32]
}
 8002932:	bf00      	nop
 8002934:	bf00      	nop
 8002936:	e7fd      	b.n	8002934 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002938:	f001 f914 	bl	8003b64 <xTaskGetSchedulerState>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <xQueueGenericSend+0xa4>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <xQueueGenericSend+0xa8>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <xQueueGenericSend+0xaa>
 800294c:	2300      	movs	r3, #0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10b      	bne.n	800296a <xQueueGenericSend+0xc6>
	__asm volatile
 8002952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	61fb      	str	r3, [r7, #28]
}
 8002964:	bf00      	nop
 8002966:	bf00      	nop
 8002968:	e7fd      	b.n	8002966 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800296a:	f001 faf7 	bl	8003f5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800296e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002970:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002976:	429a      	cmp	r2, r3
 8002978:	d302      	bcc.n	8002980 <xQueueGenericSend+0xdc>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d129      	bne.n	80029d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002986:	f000 fa0f 	bl	8002da8 <prvCopyDataToQueue>
 800298a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800298c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	2b00      	cmp	r3, #0
 8002992:	d010      	beq.n	80029b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002996:	3324      	adds	r3, #36	@ 0x24
 8002998:	4618      	mov	r0, r3
 800299a:	f000 ff1d 	bl	80037d8 <xTaskRemoveFromEventList>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d013      	beq.n	80029cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029a4:	4b3f      	ldr	r3, [pc, #252]	@ (8002aa4 <xQueueGenericSend+0x200>)
 80029a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	e00a      	b.n	80029cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80029bc:	4b39      	ldr	r3, [pc, #228]	@ (8002aa4 <xQueueGenericSend+0x200>)
 80029be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80029cc:	f001 faf6 	bl	8003fbc <vPortExitCritical>
				return pdPASS;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e063      	b.n	8002a9c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029da:	f001 faef 	bl	8003fbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	e05c      	b.n	8002a9c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d106      	bne.n	80029f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 ff57 	bl	80038a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029f2:	2301      	movs	r3, #1
 80029f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029f6:	f001 fae1 	bl	8003fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029fa:	f000 fcff 	bl	80033fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029fe:	f001 faad 	bl	8003f5c <vPortEnterCritical>
 8002a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a08:	b25b      	sxtb	r3, r3
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d103      	bne.n	8002a18 <xQueueGenericSend+0x174>
 8002a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a1e:	b25b      	sxtb	r3, r3
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a24:	d103      	bne.n	8002a2e <xQueueGenericSend+0x18a>
 8002a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a2e:	f001 fac5 	bl	8003fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a32:	1d3a      	adds	r2, r7, #4
 8002a34:	f107 0314 	add.w	r3, r7, #20
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 ff46 	bl	80038cc <xTaskCheckForTimeOut>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d124      	bne.n	8002a90 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a48:	f000 faa6 	bl	8002f98 <prvIsQueueFull>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d018      	beq.n	8002a84 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a54:	3310      	adds	r3, #16
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fe96 	bl	800378c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a62:	f000 fa31 	bl	8002ec8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a66:	f000 fcd7 	bl	8003418 <xTaskResumeAll>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f47f af7c 	bne.w	800296a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002a72:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <xQueueGenericSend+0x200>)
 8002a74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	f3bf 8f4f 	dsb	sy
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	e772      	b.n	800296a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a86:	f000 fa1f 	bl	8002ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a8a:	f000 fcc5 	bl	8003418 <xTaskResumeAll>
 8002a8e:	e76c      	b.n	800296a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a92:	f000 fa19 	bl	8002ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a96:	f000 fcbf 	bl	8003418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3738      	adds	r7, #56	@ 0x38
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	e000ed04 	.word	0xe000ed04

08002aa8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b090      	sub	sp, #64	@ 0x40
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10b      	bne.n	8002ad8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ad2:	bf00      	nop
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d103      	bne.n	8002ae6 <xQueueGenericSendFromISR+0x3e>
 8002ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <xQueueGenericSendFromISR+0x42>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <xQueueGenericSendFromISR+0x44>
 8002aea:	2300      	movs	r3, #0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10b      	bne.n	8002b08 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b02:	bf00      	nop
 8002b04:	bf00      	nop
 8002b06:	e7fd      	b.n	8002b04 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d103      	bne.n	8002b16 <xQueueGenericSendFromISR+0x6e>
 8002b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <xQueueGenericSendFromISR+0x72>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <xQueueGenericSendFromISR+0x74>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10b      	bne.n	8002b38 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	623b      	str	r3, [r7, #32]
}
 8002b32:	bf00      	nop
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b38:	f001 fad2 	bl	80040e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b3c:	f3ef 8211 	mrs	r2, BASEPRI
 8002b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	61fa      	str	r2, [r7, #28]
 8002b52:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b54:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b56:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d302      	bcc.n	8002b6a <xQueueGenericSendFromISR+0xc2>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d12f      	bne.n	8002bca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002b80:	f000 f912 	bl	8002da8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b84:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d112      	bne.n	8002bb4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b98:	3324      	adds	r3, #36	@ 0x24
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fe1c 	bl	80037d8 <xTaskRemoveFromEventList>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00e      	beq.n	8002bc4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00b      	beq.n	8002bc4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e007      	b.n	8002bc4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002bb8:	3301      	adds	r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	b25a      	sxtb	r2, r3
 8002bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002bc8:	e001      	b.n	8002bce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002bd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3740      	adds	r7, #64	@ 0x40
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08c      	sub	sp, #48	@ 0x30
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10b      	bne.n	8002c16 <xQueueReceive+0x32>
	__asm volatile
 8002bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	623b      	str	r3, [r7, #32]
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	e7fd      	b.n	8002c12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d103      	bne.n	8002c24 <xQueueReceive+0x40>
 8002c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <xQueueReceive+0x44>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <xQueueReceive+0x46>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10b      	bne.n	8002c46 <xQueueReceive+0x62>
	__asm volatile
 8002c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	61fb      	str	r3, [r7, #28]
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	e7fd      	b.n	8002c42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c46:	f000 ff8d 	bl	8003b64 <xTaskGetSchedulerState>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d102      	bne.n	8002c56 <xQueueReceive+0x72>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <xQueueReceive+0x76>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <xQueueReceive+0x78>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10b      	bne.n	8002c78 <xQueueReceive+0x94>
	__asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	61bb      	str	r3, [r7, #24]
}
 8002c72:	bf00      	nop
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c78:	f001 f970 	bl	8003f5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01f      	beq.n	8002cc8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c8c:	f000 f8f6 	bl	8002e7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	1e5a      	subs	r2, r3, #1
 8002c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00f      	beq.n	8002cc0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca2:	3310      	adds	r3, #16
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fd97 	bl	80037d8 <xTaskRemoveFromEventList>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8002da4 <xQueueReceive+0x1c0>)
 8002cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002cc0:	f001 f97c 	bl	8003fbc <vPortExitCritical>
				return pdPASS;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e069      	b.n	8002d9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cce:	f001 f975 	bl	8003fbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e062      	b.n	8002d9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cdc:	f107 0310 	add.w	r3, r7, #16
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fddd 	bl	80038a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cea:	f001 f967 	bl	8003fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cee:	f000 fb85 	bl	80033fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cf2:	f001 f933 	bl	8003f5c <vPortEnterCritical>
 8002cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d103      	bne.n	8002d0c <xQueueReceive+0x128>
 8002d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d103      	bne.n	8002d22 <xQueueReceive+0x13e>
 8002d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d22:	f001 f94b 	bl	8003fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d26:	1d3a      	adds	r2, r7, #4
 8002d28:	f107 0310 	add.w	r3, r7, #16
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fdcc 	bl	80038cc <xTaskCheckForTimeOut>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d123      	bne.n	8002d82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d3c:	f000 f916 	bl	8002f6c <prvIsQueueEmpty>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d017      	beq.n	8002d76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d48:	3324      	adds	r3, #36	@ 0x24
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fd1c 	bl	800378c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d56:	f000 f8b7 	bl	8002ec8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d5a:	f000 fb5d 	bl	8003418 <xTaskResumeAll>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d189      	bne.n	8002c78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002d64:	4b0f      	ldr	r3, [pc, #60]	@ (8002da4 <xQueueReceive+0x1c0>)
 8002d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	e780      	b.n	8002c78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d78:	f000 f8a6 	bl	8002ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d7c:	f000 fb4c 	bl	8003418 <xTaskResumeAll>
 8002d80:	e77a      	b.n	8002c78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d84:	f000 f8a0 	bl	8002ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d88:	f000 fb46 	bl	8003418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d8e:	f000 f8ed 	bl	8002f6c <prvIsQueueEmpty>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f43f af6f 	beq.w	8002c78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3730      	adds	r7, #48	@ 0x30
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	e000ed04 	.word	0xe000ed04

08002da8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10d      	bne.n	8002de2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d14d      	bne.n	8002e6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fee4 	bl	8003ba0 <xTaskPriorityDisinherit>
 8002dd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	e043      	b.n	8002e6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d119      	bne.n	8002e1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6858      	ldr	r0, [r3, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	461a      	mov	r2, r3
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	f001 fc2c 	bl	8004650 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e00:	441a      	add	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d32b      	bcc.n	8002e6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	e026      	b.n	8002e6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	68d8      	ldr	r0, [r3, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	461a      	mov	r2, r3
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	f001 fc12 	bl	8004650 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e34:	425b      	negs	r3, r3
 8002e36:	441a      	add	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d207      	bcs.n	8002e58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	425b      	negs	r3, r3
 8002e52:	441a      	add	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d105      	bne.n	8002e6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002e72:	697b      	ldr	r3, [r7, #20]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d018      	beq.n	8002ec0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	441a      	add	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d303      	bcc.n	8002eb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68d9      	ldr	r1, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6838      	ldr	r0, [r7, #0]
 8002ebc:	f001 fbc8 	bl	8004650 <memcpy>
	}
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ed0:	f001 f844 	bl	8003f5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002eda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002edc:	e011      	b.n	8002f02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d012      	beq.n	8002f0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3324      	adds	r3, #36	@ 0x24
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fc74 	bl	80037d8 <xTaskRemoveFromEventList>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ef6:	f000 fd4d 	bl	8003994 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	dce9      	bgt.n	8002ede <prvUnlockQueue+0x16>
 8002f0a:	e000      	b.n	8002f0e <prvUnlockQueue+0x46>
					break;
 8002f0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	22ff      	movs	r2, #255	@ 0xff
 8002f12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002f16:	f001 f851 	bl	8003fbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f1a:	f001 f81f 	bl	8003f5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f26:	e011      	b.n	8002f4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d012      	beq.n	8002f56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3310      	adds	r3, #16
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fc4f 	bl	80037d8 <xTaskRemoveFromEventList>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f40:	f000 fd28 	bl	8003994 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f44:	7bbb      	ldrb	r3, [r7, #14]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	dce9      	bgt.n	8002f28 <prvUnlockQueue+0x60>
 8002f54:	e000      	b.n	8002f58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	22ff      	movs	r2, #255	@ 0xff
 8002f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002f60:	f001 f82c 	bl	8003fbc <vPortExitCritical>
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f74:	f000 fff2 	bl	8003f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f80:	2301      	movs	r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e001      	b.n	8002f8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f8a:	f001 f817 	bl	8003fbc <vPortExitCritical>

	return xReturn;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fa0:	f000 ffdc 	bl	8003f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d102      	bne.n	8002fb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e001      	b.n	8002fba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fba:	f000 ffff 	bl	8003fbc <vPortExitCritical>

	return xReturn;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08e      	sub	sp, #56	@ 0x38
 8002fcc:	af04      	add	r7, sp, #16
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	623b      	str	r3, [r7, #32]
}
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10b      	bne.n	8003012 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	61fb      	str	r3, [r7, #28]
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	e7fd      	b.n	800300e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003012:	23a0      	movs	r3, #160	@ 0xa0
 8003014:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2ba0      	cmp	r3, #160	@ 0xa0
 800301a:	d00b      	beq.n	8003034 <xTaskCreateStatic+0x6c>
	__asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	61bb      	str	r3, [r7, #24]
}
 800302e:	bf00      	nop
 8003030:	bf00      	nop
 8003032:	e7fd      	b.n	8003030 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003034:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01e      	beq.n	800307a <xTaskCreateStatic+0xb2>
 800303c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01b      	beq.n	800307a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800304a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	2202      	movs	r2, #2
 8003050:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003054:	2300      	movs	r3, #0
 8003056:	9303      	str	r3, [sp, #12]
 8003058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305a:	9302      	str	r3, [sp, #8]
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f851 	bl	8003114 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003072:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003074:	f000 f8ee 	bl	8003254 <prvAddNewTaskToReadyList>
 8003078:	e001      	b.n	800307e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800307e:	697b      	ldr	r3, [r7, #20]
	}
 8003080:	4618      	mov	r0, r3
 8003082:	3728      	adds	r7, #40	@ 0x28
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08c      	sub	sp, #48	@ 0x30
 800308c:	af04      	add	r7, sp, #16
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4618      	mov	r0, r3
 800309e:	f001 f85f 	bl	8004160 <pvPortMalloc>
 80030a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00e      	beq.n	80030c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030aa:	20a0      	movs	r0, #160	@ 0xa0
 80030ac:	f001 f858 	bl	8004160 <pvPortMalloc>
 80030b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80030be:	e005      	b.n	80030cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030c0:	6978      	ldr	r0, [r7, #20]
 80030c2:	f001 f91b 	bl	80042fc <vPortFree>
 80030c6:	e001      	b.n	80030cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d017      	beq.n	8003102 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030da:	88fa      	ldrh	r2, [r7, #6]
 80030dc:	2300      	movs	r3, #0
 80030de:	9303      	str	r3, [sp, #12]
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	9302      	str	r3, [sp, #8]
 80030e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f80f 	bl	8003114 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030f6:	69f8      	ldr	r0, [r7, #28]
 80030f8:	f000 f8ac 	bl	8003254 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030fc:	2301      	movs	r3, #1
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	e002      	b.n	8003108 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003108:	69bb      	ldr	r3, [r7, #24]
	}
 800310a:	4618      	mov	r0, r3
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800312c:	3b01      	subs	r3, #1
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f023 0307 	bic.w	r3, r3, #7
 800313a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800314a:	f383 8811 	msr	BASEPRI, r3
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	f3bf 8f4f 	dsb	sy
 8003156:	617b      	str	r3, [r7, #20]
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	e7fd      	b.n	800315a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01f      	beq.n	80031a4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]
 8003168:	e012      	b.n	8003190 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	4413      	add	r3, r2
 8003170:	7819      	ldrb	r1, [r3, #0]
 8003172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	4413      	add	r3, r2
 8003178:	3334      	adds	r3, #52	@ 0x34
 800317a:	460a      	mov	r2, r1
 800317c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	4413      	add	r3, r2
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d006      	beq.n	8003198 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3301      	adds	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b0f      	cmp	r3, #15
 8003194:	d9e9      	bls.n	800316a <prvInitialiseNewTask+0x56>
 8003196:	e000      	b.n	800319a <prvInitialiseNewTask+0x86>
			{
				break;
 8003198:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031a2:	e003      	b.n	80031ac <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80031a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d901      	bls.n	80031b6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031b2:	2306      	movs	r3, #6
 80031b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80031b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80031bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80031c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c4:	2200      	movs	r2, #0
 80031c6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ca:	3304      	adds	r3, #4
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fa14 	bl	80025fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d4:	3318      	adds	r3, #24
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fa0f 	bl	80025fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e4:	f1c3 0207 	rsb	r2, r3, #7
 80031e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f4:	2200      	movs	r2, #0
 80031f6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003204:	334c      	adds	r3, #76	@ 0x4c
 8003206:	224c      	movs	r2, #76	@ 0x4c
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f001 f994 	bl	8004538 <memset>
 8003210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003212:	4a0d      	ldr	r2, [pc, #52]	@ (8003248 <prvInitialiseNewTask+0x134>)
 8003214:	651a      	str	r2, [r3, #80]	@ 0x50
 8003216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003218:	4a0c      	ldr	r2, [pc, #48]	@ (800324c <prvInitialiseNewTask+0x138>)
 800321a:	655a      	str	r2, [r3, #84]	@ 0x54
 800321c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321e:	4a0c      	ldr	r2, [pc, #48]	@ (8003250 <prvInitialiseNewTask+0x13c>)
 8003220:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	68f9      	ldr	r1, [r7, #12]
 8003226:	69b8      	ldr	r0, [r7, #24]
 8003228:	f000 fda8 	bl	8003d7c <pxPortInitialiseStack>
 800322c:	4602      	mov	r2, r0
 800322e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003230:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800323c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800323e:	bf00      	nop
 8003240:	3720      	adds	r7, #32
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20001140 	.word	0x20001140
 800324c:	200011a8 	.word	0x200011a8
 8003250:	20001210 	.word	0x20001210

08003254 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800325c:	f000 fe7e 	bl	8003f5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003260:	4b2a      	ldr	r3, [pc, #168]	@ (800330c <prvAddNewTaskToReadyList+0xb8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3301      	adds	r3, #1
 8003266:	4a29      	ldr	r2, [pc, #164]	@ (800330c <prvAddNewTaskToReadyList+0xb8>)
 8003268:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800326a:	4b29      	ldr	r3, [pc, #164]	@ (8003310 <prvAddNewTaskToReadyList+0xbc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003272:	4a27      	ldr	r2, [pc, #156]	@ (8003310 <prvAddNewTaskToReadyList+0xbc>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003278:	4b24      	ldr	r3, [pc, #144]	@ (800330c <prvAddNewTaskToReadyList+0xb8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d110      	bne.n	80032a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003280:	f000 fbac 	bl	80039dc <prvInitialiseTaskLists>
 8003284:	e00d      	b.n	80032a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003286:	4b23      	ldr	r3, [pc, #140]	@ (8003314 <prvAddNewTaskToReadyList+0xc0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800328e:	4b20      	ldr	r3, [pc, #128]	@ (8003310 <prvAddNewTaskToReadyList+0xbc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	429a      	cmp	r2, r3
 800329a:	d802      	bhi.n	80032a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800329c:	4a1c      	ldr	r2, [pc, #112]	@ (8003310 <prvAddNewTaskToReadyList+0xbc>)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80032a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003318 <prvAddNewTaskToReadyList+0xc4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3301      	adds	r3, #1
 80032a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003318 <prvAddNewTaskToReadyList+0xc4>)
 80032aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	2201      	movs	r2, #1
 80032b2:	409a      	lsls	r2, r3
 80032b4:	4b19      	ldr	r3, [pc, #100]	@ (800331c <prvAddNewTaskToReadyList+0xc8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	4a18      	ldr	r2, [pc, #96]	@ (800331c <prvAddNewTaskToReadyList+0xc8>)
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4a15      	ldr	r2, [pc, #84]	@ (8003320 <prvAddNewTaskToReadyList+0xcc>)
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3304      	adds	r3, #4
 80032d2:	4619      	mov	r1, r3
 80032d4:	4610      	mov	r0, r2
 80032d6:	f7ff f99c 	bl	8002612 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80032da:	f000 fe6f 	bl	8003fbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032de:	4b0d      	ldr	r3, [pc, #52]	@ (8003314 <prvAddNewTaskToReadyList+0xc0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00e      	beq.n	8003304 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003310 <prvAddNewTaskToReadyList+0xbc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d207      	bcs.n	8003304 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <prvAddNewTaskToReadyList+0xd0>)
 80032f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	200004ec 	.word	0x200004ec
 8003310:	200003ec 	.word	0x200003ec
 8003314:	200004f8 	.word	0x200004f8
 8003318:	20000508 	.word	0x20000508
 800331c:	200004f4 	.word	0x200004f4
 8003320:	200003f0 	.word	0x200003f0
 8003324:	e000ed04 	.word	0xe000ed04

08003328 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	@ 0x28
 800332c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003336:	463a      	mov	r2, r7
 8003338:	1d39      	adds	r1, r7, #4
 800333a:	f107 0308 	add.w	r3, r7, #8
 800333e:	4618      	mov	r0, r3
 8003340:	f7fc ff06 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003344:	6839      	ldr	r1, [r7, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	9202      	str	r2, [sp, #8]
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	2300      	movs	r3, #0
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	2300      	movs	r3, #0
 8003354:	460a      	mov	r2, r1
 8003356:	4921      	ldr	r1, [pc, #132]	@ (80033dc <vTaskStartScheduler+0xb4>)
 8003358:	4821      	ldr	r0, [pc, #132]	@ (80033e0 <vTaskStartScheduler+0xb8>)
 800335a:	f7ff fe35 	bl	8002fc8 <xTaskCreateStatic>
 800335e:	4603      	mov	r3, r0
 8003360:	4a20      	ldr	r2, [pc, #128]	@ (80033e4 <vTaskStartScheduler+0xbc>)
 8003362:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003364:	4b1f      	ldr	r3, [pc, #124]	@ (80033e4 <vTaskStartScheduler+0xbc>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800336c:	2301      	movs	r3, #1
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	e001      	b.n	8003376 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d11b      	bne.n	80033b4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	613b      	str	r3, [r7, #16]
}
 800338e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003390:	4b15      	ldr	r3, [pc, #84]	@ (80033e8 <vTaskStartScheduler+0xc0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	334c      	adds	r3, #76	@ 0x4c
 8003396:	4a15      	ldr	r2, [pc, #84]	@ (80033ec <vTaskStartScheduler+0xc4>)
 8003398:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800339a:	4b15      	ldr	r3, [pc, #84]	@ (80033f0 <vTaskStartScheduler+0xc8>)
 800339c:	f04f 32ff 	mov.w	r2, #4294967295
 80033a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033a2:	4b14      	ldr	r3, [pc, #80]	@ (80033f4 <vTaskStartScheduler+0xcc>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033a8:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <vTaskStartScheduler+0xd0>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80033ae:	f000 fd63 	bl	8003e78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80033b2:	e00f      	b.n	80033d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ba:	d10b      	bne.n	80033d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80033bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	60fb      	str	r3, [r7, #12]
}
 80033ce:	bf00      	nop
 80033d0:	bf00      	nop
 80033d2:	e7fd      	b.n	80033d0 <vTaskStartScheduler+0xa8>
}
 80033d4:	bf00      	nop
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	0800477c 	.word	0x0800477c
 80033e0:	080039ad 	.word	0x080039ad
 80033e4:	20000510 	.word	0x20000510
 80033e8:	200003ec 	.word	0x200003ec
 80033ec:	20000010 	.word	0x20000010
 80033f0:	2000050c 	.word	0x2000050c
 80033f4:	200004f8 	.word	0x200004f8
 80033f8:	200004f0 	.word	0x200004f0

080033fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003400:	4b04      	ldr	r3, [pc, #16]	@ (8003414 <vTaskSuspendAll+0x18>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	4a03      	ldr	r2, [pc, #12]	@ (8003414 <vTaskSuspendAll+0x18>)
 8003408:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800340a:	bf00      	nop
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000514 	.word	0x20000514

08003418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003426:	4b42      	ldr	r3, [pc, #264]	@ (8003530 <xTaskResumeAll+0x118>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10b      	bne.n	8003446 <xTaskResumeAll+0x2e>
	__asm volatile
 800342e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	603b      	str	r3, [r7, #0]
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	e7fd      	b.n	8003442 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003446:	f000 fd89 	bl	8003f5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800344a:	4b39      	ldr	r3, [pc, #228]	@ (8003530 <xTaskResumeAll+0x118>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3b01      	subs	r3, #1
 8003450:	4a37      	ldr	r2, [pc, #220]	@ (8003530 <xTaskResumeAll+0x118>)
 8003452:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003454:	4b36      	ldr	r3, [pc, #216]	@ (8003530 <xTaskResumeAll+0x118>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d161      	bne.n	8003520 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800345c:	4b35      	ldr	r3, [pc, #212]	@ (8003534 <xTaskResumeAll+0x11c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d05d      	beq.n	8003520 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003464:	e02e      	b.n	80034c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003466:	4b34      	ldr	r3, [pc, #208]	@ (8003538 <xTaskResumeAll+0x120>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3318      	adds	r3, #24
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff f928 	bl	80026c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3304      	adds	r3, #4
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff f923 	bl	80026c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003486:	2201      	movs	r2, #1
 8003488:	409a      	lsls	r2, r3
 800348a:	4b2c      	ldr	r3, [pc, #176]	@ (800353c <xTaskResumeAll+0x124>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4313      	orrs	r3, r2
 8003490:	4a2a      	ldr	r2, [pc, #168]	@ (800353c <xTaskResumeAll+0x124>)
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4a27      	ldr	r2, [pc, #156]	@ (8003540 <xTaskResumeAll+0x128>)
 80034a2:	441a      	add	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f7ff f8b1 	bl	8002612 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b4:	4b23      	ldr	r3, [pc, #140]	@ (8003544 <xTaskResumeAll+0x12c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80034be:	4b22      	ldr	r3, [pc, #136]	@ (8003548 <xTaskResumeAll+0x130>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003538 <xTaskResumeAll+0x120>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1cc      	bne.n	8003466 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80034d2:	f000 fb27 	bl	8003b24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034d6:	4b1d      	ldr	r3, [pc, #116]	@ (800354c <xTaskResumeAll+0x134>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d010      	beq.n	8003504 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034e2:	f000 f837 	bl	8003554 <xTaskIncrementTick>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80034ec:	4b16      	ldr	r3, [pc, #88]	@ (8003548 <xTaskResumeAll+0x130>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f1      	bne.n	80034e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80034fe:	4b13      	ldr	r3, [pc, #76]	@ (800354c <xTaskResumeAll+0x134>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003504:	4b10      	ldr	r3, [pc, #64]	@ (8003548 <xTaskResumeAll+0x130>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d009      	beq.n	8003520 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800350c:	2301      	movs	r3, #1
 800350e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003510:	4b0f      	ldr	r3, [pc, #60]	@ (8003550 <xTaskResumeAll+0x138>)
 8003512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003520:	f000 fd4c 	bl	8003fbc <vPortExitCritical>

	return xAlreadyYielded;
 8003524:	68bb      	ldr	r3, [r7, #8]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000514 	.word	0x20000514
 8003534:	200004ec 	.word	0x200004ec
 8003538:	200004ac 	.word	0x200004ac
 800353c:	200004f4 	.word	0x200004f4
 8003540:	200003f0 	.word	0x200003f0
 8003544:	200003ec 	.word	0x200003ec
 8003548:	20000500 	.word	0x20000500
 800354c:	200004fc 	.word	0x200004fc
 8003550:	e000ed04 	.word	0xe000ed04

08003554 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800355e:	4b4f      	ldr	r3, [pc, #316]	@ (800369c <xTaskIncrementTick+0x148>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 808f 	bne.w	8003686 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003568:	4b4d      	ldr	r3, [pc, #308]	@ (80036a0 <xTaskIncrementTick+0x14c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3301      	adds	r3, #1
 800356e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003570:	4a4b      	ldr	r2, [pc, #300]	@ (80036a0 <xTaskIncrementTick+0x14c>)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d121      	bne.n	80035c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800357c:	4b49      	ldr	r3, [pc, #292]	@ (80036a4 <xTaskIncrementTick+0x150>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00b      	beq.n	800359e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358a:	f383 8811 	msr	BASEPRI, r3
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	603b      	str	r3, [r7, #0]
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	e7fd      	b.n	800359a <xTaskIncrementTick+0x46>
 800359e:	4b41      	ldr	r3, [pc, #260]	@ (80036a4 <xTaskIncrementTick+0x150>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	4b40      	ldr	r3, [pc, #256]	@ (80036a8 <xTaskIncrementTick+0x154>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a3e      	ldr	r2, [pc, #248]	@ (80036a4 <xTaskIncrementTick+0x150>)
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4a3e      	ldr	r2, [pc, #248]	@ (80036a8 <xTaskIncrementTick+0x154>)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	4b3e      	ldr	r3, [pc, #248]	@ (80036ac <xTaskIncrementTick+0x158>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3301      	adds	r3, #1
 80035b8:	4a3c      	ldr	r2, [pc, #240]	@ (80036ac <xTaskIncrementTick+0x158>)
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	f000 fab2 	bl	8003b24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035c0:	4b3b      	ldr	r3, [pc, #236]	@ (80036b0 <xTaskIncrementTick+0x15c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d348      	bcc.n	800365c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035ca:	4b36      	ldr	r3, [pc, #216]	@ (80036a4 <xTaskIncrementTick+0x150>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d104      	bne.n	80035de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035d4:	4b36      	ldr	r3, [pc, #216]	@ (80036b0 <xTaskIncrementTick+0x15c>)
 80035d6:	f04f 32ff 	mov.w	r2, #4294967295
 80035da:	601a      	str	r2, [r3, #0]
					break;
 80035dc:	e03e      	b.n	800365c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035de:	4b31      	ldr	r3, [pc, #196]	@ (80036a4 <xTaskIncrementTick+0x150>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d203      	bcs.n	80035fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035f6:	4a2e      	ldr	r2, [pc, #184]	@ (80036b0 <xTaskIncrementTick+0x15c>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035fc:	e02e      	b.n	800365c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	3304      	adds	r3, #4
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff f860 	bl	80026c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	3318      	adds	r3, #24
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff f857 	bl	80026c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361e:	2201      	movs	r2, #1
 8003620:	409a      	lsls	r2, r3
 8003622:	4b24      	ldr	r3, [pc, #144]	@ (80036b4 <xTaskIncrementTick+0x160>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4313      	orrs	r3, r2
 8003628:	4a22      	ldr	r2, [pc, #136]	@ (80036b4 <xTaskIncrementTick+0x160>)
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4a1f      	ldr	r2, [pc, #124]	@ (80036b8 <xTaskIncrementTick+0x164>)
 800363a:	441a      	add	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	3304      	adds	r3, #4
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f7fe ffe5 	bl	8002612 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800364c:	4b1b      	ldr	r3, [pc, #108]	@ (80036bc <xTaskIncrementTick+0x168>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003652:	429a      	cmp	r2, r3
 8003654:	d3b9      	bcc.n	80035ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003656:	2301      	movs	r3, #1
 8003658:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800365a:	e7b6      	b.n	80035ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800365c:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <xTaskIncrementTick+0x168>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003662:	4915      	ldr	r1, [pc, #84]	@ (80036b8 <xTaskIncrementTick+0x164>)
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d901      	bls.n	8003678 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003674:	2301      	movs	r3, #1
 8003676:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003678:	4b11      	ldr	r3, [pc, #68]	@ (80036c0 <xTaskIncrementTick+0x16c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d007      	beq.n	8003690 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003680:	2301      	movs	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	e004      	b.n	8003690 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003686:	4b0f      	ldr	r3, [pc, #60]	@ (80036c4 <xTaskIncrementTick+0x170>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3301      	adds	r3, #1
 800368c:	4a0d      	ldr	r2, [pc, #52]	@ (80036c4 <xTaskIncrementTick+0x170>)
 800368e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003690:	697b      	ldr	r3, [r7, #20]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000514 	.word	0x20000514
 80036a0:	200004f0 	.word	0x200004f0
 80036a4:	200004a4 	.word	0x200004a4
 80036a8:	200004a8 	.word	0x200004a8
 80036ac:	20000504 	.word	0x20000504
 80036b0:	2000050c 	.word	0x2000050c
 80036b4:	200004f4 	.word	0x200004f4
 80036b8:	200003f0 	.word	0x200003f0
 80036bc:	200003ec 	.word	0x200003ec
 80036c0:	20000500 	.word	0x20000500
 80036c4:	200004fc 	.word	0x200004fc

080036c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036ce:	4b29      	ldr	r3, [pc, #164]	@ (8003774 <vTaskSwitchContext+0xac>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036d6:	4b28      	ldr	r3, [pc, #160]	@ (8003778 <vTaskSwitchContext+0xb0>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036dc:	e045      	b.n	800376a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80036de:	4b26      	ldr	r3, [pc, #152]	@ (8003778 <vTaskSwitchContext+0xb0>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e4:	4b25      	ldr	r3, [pc, #148]	@ (800377c <vTaskSwitchContext+0xb4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	fab3 f383 	clz	r3, r3
 80036f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80036f2:	7afb      	ldrb	r3, [r7, #11]
 80036f4:	f1c3 031f 	rsb	r3, r3, #31
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	4921      	ldr	r1, [pc, #132]	@ (8003780 <vTaskSwitchContext+0xb8>)
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <vTaskSwitchContext+0x5e>
	__asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	607b      	str	r3, [r7, #4]
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	e7fd      	b.n	8003722 <vTaskSwitchContext+0x5a>
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4a13      	ldr	r2, [pc, #76]	@ (8003780 <vTaskSwitchContext+0xb8>)
 8003732:	4413      	add	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	3308      	adds	r3, #8
 8003748:	429a      	cmp	r2, r3
 800374a:	d104      	bne.n	8003756 <vTaskSwitchContext+0x8e>
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4a09      	ldr	r2, [pc, #36]	@ (8003784 <vTaskSwitchContext+0xbc>)
 800375e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003760:	4b08      	ldr	r3, [pc, #32]	@ (8003784 <vTaskSwitchContext+0xbc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	334c      	adds	r3, #76	@ 0x4c
 8003766:	4a08      	ldr	r2, [pc, #32]	@ (8003788 <vTaskSwitchContext+0xc0>)
 8003768:	6013      	str	r3, [r2, #0]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	20000514 	.word	0x20000514
 8003778:	20000500 	.word	0x20000500
 800377c:	200004f4 	.word	0x200004f4
 8003780:	200003f0 	.word	0x200003f0
 8003784:	200003ec 	.word	0x200003ec
 8003788:	20000010 	.word	0x20000010

0800378c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10b      	bne.n	80037b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	60fb      	str	r3, [r7, #12]
}
 80037ae:	bf00      	nop
 80037b0:	bf00      	nop
 80037b2:	e7fd      	b.n	80037b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037b4:	4b07      	ldr	r3, [pc, #28]	@ (80037d4 <vTaskPlaceOnEventList+0x48>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3318      	adds	r3, #24
 80037ba:	4619      	mov	r1, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7fe ff4b 	bl	8002658 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037c2:	2101      	movs	r1, #1
 80037c4:	6838      	ldr	r0, [r7, #0]
 80037c6:	f000 fa73 	bl	8003cb0 <prvAddCurrentTaskToDelayedList>
}
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	200003ec 	.word	0x200003ec

080037d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10b      	bne.n	8003806 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	60fb      	str	r3, [r7, #12]
}
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	e7fd      	b.n	8003802 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	3318      	adds	r3, #24
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe ff5c 	bl	80026c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003810:	4b1d      	ldr	r3, [pc, #116]	@ (8003888 <xTaskRemoveFromEventList+0xb0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d11c      	bne.n	8003852 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	3304      	adds	r3, #4
 800381c:	4618      	mov	r0, r3
 800381e:	f7fe ff53 	bl	80026c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003826:	2201      	movs	r2, #1
 8003828:	409a      	lsls	r2, r3
 800382a:	4b18      	ldr	r3, [pc, #96]	@ (800388c <xTaskRemoveFromEventList+0xb4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4313      	orrs	r3, r2
 8003830:	4a16      	ldr	r2, [pc, #88]	@ (800388c <xTaskRemoveFromEventList+0xb4>)
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4a13      	ldr	r2, [pc, #76]	@ (8003890 <xTaskRemoveFromEventList+0xb8>)
 8003842:	441a      	add	r2, r3
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	3304      	adds	r3, #4
 8003848:	4619      	mov	r1, r3
 800384a:	4610      	mov	r0, r2
 800384c:	f7fe fee1 	bl	8002612 <vListInsertEnd>
 8003850:	e005      	b.n	800385e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	3318      	adds	r3, #24
 8003856:	4619      	mov	r1, r3
 8003858:	480e      	ldr	r0, [pc, #56]	@ (8003894 <xTaskRemoveFromEventList+0xbc>)
 800385a:	f7fe feda 	bl	8002612 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003862:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <xTaskRemoveFromEventList+0xc0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	429a      	cmp	r2, r3
 800386a:	d905      	bls.n	8003878 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800386c:	2301      	movs	r3, #1
 800386e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003870:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <xTaskRemoveFromEventList+0xc4>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e001      	b.n	800387c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800387c:	697b      	ldr	r3, [r7, #20]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000514 	.word	0x20000514
 800388c:	200004f4 	.word	0x200004f4
 8003890:	200003f0 	.word	0x200003f0
 8003894:	200004ac 	.word	0x200004ac
 8003898:	200003ec 	.word	0x200003ec
 800389c:	20000500 	.word	0x20000500

080038a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038a8:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <vTaskInternalSetTimeOutState+0x24>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038b0:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <vTaskInternalSetTimeOutState+0x28>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	605a      	str	r2, [r3, #4]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000504 	.word	0x20000504
 80038c8:	200004f0 	.word	0x200004f0

080038cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10b      	bne.n	80038f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	613b      	str	r3, [r7, #16]
}
 80038ee:	bf00      	nop
 80038f0:	bf00      	nop
 80038f2:	e7fd      	b.n	80038f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10b      	bne.n	8003912 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	60fb      	str	r3, [r7, #12]
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	e7fd      	b.n	800390e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003912:	f000 fb23 	bl	8003f5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003916:	4b1d      	ldr	r3, [pc, #116]	@ (800398c <xTaskCheckForTimeOut+0xc0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d102      	bne.n	8003936 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	e023      	b.n	800397e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b15      	ldr	r3, [pc, #84]	@ (8003990 <xTaskCheckForTimeOut+0xc4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d007      	beq.n	8003952 <xTaskCheckForTimeOut+0x86>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	429a      	cmp	r2, r3
 800394a:	d302      	bcc.n	8003952 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	e015      	b.n	800397e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	429a      	cmp	r2, r3
 800395a:	d20b      	bcs.n	8003974 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	1ad2      	subs	r2, r2, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ff99 	bl	80038a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	e004      	b.n	800397e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800397a:	2301      	movs	r3, #1
 800397c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800397e:	f000 fb1d 	bl	8003fbc <vPortExitCritical>

	return xReturn;
 8003982:	69fb      	ldr	r3, [r7, #28]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	200004f0 	.word	0x200004f0
 8003990:	20000504 	.word	0x20000504

08003994 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003998:	4b03      	ldr	r3, [pc, #12]	@ (80039a8 <vTaskMissedYield+0x14>)
 800399a:	2201      	movs	r2, #1
 800399c:	601a      	str	r2, [r3, #0]
}
 800399e:	bf00      	nop
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000500 	.word	0x20000500

080039ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039b4:	f000 f852 	bl	8003a5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039b8:	4b06      	ldr	r3, [pc, #24]	@ (80039d4 <prvIdleTask+0x28>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d9f9      	bls.n	80039b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039c0:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <prvIdleTask+0x2c>)
 80039c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039d0:	e7f0      	b.n	80039b4 <prvIdleTask+0x8>
 80039d2:	bf00      	nop
 80039d4:	200003f0 	.word	0x200003f0
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	e00c      	b.n	8003a02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4a12      	ldr	r2, [pc, #72]	@ (8003a3c <prvInitialiseTaskLists+0x60>)
 80039f4:	4413      	add	r3, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fde0 	bl	80025bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3301      	adds	r3, #1
 8003a00:	607b      	str	r3, [r7, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b06      	cmp	r3, #6
 8003a06:	d9ef      	bls.n	80039e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a08:	480d      	ldr	r0, [pc, #52]	@ (8003a40 <prvInitialiseTaskLists+0x64>)
 8003a0a:	f7fe fdd7 	bl	80025bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a0e:	480d      	ldr	r0, [pc, #52]	@ (8003a44 <prvInitialiseTaskLists+0x68>)
 8003a10:	f7fe fdd4 	bl	80025bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a14:	480c      	ldr	r0, [pc, #48]	@ (8003a48 <prvInitialiseTaskLists+0x6c>)
 8003a16:	f7fe fdd1 	bl	80025bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a1a:	480c      	ldr	r0, [pc, #48]	@ (8003a4c <prvInitialiseTaskLists+0x70>)
 8003a1c:	f7fe fdce 	bl	80025bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a20:	480b      	ldr	r0, [pc, #44]	@ (8003a50 <prvInitialiseTaskLists+0x74>)
 8003a22:	f7fe fdcb 	bl	80025bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a26:	4b0b      	ldr	r3, [pc, #44]	@ (8003a54 <prvInitialiseTaskLists+0x78>)
 8003a28:	4a05      	ldr	r2, [pc, #20]	@ (8003a40 <prvInitialiseTaskLists+0x64>)
 8003a2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a58 <prvInitialiseTaskLists+0x7c>)
 8003a2e:	4a05      	ldr	r2, [pc, #20]	@ (8003a44 <prvInitialiseTaskLists+0x68>)
 8003a30:	601a      	str	r2, [r3, #0]
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200003f0 	.word	0x200003f0
 8003a40:	2000047c 	.word	0x2000047c
 8003a44:	20000490 	.word	0x20000490
 8003a48:	200004ac 	.word	0x200004ac
 8003a4c:	200004c0 	.word	0x200004c0
 8003a50:	200004d8 	.word	0x200004d8
 8003a54:	200004a4 	.word	0x200004a4
 8003a58:	200004a8 	.word	0x200004a8

08003a5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a62:	e019      	b.n	8003a98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a64:	f000 fa7a 	bl	8003f5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a68:	4b10      	ldr	r3, [pc, #64]	@ (8003aac <prvCheckTasksWaitingTermination+0x50>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe fe27 	bl	80026c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab0 <prvCheckTasksWaitingTermination+0x54>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	4a0b      	ldr	r2, [pc, #44]	@ (8003ab0 <prvCheckTasksWaitingTermination+0x54>)
 8003a82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a84:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <prvCheckTasksWaitingTermination+0x58>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab4 <prvCheckTasksWaitingTermination+0x58>)
 8003a8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a8e:	f000 fa95 	bl	8003fbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f810 	bl	8003ab8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a98:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <prvCheckTasksWaitingTermination+0x58>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e1      	bne.n	8003a64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	200004c0 	.word	0x200004c0
 8003ab0:	200004ec 	.word	0x200004ec
 8003ab4:	200004d4 	.word	0x200004d4

08003ab8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	334c      	adds	r3, #76	@ 0x4c
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fd3f 	bl	8004548 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d108      	bne.n	8003ae6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fc0f 	bl	80042fc <vPortFree>
				vPortFree( pxTCB );
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fc0c 	bl	80042fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ae4:	e019      	b.n	8003b1a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d103      	bne.n	8003af8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fc03 	bl	80042fc <vPortFree>
	}
 8003af6:	e010      	b.n	8003b1a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d00b      	beq.n	8003b1a <prvDeleteTCB+0x62>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	60fb      	str	r3, [r7, #12]
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	e7fd      	b.n	8003b16 <prvDeleteTCB+0x5e>
	}
 8003b1a:	bf00      	nop
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b5c <prvResetNextTaskUnblockTime+0x38>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d104      	bne.n	8003b3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b34:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <prvResetNextTaskUnblockTime+0x3c>)
 8003b36:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b3c:	e008      	b.n	8003b50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b3e:	4b07      	ldr	r3, [pc, #28]	@ (8003b5c <prvResetNextTaskUnblockTime+0x38>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4a04      	ldr	r2, [pc, #16]	@ (8003b60 <prvResetNextTaskUnblockTime+0x3c>)
 8003b4e:	6013      	str	r3, [r2, #0]
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	200004a4 	.word	0x200004a4
 8003b60:	2000050c 	.word	0x2000050c

08003b64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <xTaskGetSchedulerState+0x34>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b72:	2301      	movs	r3, #1
 8003b74:	607b      	str	r3, [r7, #4]
 8003b76:	e008      	b.n	8003b8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b78:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <xTaskGetSchedulerState+0x38>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d102      	bne.n	8003b86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b80:	2302      	movs	r3, #2
 8003b82:	607b      	str	r3, [r7, #4]
 8003b84:	e001      	b.n	8003b8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b86:	2300      	movs	r3, #0
 8003b88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b8a:	687b      	ldr	r3, [r7, #4]
	}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	200004f8 	.word	0x200004f8
 8003b9c:	20000514 	.word	0x20000514

08003ba0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d070      	beq.n	8003c98 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ca4 <xTaskPriorityDisinherit+0x104>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d00b      	beq.n	8003bd8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	60fb      	str	r3, [r7, #12]
}
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10b      	bne.n	8003bf8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	60bb      	str	r3, [r7, #8]
}
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfc:	1e5a      	subs	r2, r3, #1
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d044      	beq.n	8003c98 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d140      	bne.n	8003c98 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe fd54 	bl	80026c8 <uxListRemove>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d115      	bne.n	8003c52 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c2a:	491f      	ldr	r1, [pc, #124]	@ (8003ca8 <xTaskPriorityDisinherit+0x108>)
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <xTaskPriorityDisinherit+0xb2>
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	2201      	movs	r2, #1
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43da      	mvns	r2, r3
 8003c48:	4b18      	ldr	r3, [pc, #96]	@ (8003cac <xTaskPriorityDisinherit+0x10c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	4a17      	ldr	r2, [pc, #92]	@ (8003cac <xTaskPriorityDisinherit+0x10c>)
 8003c50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5e:	f1c3 0207 	rsb	r2, r3, #7
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003cac <xTaskPriorityDisinherit+0x10c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	4a0d      	ldr	r2, [pc, #52]	@ (8003cac <xTaskPriorityDisinherit+0x10c>)
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4a08      	ldr	r2, [pc, #32]	@ (8003ca8 <xTaskPriorityDisinherit+0x108>)
 8003c86:	441a      	add	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f7fe fcbf 	bl	8002612 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c98:	697b      	ldr	r3, [r7, #20]
	}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200003ec 	.word	0x200003ec
 8003ca8:	200003f0 	.word	0x200003f0
 8003cac:	200004f4 	.word	0x200004f4

08003cb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003cba:	4b29      	ldr	r3, [pc, #164]	@ (8003d60 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cc0:	4b28      	ldr	r3, [pc, #160]	@ (8003d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe fcfe 	bl	80026c8 <uxListRemove>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10b      	bne.n	8003cea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003cd2:	4b24      	ldr	r3, [pc, #144]	@ (8003d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	2201      	movs	r2, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	4b21      	ldr	r3, [pc, #132]	@ (8003d68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	4a20      	ldr	r2, [pc, #128]	@ (8003d68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ce8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf0:	d10a      	bne.n	8003d08 <prvAddCurrentTaskToDelayedList+0x58>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	4619      	mov	r1, r3
 8003d00:	481a      	ldr	r0, [pc, #104]	@ (8003d6c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d02:	f7fe fc86 	bl	8002612 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d06:	e026      	b.n	8003d56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d10:	4b14      	ldr	r3, [pc, #80]	@ (8003d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d209      	bcs.n	8003d34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d20:	4b13      	ldr	r3, [pc, #76]	@ (8003d70 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4b0f      	ldr	r3, [pc, #60]	@ (8003d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f7fe fc93 	bl	8002658 <vListInsert>
}
 8003d32:	e010      	b.n	8003d56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d34:	4b0f      	ldr	r3, [pc, #60]	@ (8003d74 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4610      	mov	r0, r2
 8003d42:	f7fe fc89 	bl	8002658 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d46:	4b0c      	ldr	r3, [pc, #48]	@ (8003d78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d202      	bcs.n	8003d56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003d50:	4a09      	ldr	r2, [pc, #36]	@ (8003d78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	6013      	str	r3, [r2, #0]
}
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	200004f0 	.word	0x200004f0
 8003d64:	200003ec 	.word	0x200003ec
 8003d68:	200004f4 	.word	0x200004f4
 8003d6c:	200004d8 	.word	0x200004d8
 8003d70:	200004a8 	.word	0x200004a8
 8003d74:	200004a4 	.word	0x200004a4
 8003d78:	2000050c 	.word	0x2000050c

08003d7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3b04      	subs	r3, #4
 8003d8c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3b04      	subs	r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f023 0201 	bic.w	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3b04      	subs	r3, #4
 8003daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003dac:	4a08      	ldr	r2, [pc, #32]	@ (8003dd0 <pxPortInitialiseStack+0x54>)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3b14      	subs	r3, #20
 8003db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3b20      	subs	r3, #32
 8003dc2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr
 8003dd0:	08003dd5 	.word	0x08003dd5

08003dd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003dde:	4b12      	ldr	r3, [pc, #72]	@ (8003e28 <prvTaskExitError+0x54>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de6:	d00b      	beq.n	8003e00 <prvTaskExitError+0x2c>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	60fb      	str	r3, [r7, #12]
}
 8003dfa:	bf00      	nop
 8003dfc:	bf00      	nop
 8003dfe:	e7fd      	b.n	8003dfc <prvTaskExitError+0x28>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	60bb      	str	r3, [r7, #8]
}
 8003e12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e14:	bf00      	nop
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0fc      	beq.n	8003e16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	2000000c 	.word	0x2000000c
 8003e2c:	00000000 	.word	0x00000000

08003e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e30:	4b07      	ldr	r3, [pc, #28]	@ (8003e50 <pxCurrentTCBConst2>)
 8003e32:	6819      	ldr	r1, [r3, #0]
 8003e34:	6808      	ldr	r0, [r1, #0]
 8003e36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e3a:	f380 8809 	msr	PSP, r0
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f380 8811 	msr	BASEPRI, r0
 8003e4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003e4e:	4770      	bx	lr

08003e50 <pxCurrentTCBConst2>:
 8003e50:	200003ec 	.word	0x200003ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop

08003e58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003e58:	4806      	ldr	r0, [pc, #24]	@ (8003e74 <prvPortStartFirstTask+0x1c>)
 8003e5a:	6800      	ldr	r0, [r0, #0]
 8003e5c:	6800      	ldr	r0, [r0, #0]
 8003e5e:	f380 8808 	msr	MSP, r0
 8003e62:	b662      	cpsie	i
 8003e64:	b661      	cpsie	f
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	df00      	svc	0
 8003e70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e72:	bf00      	nop
 8003e74:	e000ed08 	.word	0xe000ed08

08003e78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e7e:	4b32      	ldr	r3, [pc, #200]	@ (8003f48 <xPortStartScheduler+0xd0>)
 8003e80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	22ff      	movs	r2, #255	@ 0xff
 8003e8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8003f4c <xPortStartScheduler+0xd4>)
 8003ea4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8003f50 <xPortStartScheduler+0xd8>)
 8003ea8:	2207      	movs	r2, #7
 8003eaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eac:	e009      	b.n	8003ec2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003eae:	4b28      	ldr	r3, [pc, #160]	@ (8003f50 <xPortStartScheduler+0xd8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	4a26      	ldr	r2, [pc, #152]	@ (8003f50 <xPortStartScheduler+0xd8>)
 8003eb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eca:	2b80      	cmp	r3, #128	@ 0x80
 8003ecc:	d0ef      	beq.n	8003eae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ece:	4b20      	ldr	r3, [pc, #128]	@ (8003f50 <xPortStartScheduler+0xd8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f1c3 0307 	rsb	r3, r3, #7
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d00b      	beq.n	8003ef2 <xPortStartScheduler+0x7a>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	60bb      	str	r3, [r7, #8]
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	e7fd      	b.n	8003eee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ef2:	4b17      	ldr	r3, [pc, #92]	@ (8003f50 <xPortStartScheduler+0xd8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	4a15      	ldr	r2, [pc, #84]	@ (8003f50 <xPortStartScheduler+0xd8>)
 8003efa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003efc:	4b14      	ldr	r3, [pc, #80]	@ (8003f50 <xPortStartScheduler+0xd8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f04:	4a12      	ldr	r2, [pc, #72]	@ (8003f50 <xPortStartScheduler+0xd8>)
 8003f06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f10:	4b10      	ldr	r3, [pc, #64]	@ (8003f54 <xPortStartScheduler+0xdc>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0f      	ldr	r2, [pc, #60]	@ (8003f54 <xPortStartScheduler+0xdc>)
 8003f16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f54 <xPortStartScheduler+0xdc>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a0c      	ldr	r2, [pc, #48]	@ (8003f54 <xPortStartScheduler+0xdc>)
 8003f22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003f26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f28:	f000 f8b8 	bl	800409c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f58 <xPortStartScheduler+0xe0>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f32:	f7ff ff91 	bl	8003e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f36:	f7ff fbc7 	bl	80036c8 <vTaskSwitchContext>
	prvTaskExitError();
 8003f3a:	f7ff ff4b 	bl	8003dd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	e000e400 	.word	0xe000e400
 8003f4c:	20000518 	.word	0x20000518
 8003f50:	2000051c 	.word	0x2000051c
 8003f54:	e000ed20 	.word	0xe000ed20
 8003f58:	2000000c 	.word	0x2000000c

08003f5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
	__asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	607b      	str	r3, [r7, #4]
}
 8003f74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f76:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb4 <vPortEnterCritical+0x58>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb4 <vPortEnterCritical+0x58>)
 8003f7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f80:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb4 <vPortEnterCritical+0x58>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d110      	bne.n	8003faa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f88:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <vPortEnterCritical+0x5c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <vPortEnterCritical+0x4e>
	__asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	603b      	str	r3, [r7, #0]
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop
 8003fa8:	e7fd      	b.n	8003fa6 <vPortEnterCritical+0x4a>
	}
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	2000000c 	.word	0x2000000c
 8003fb8:	e000ed04 	.word	0xe000ed04

08003fbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fc2:	4b12      	ldr	r3, [pc, #72]	@ (800400c <vPortExitCritical+0x50>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10b      	bne.n	8003fe2 <vPortExitCritical+0x26>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	607b      	str	r3, [r7, #4]
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	e7fd      	b.n	8003fde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800400c <vPortExitCritical+0x50>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	4a08      	ldr	r2, [pc, #32]	@ (800400c <vPortExitCritical+0x50>)
 8003fea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003fec:	4b07      	ldr	r3, [pc, #28]	@ (800400c <vPortExitCritical+0x50>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <vPortExitCritical+0x44>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	f383 8811 	msr	BASEPRI, r3
}
 8003ffe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	2000000c 	.word	0x2000000c

08004010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004010:	f3ef 8009 	mrs	r0, PSP
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <pxCurrentTCBConst>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004020:	6010      	str	r0, [r2, #0]
 8004022:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004026:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800402a:	f380 8811 	msr	BASEPRI, r0
 800402e:	f7ff fb4b 	bl	80036c8 <vTaskSwitchContext>
 8004032:	f04f 0000 	mov.w	r0, #0
 8004036:	f380 8811 	msr	BASEPRI, r0
 800403a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800403e:	6819      	ldr	r1, [r3, #0]
 8004040:	6808      	ldr	r0, [r1, #0]
 8004042:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004046:	f380 8809 	msr	PSP, r0
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	4770      	bx	lr

08004050 <pxCurrentTCBConst>:
 8004050:	200003ec 	.word	0x200003ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop

08004058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	607b      	str	r3, [r7, #4]
}
 8004070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004072:	f7ff fa6f 	bl	8003554 <xTaskIncrementTick>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800407c:	4b06      	ldr	r3, [pc, #24]	@ (8004098 <SysTick_Handler+0x40>)
 800407e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	2300      	movs	r3, #0
 8004086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f383 8811 	msr	BASEPRI, r3
}
 800408e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	e000ed04 	.word	0xe000ed04

0800409c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040a0:	4b0a      	ldr	r3, [pc, #40]	@ (80040cc <vPortSetupTimerInterrupt+0x30>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040a6:	4b0a      	ldr	r3, [pc, #40]	@ (80040d0 <vPortSetupTimerInterrupt+0x34>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040ac:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <vPortSetupTimerInterrupt+0x38>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a09      	ldr	r2, [pc, #36]	@ (80040d8 <vPortSetupTimerInterrupt+0x3c>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	099b      	lsrs	r3, r3, #6
 80040b8:	4a08      	ldr	r2, [pc, #32]	@ (80040dc <vPortSetupTimerInterrupt+0x40>)
 80040ba:	3b01      	subs	r3, #1
 80040bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040be:	4b03      	ldr	r3, [pc, #12]	@ (80040cc <vPortSetupTimerInterrupt+0x30>)
 80040c0:	2207      	movs	r2, #7
 80040c2:	601a      	str	r2, [r3, #0]
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr
 80040cc:	e000e010 	.word	0xe000e010
 80040d0:	e000e018 	.word	0xe000e018
 80040d4:	20000000 	.word	0x20000000
 80040d8:	10624dd3 	.word	0x10624dd3
 80040dc:	e000e014 	.word	0xe000e014

080040e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80040e6:	f3ef 8305 	mrs	r3, IPSR
 80040ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b0f      	cmp	r3, #15
 80040f0:	d915      	bls.n	800411e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80040f2:	4a17      	ldr	r2, [pc, #92]	@ (8004150 <vPortValidateInterruptPriority+0x70>)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80040fc:	4b15      	ldr	r3, [pc, #84]	@ (8004154 <vPortValidateInterruptPriority+0x74>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	7afa      	ldrb	r2, [r7, #11]
 8004102:	429a      	cmp	r2, r3
 8004104:	d20b      	bcs.n	800411e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	607b      	str	r3, [r7, #4]
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	e7fd      	b.n	800411a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800411e:	4b0e      	ldr	r3, [pc, #56]	@ (8004158 <vPortValidateInterruptPriority+0x78>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004126:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <vPortValidateInterruptPriority+0x7c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d90b      	bls.n	8004146 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	603b      	str	r3, [r7, #0]
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	e7fd      	b.n	8004142 <vPortValidateInterruptPriority+0x62>
	}
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	e000e3f0 	.word	0xe000e3f0
 8004154:	20000518 	.word	0x20000518
 8004158:	e000ed0c 	.word	0xe000ed0c
 800415c:	2000051c 	.word	0x2000051c

08004160 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	@ 0x28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004168:	2300      	movs	r3, #0
 800416a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800416c:	f7ff f946 	bl	80033fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004170:	4b5c      	ldr	r3, [pc, #368]	@ (80042e4 <pvPortMalloc+0x184>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004178:	f000 f924 	bl	80043c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800417c:	4b5a      	ldr	r3, [pc, #360]	@ (80042e8 <pvPortMalloc+0x188>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4013      	ands	r3, r2
 8004184:	2b00      	cmp	r3, #0
 8004186:	f040 8095 	bne.w	80042b4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01e      	beq.n	80041ce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004190:	2208      	movs	r2, #8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d015      	beq.n	80041ce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f023 0307 	bic.w	r3, r3, #7
 80041a8:	3308      	adds	r3, #8
 80041aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <pvPortMalloc+0x6e>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	617b      	str	r3, [r7, #20]
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	e7fd      	b.n	80041ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d06f      	beq.n	80042b4 <pvPortMalloc+0x154>
 80041d4:	4b45      	ldr	r3, [pc, #276]	@ (80042ec <pvPortMalloc+0x18c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d86a      	bhi.n	80042b4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041de:	4b44      	ldr	r3, [pc, #272]	@ (80042f0 <pvPortMalloc+0x190>)
 80041e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80041e2:	4b43      	ldr	r3, [pc, #268]	@ (80042f0 <pvPortMalloc+0x190>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041e8:	e004      	b.n	80041f4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d903      	bls.n	8004206 <pvPortMalloc+0xa6>
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f1      	bne.n	80041ea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004206:	4b37      	ldr	r3, [pc, #220]	@ (80042e4 <pvPortMalloc+0x184>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800420c:	429a      	cmp	r2, r3
 800420e:	d051      	beq.n	80042b4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2208      	movs	r2, #8
 8004216:	4413      	add	r3, r2
 8004218:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	1ad2      	subs	r2, r2, r3
 800422a:	2308      	movs	r3, #8
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	429a      	cmp	r2, r3
 8004230:	d920      	bls.n	8004274 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4413      	add	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <pvPortMalloc+0xfc>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	613b      	str	r3, [r7, #16]
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	1ad2      	subs	r2, r2, r3
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800426e:	69b8      	ldr	r0, [r7, #24]
 8004270:	f000 f90a 	bl	8004488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004274:	4b1d      	ldr	r3, [pc, #116]	@ (80042ec <pvPortMalloc+0x18c>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	4a1b      	ldr	r2, [pc, #108]	@ (80042ec <pvPortMalloc+0x18c>)
 8004280:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004282:	4b1a      	ldr	r3, [pc, #104]	@ (80042ec <pvPortMalloc+0x18c>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4b1b      	ldr	r3, [pc, #108]	@ (80042f4 <pvPortMalloc+0x194>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d203      	bcs.n	8004296 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800428e:	4b17      	ldr	r3, [pc, #92]	@ (80042ec <pvPortMalloc+0x18c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a18      	ldr	r2, [pc, #96]	@ (80042f4 <pvPortMalloc+0x194>)
 8004294:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	4b13      	ldr	r3, [pc, #76]	@ (80042e8 <pvPortMalloc+0x188>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	431a      	orrs	r2, r3
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80042aa:	4b13      	ldr	r3, [pc, #76]	@ (80042f8 <pvPortMalloc+0x198>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3301      	adds	r3, #1
 80042b0:	4a11      	ldr	r2, [pc, #68]	@ (80042f8 <pvPortMalloc+0x198>)
 80042b2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042b4:	f7ff f8b0 	bl	8003418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <pvPortMalloc+0x17a>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	60fb      	str	r3, [r7, #12]
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	e7fd      	b.n	80042d6 <pvPortMalloc+0x176>
	return pvReturn;
 80042da:	69fb      	ldr	r3, [r7, #28]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3728      	adds	r7, #40	@ 0x28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20001128 	.word	0x20001128
 80042e8:	2000113c 	.word	0x2000113c
 80042ec:	2000112c 	.word	0x2000112c
 80042f0:	20001120 	.word	0x20001120
 80042f4:	20001130 	.word	0x20001130
 80042f8:	20001134 	.word	0x20001134

080042fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d04f      	beq.n	80043ae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800430e:	2308      	movs	r3, #8
 8004310:	425b      	negs	r3, r3
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4413      	add	r3, r2
 8004316:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	4b25      	ldr	r3, [pc, #148]	@ (80043b8 <vPortFree+0xbc>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4013      	ands	r3, r2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10b      	bne.n	8004342 <vPortFree+0x46>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	60fb      	str	r3, [r7, #12]
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	e7fd      	b.n	800433e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <vPortFree+0x66>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	60bb      	str	r3, [r7, #8]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	4b14      	ldr	r3, [pc, #80]	@ (80043b8 <vPortFree+0xbc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01e      	beq.n	80043ae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d11a      	bne.n	80043ae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	4b0e      	ldr	r3, [pc, #56]	@ (80043b8 <vPortFree+0xbc>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	43db      	mvns	r3, r3
 8004382:	401a      	ands	r2, r3
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004388:	f7ff f838 	bl	80033fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	4b0a      	ldr	r3, [pc, #40]	@ (80043bc <vPortFree+0xc0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4413      	add	r3, r2
 8004396:	4a09      	ldr	r2, [pc, #36]	@ (80043bc <vPortFree+0xc0>)
 8004398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800439a:	6938      	ldr	r0, [r7, #16]
 800439c:	f000 f874 	bl	8004488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80043a0:	4b07      	ldr	r3, [pc, #28]	@ (80043c0 <vPortFree+0xc4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3301      	adds	r3, #1
 80043a6:	4a06      	ldr	r2, [pc, #24]	@ (80043c0 <vPortFree+0xc4>)
 80043a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80043aa:	f7ff f835 	bl	8003418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043ae:	bf00      	nop
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	2000113c 	.word	0x2000113c
 80043bc:	2000112c 	.word	0x2000112c
 80043c0:	20001138 	.word	0x20001138

080043c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80043ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043d0:	4b27      	ldr	r3, [pc, #156]	@ (8004470 <prvHeapInit+0xac>)
 80043d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3307      	adds	r3, #7
 80043e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0307 	bic.w	r3, r3, #7
 80043ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004470 <prvHeapInit+0xac>)
 80043f4:	4413      	add	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004474 <prvHeapInit+0xb0>)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004402:	4b1c      	ldr	r3, [pc, #112]	@ (8004474 <prvHeapInit+0xb0>)
 8004404:	2200      	movs	r2, #0
 8004406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	4413      	add	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004410:	2208      	movs	r2, #8
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0307 	bic.w	r3, r3, #7
 800441e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a15      	ldr	r2, [pc, #84]	@ (8004478 <prvHeapInit+0xb4>)
 8004424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004426:	4b14      	ldr	r3, [pc, #80]	@ (8004478 <prvHeapInit+0xb4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2200      	movs	r2, #0
 800442c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800442e:	4b12      	ldr	r3, [pc, #72]	@ (8004478 <prvHeapInit+0xb4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	1ad2      	subs	r2, r2, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004444:	4b0c      	ldr	r3, [pc, #48]	@ (8004478 <prvHeapInit+0xb4>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	4a0a      	ldr	r2, [pc, #40]	@ (800447c <prvHeapInit+0xb8>)
 8004452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4a09      	ldr	r2, [pc, #36]	@ (8004480 <prvHeapInit+0xbc>)
 800445a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800445c:	4b09      	ldr	r3, [pc, #36]	@ (8004484 <prvHeapInit+0xc0>)
 800445e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004462:	601a      	str	r2, [r3, #0]
}
 8004464:	bf00      	nop
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000520 	.word	0x20000520
 8004474:	20001120 	.word	0x20001120
 8004478:	20001128 	.word	0x20001128
 800447c:	20001130 	.word	0x20001130
 8004480:	2000112c 	.word	0x2000112c
 8004484:	2000113c 	.word	0x2000113c

08004488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004490:	4b27      	ldr	r3, [pc, #156]	@ (8004530 <prvInsertBlockIntoFreeList+0xa8>)
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	e002      	b.n	800449c <prvInsertBlockIntoFreeList+0x14>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d8f7      	bhi.n	8004496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	4413      	add	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d108      	bne.n	80044ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	441a      	add	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	441a      	add	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d118      	bne.n	8004510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4b14      	ldr	r3, [pc, #80]	@ (8004534 <prvInsertBlockIntoFreeList+0xac>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d00d      	beq.n	8004506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	441a      	add	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e008      	b.n	8004518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004506:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <prvInsertBlockIntoFreeList+0xac>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	e003      	b.n	8004518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	429a      	cmp	r2, r3
 800451e:	d002      	beq.n	8004526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004526:	bf00      	nop
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr
 8004530:	20001120 	.word	0x20001120
 8004534:	20001128 	.word	0x20001128

08004538 <memset>:
 8004538:	4603      	mov	r3, r0
 800453a:	4402      	add	r2, r0
 800453c:	4293      	cmp	r3, r2
 800453e:	d100      	bne.n	8004542 <memset+0xa>
 8004540:	4770      	bx	lr
 8004542:	f803 1b01 	strb.w	r1, [r3], #1
 8004546:	e7f9      	b.n	800453c <memset+0x4>

08004548 <_reclaim_reent>:
 8004548:	4b2d      	ldr	r3, [pc, #180]	@ (8004600 <_reclaim_reent+0xb8>)
 800454a:	b570      	push	{r4, r5, r6, lr}
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4604      	mov	r4, r0
 8004550:	4283      	cmp	r3, r0
 8004552:	d053      	beq.n	80045fc <_reclaim_reent+0xb4>
 8004554:	69c3      	ldr	r3, [r0, #28]
 8004556:	b31b      	cbz	r3, 80045a0 <_reclaim_reent+0x58>
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	b163      	cbz	r3, 8004576 <_reclaim_reent+0x2e>
 800455c:	2500      	movs	r5, #0
 800455e:	69e3      	ldr	r3, [r4, #28]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	5959      	ldr	r1, [r3, r5]
 8004564:	b9b1      	cbnz	r1, 8004594 <_reclaim_reent+0x4c>
 8004566:	3504      	adds	r5, #4
 8004568:	2d80      	cmp	r5, #128	@ 0x80
 800456a:	d1f8      	bne.n	800455e <_reclaim_reent+0x16>
 800456c:	69e3      	ldr	r3, [r4, #28]
 800456e:	4620      	mov	r0, r4
 8004570:	68d9      	ldr	r1, [r3, #12]
 8004572:	f000 f87b 	bl	800466c <_free_r>
 8004576:	69e3      	ldr	r3, [r4, #28]
 8004578:	6819      	ldr	r1, [r3, #0]
 800457a:	b111      	cbz	r1, 8004582 <_reclaim_reent+0x3a>
 800457c:	4620      	mov	r0, r4
 800457e:	f000 f875 	bl	800466c <_free_r>
 8004582:	69e3      	ldr	r3, [r4, #28]
 8004584:	689d      	ldr	r5, [r3, #8]
 8004586:	b15d      	cbz	r5, 80045a0 <_reclaim_reent+0x58>
 8004588:	4629      	mov	r1, r5
 800458a:	4620      	mov	r0, r4
 800458c:	682d      	ldr	r5, [r5, #0]
 800458e:	f000 f86d 	bl	800466c <_free_r>
 8004592:	e7f8      	b.n	8004586 <_reclaim_reent+0x3e>
 8004594:	680e      	ldr	r6, [r1, #0]
 8004596:	4620      	mov	r0, r4
 8004598:	f000 f868 	bl	800466c <_free_r>
 800459c:	4631      	mov	r1, r6
 800459e:	e7e1      	b.n	8004564 <_reclaim_reent+0x1c>
 80045a0:	6961      	ldr	r1, [r4, #20]
 80045a2:	b111      	cbz	r1, 80045aa <_reclaim_reent+0x62>
 80045a4:	4620      	mov	r0, r4
 80045a6:	f000 f861 	bl	800466c <_free_r>
 80045aa:	69e1      	ldr	r1, [r4, #28]
 80045ac:	b111      	cbz	r1, 80045b4 <_reclaim_reent+0x6c>
 80045ae:	4620      	mov	r0, r4
 80045b0:	f000 f85c 	bl	800466c <_free_r>
 80045b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80045b6:	b111      	cbz	r1, 80045be <_reclaim_reent+0x76>
 80045b8:	4620      	mov	r0, r4
 80045ba:	f000 f857 	bl	800466c <_free_r>
 80045be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045c0:	b111      	cbz	r1, 80045c8 <_reclaim_reent+0x80>
 80045c2:	4620      	mov	r0, r4
 80045c4:	f000 f852 	bl	800466c <_free_r>
 80045c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80045ca:	b111      	cbz	r1, 80045d2 <_reclaim_reent+0x8a>
 80045cc:	4620      	mov	r0, r4
 80045ce:	f000 f84d 	bl	800466c <_free_r>
 80045d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80045d4:	b111      	cbz	r1, 80045dc <_reclaim_reent+0x94>
 80045d6:	4620      	mov	r0, r4
 80045d8:	f000 f848 	bl	800466c <_free_r>
 80045dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80045de:	b111      	cbz	r1, 80045e6 <_reclaim_reent+0x9e>
 80045e0:	4620      	mov	r0, r4
 80045e2:	f000 f843 	bl	800466c <_free_r>
 80045e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80045e8:	b111      	cbz	r1, 80045f0 <_reclaim_reent+0xa8>
 80045ea:	4620      	mov	r0, r4
 80045ec:	f000 f83e 	bl	800466c <_free_r>
 80045f0:	6a23      	ldr	r3, [r4, #32]
 80045f2:	b11b      	cbz	r3, 80045fc <_reclaim_reent+0xb4>
 80045f4:	4620      	mov	r0, r4
 80045f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80045fa:	4718      	bx	r3
 80045fc:	bd70      	pop	{r4, r5, r6, pc}
 80045fe:	bf00      	nop
 8004600:	20000010 	.word	0x20000010

08004604 <__libc_init_array>:
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	2600      	movs	r6, #0
 8004608:	4d0c      	ldr	r5, [pc, #48]	@ (800463c <__libc_init_array+0x38>)
 800460a:	4c0d      	ldr	r4, [pc, #52]	@ (8004640 <__libc_init_array+0x3c>)
 800460c:	1b64      	subs	r4, r4, r5
 800460e:	10a4      	asrs	r4, r4, #2
 8004610:	42a6      	cmp	r6, r4
 8004612:	d109      	bne.n	8004628 <__libc_init_array+0x24>
 8004614:	f000 f87e 	bl	8004714 <_init>
 8004618:	2600      	movs	r6, #0
 800461a:	4d0a      	ldr	r5, [pc, #40]	@ (8004644 <__libc_init_array+0x40>)
 800461c:	4c0a      	ldr	r4, [pc, #40]	@ (8004648 <__libc_init_array+0x44>)
 800461e:	1b64      	subs	r4, r4, r5
 8004620:	10a4      	asrs	r4, r4, #2
 8004622:	42a6      	cmp	r6, r4
 8004624:	d105      	bne.n	8004632 <__libc_init_array+0x2e>
 8004626:	bd70      	pop	{r4, r5, r6, pc}
 8004628:	f855 3b04 	ldr.w	r3, [r5], #4
 800462c:	4798      	blx	r3
 800462e:	3601      	adds	r6, #1
 8004630:	e7ee      	b.n	8004610 <__libc_init_array+0xc>
 8004632:	f855 3b04 	ldr.w	r3, [r5], #4
 8004636:	4798      	blx	r3
 8004638:	3601      	adds	r6, #1
 800463a:	e7f2      	b.n	8004622 <__libc_init_array+0x1e>
 800463c:	080047b0 	.word	0x080047b0
 8004640:	080047b0 	.word	0x080047b0
 8004644:	080047b0 	.word	0x080047b0
 8004648:	080047b4 	.word	0x080047b4

0800464c <__retarget_lock_acquire_recursive>:
 800464c:	4770      	bx	lr

0800464e <__retarget_lock_release_recursive>:
 800464e:	4770      	bx	lr

08004650 <memcpy>:
 8004650:	440a      	add	r2, r1
 8004652:	4291      	cmp	r1, r2
 8004654:	f100 33ff 	add.w	r3, r0, #4294967295
 8004658:	d100      	bne.n	800465c <memcpy+0xc>
 800465a:	4770      	bx	lr
 800465c:	b510      	push	{r4, lr}
 800465e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004662:	4291      	cmp	r1, r2
 8004664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004668:	d1f9      	bne.n	800465e <memcpy+0xe>
 800466a:	bd10      	pop	{r4, pc}

0800466c <_free_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4605      	mov	r5, r0
 8004670:	2900      	cmp	r1, #0
 8004672:	d040      	beq.n	80046f6 <_free_r+0x8a>
 8004674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004678:	1f0c      	subs	r4, r1, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	bfb8      	it	lt
 800467e:	18e4      	addlt	r4, r4, r3
 8004680:	f000 f83c 	bl	80046fc <__malloc_lock>
 8004684:	4a1c      	ldr	r2, [pc, #112]	@ (80046f8 <_free_r+0x8c>)
 8004686:	6813      	ldr	r3, [r2, #0]
 8004688:	b933      	cbnz	r3, 8004698 <_free_r+0x2c>
 800468a:	6063      	str	r3, [r4, #4]
 800468c:	6014      	str	r4, [r2, #0]
 800468e:	4628      	mov	r0, r5
 8004690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004694:	f000 b838 	b.w	8004708 <__malloc_unlock>
 8004698:	42a3      	cmp	r3, r4
 800469a:	d908      	bls.n	80046ae <_free_r+0x42>
 800469c:	6820      	ldr	r0, [r4, #0]
 800469e:	1821      	adds	r1, r4, r0
 80046a0:	428b      	cmp	r3, r1
 80046a2:	bf01      	itttt	eq
 80046a4:	6819      	ldreq	r1, [r3, #0]
 80046a6:	685b      	ldreq	r3, [r3, #4]
 80046a8:	1809      	addeq	r1, r1, r0
 80046aa:	6021      	streq	r1, [r4, #0]
 80046ac:	e7ed      	b.n	800468a <_free_r+0x1e>
 80046ae:	461a      	mov	r2, r3
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	b10b      	cbz	r3, 80046b8 <_free_r+0x4c>
 80046b4:	42a3      	cmp	r3, r4
 80046b6:	d9fa      	bls.n	80046ae <_free_r+0x42>
 80046b8:	6811      	ldr	r1, [r2, #0]
 80046ba:	1850      	adds	r0, r2, r1
 80046bc:	42a0      	cmp	r0, r4
 80046be:	d10b      	bne.n	80046d8 <_free_r+0x6c>
 80046c0:	6820      	ldr	r0, [r4, #0]
 80046c2:	4401      	add	r1, r0
 80046c4:	1850      	adds	r0, r2, r1
 80046c6:	4283      	cmp	r3, r0
 80046c8:	6011      	str	r1, [r2, #0]
 80046ca:	d1e0      	bne.n	800468e <_free_r+0x22>
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4408      	add	r0, r1
 80046d2:	6010      	str	r0, [r2, #0]
 80046d4:	6053      	str	r3, [r2, #4]
 80046d6:	e7da      	b.n	800468e <_free_r+0x22>
 80046d8:	d902      	bls.n	80046e0 <_free_r+0x74>
 80046da:	230c      	movs	r3, #12
 80046dc:	602b      	str	r3, [r5, #0]
 80046de:	e7d6      	b.n	800468e <_free_r+0x22>
 80046e0:	6820      	ldr	r0, [r4, #0]
 80046e2:	1821      	adds	r1, r4, r0
 80046e4:	428b      	cmp	r3, r1
 80046e6:	bf01      	itttt	eq
 80046e8:	6819      	ldreq	r1, [r3, #0]
 80046ea:	685b      	ldreq	r3, [r3, #4]
 80046ec:	1809      	addeq	r1, r1, r0
 80046ee:	6021      	streq	r1, [r4, #0]
 80046f0:	6063      	str	r3, [r4, #4]
 80046f2:	6054      	str	r4, [r2, #4]
 80046f4:	e7cb      	b.n	800468e <_free_r+0x22>
 80046f6:	bd38      	pop	{r3, r4, r5, pc}
 80046f8:	2000127c 	.word	0x2000127c

080046fc <__malloc_lock>:
 80046fc:	4801      	ldr	r0, [pc, #4]	@ (8004704 <__malloc_lock+0x8>)
 80046fe:	f7ff bfa5 	b.w	800464c <__retarget_lock_acquire_recursive>
 8004702:	bf00      	nop
 8004704:	20001278 	.word	0x20001278

08004708 <__malloc_unlock>:
 8004708:	4801      	ldr	r0, [pc, #4]	@ (8004710 <__malloc_unlock+0x8>)
 800470a:	f7ff bfa0 	b.w	800464e <__retarget_lock_release_recursive>
 800470e:	bf00      	nop
 8004710:	20001278 	.word	0x20001278

08004714 <_init>:
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	bf00      	nop
 8004718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471a:	bc08      	pop	{r3}
 800471c:	469e      	mov	lr, r3
 800471e:	4770      	bx	lr

08004720 <_fini>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr
